<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alexander Beletsky's development blog]]></title>
  <link href="http://alexanderbeletsky.github.io/atom.xml" rel="self"/>
  <link href="http://alexanderbeletsky.github.io/"/>
  <updated>2013-09-16T21:58:05+03:00</updated>
  <id>http://alexanderbeletsky.github.io/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PaaS in Your Pocket with Dokku]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/09/paas-in-your-pocket-with-dokku.html"/>
    <updated>2013-09-16T21:21:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/09/paas-in-your-pocket-with-dokku</id>
    <content type="html"><![CDATA[<p>This is transcript of talk I gave on <a href="">RejectJS</a> conf in Berlin, September 2013.</p>

<p>What I&rsquo;m going to talk about is Dokku &ndash; pocket-size, very cool and interesting project, that would make you (hopefully) re-think of the code shipping.</p>

<!-- More -->




<script async class="speakerdeck-embed" data-id="d912a0f0fdbc0130260d1ebd49b9b82c" data-ratio="1.33333333333333" src="http://alexanderbeletsky.github.io//speakerdeck.com/assets/embed.js"></script>


<h2>Background</h2>

<p>So, some background on me. My name is Alexander and I live in Kiev and work for Danish company, named E-conomic. There we do, we interesting product called Debitoor and a lot of cool stuff happens there.. But besides of that full-time job, with a friend of mine, I&rsquo;m doing a small project called Likeastore.</p>

<p>And this is exactly, side-project are something <strong>there you learn some new things and you try these things</strong>. So, it&rsquo;s started out as hackathon project, it&rsquo;s Node.js, MongoDB, Angular.js &ndash; so highly JS related thing (even if my talk is not so JS oriented). On a hackathon we got really exited on the way it went, soon we realized that we want to push things out. So, we wanted to release, and conquer the world with the cool idea we had.</p>

<p>Probably the most important lesson I&rsquo;ve learned in whole my career &ndash; the way you ship the code, matters!</p>

<p>It matters a lot, but the key fact &ndash; as faster you can ship the code from machine A to machine B, as faster you running business as happy team you have. So, if you shipping once a 2-weeks, you are fine, if you shipping 1-week are are great, if you shipping 1-per-hour you are superb (if you don&rsquo;t believe me, take a look on github guys, how happy they are all the time).</p>

<p>And long time I realized that deployment of code, should be as easy as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master
</span><span class='line'>git push heroku master
</span><span class='line'>af deploy
</span><span class='line'>jitsu deploy</span></code></pre></td></tr></table></div></figure>


<p>Whatever, important is &ndash; one click (command, shell script) you are done.</p>

<p>So, we were seeking for good deployment and hosting options. And I love Node.js in particular for it&rsquo;s &ldquo;deployment-friendly&rdquo; environment.</p>

<p>Code deployment in general is very known developers problem. It solved many time and with cloud computing it <strong>evolutionized in something that&rsquo;s know as PaaS (platform as service)</strong>. And PaaS is something that brings a lot of value for any project, since you abstract out the exact infrastructure, and what you do is write code push it out, the rest is solved by PaaS.</p>

<p>Of cause, we started to look for PaaS that fits us best.</p>

<p>Started with AppFog, jumped to Nodejitsu, but met few constrains that forced us to gave up. Namely, that we had to have SSL connection, since we dealing with users private data, but Nodejitsu is proposing SSL for 120 USD that, simply too much of the project you begin with and don&rsquo;t have great budget behind.</p>

<p>I was really unhappy that time, since I realized a lot of overhead work that comes to you, then you drop PaaS.</p>

<p>This is where constraints coming from, and sometimes they are very unpleasant, but in general constraints are good. With perfect timing, I&rsquo;ve seen Dokku project.</p>

<p>Even if I said Dokku is small project, it&rsquo;s standing on shoulders of giants, and those giants are Docker &amp; Builtpacks &amp; Gitrecieve (there is a few more, but those are most important ones).</p>

<p>During this talk, I&rsquo;ll highlight both Docker and Dokku internals, but my primary goal is to rather share the <strong>experience of using Dokku that helped to making the things done</strong>.</p>

<h2>Dokku</h2>

<p>Dokku is created by bright hacker &ndash; Jeff Lindsay. And what Jeff did is he saw the opportunity of mixing all the pieces together in one tasty cocktail.</p>

<p>Dokku relying on Docker for running containers (as isolated application instance), it uses Gitrecive to implement git interface for server, and it&rsquo;s relying on Buildpacks, for preparing environment for container.</p>

<p>Now, it&rsquo;s time to show you how it works in reality:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo with node-sample</span></code></pre></td></tr></table></div></figure>


<h2>Gitrecieve</h2>

<p>Gitrecieve is a component which is able to recieve you git push command, create repository on fly and trigger recieve script. Recieve script could be anything you want.</p>

<h2>Buildpacks</h2>

<p>Buildpacks are open source components released by Heroku. How many of you guys ever used Heroku? All right, so the output you see, while pushing code to Heroku is exactly the <strong>result of work by Buildpack</strong>.</p>

<p>Buildpack is responsible for few things: it detects the environment of you app (like if I can see <code>package.json</code>, that would probably mean Node.js app), downloads all required runtime components and run build script. Once it run, we have created infrastructure where application is ready to start up.</p>

<p>So, Heroku created a lot of buildpacks, for Ruby, Python, Java, etc., and all that goodness is reused by Dokku.</p>

<h2>Docker</h2>

<p>How many of guys seen the videos, or read the materials about Docker? I hope many of you, because it&rsquo;s kind on noisy now.</p>

<p>So, Docker in essence, is the engine of <strong>portable containers</strong>. Portable? Containers? You are probably very interesting what actually goes, behind these words.</p>

<p>Docker is open-source project by dotCloud. And the dotCloud is actually specializing on shipping the code. Company&rsquo;s co-founder Salmon Hykes, gives are very nice metaphor on containers: imaging a shipping of goods like, 100 years ago &ndash; where were ships and barrels and bags and boxes, etc. Because of that variety you had a different options for shipping. In middle 1950, the idea of container born. Container defines size and dimensions, but in essence &ndash; you can put what ever you like there, close the door and that&rsquo;s it. It&rsquo;s guaranteed that you container is shipped, because all equipment fits it.</p>

<p>So, in dotCloud they&rsquo;ve developed a fairly complex infrastructure, that would allow to run their business. After 5 years of hacking that, they reached <strong>great level of expertise</strong>, as well they realized the need to take out the core system, rewrite it completely and open source it. That was then Docker project born and if Salmon would ever listen to my talk, I would like to give tons of Kudos for him, for that job.</p>

<p>Docker itself is hack above the Linux kernel technology called LXC. And LXC is the of running isolated processes. LXC is a Linux process, that have it&rsquo;s own file system, networking interfaces, processes etc.</p>

<p>Sure, you might think &ndash; it smells like virtual machines, why containers are better?</p>

<p>Image container is immutable entity. Once the command run, it&rsquo;s changed.. but as soon as change is not committed the image remain the same. That mean, you can re-use some existing image as many time as you want, all the time starting up, so called clean environment. The clean environment is something we like of using VM.</p>

<p>Startup time of container is <strong>many times faster, then booting up new VM image</strong>. And this is it&rsquo;s primary benefit.</p>

<p>Besides of that, Docker comes with so called Index. Index is a public repository of ready to use images. Different operations systems and different pre-installed software is there.</p>

<h2>Nginx</h2>

<p>All HTTP / HTTPS orchestration is done by Nginx.</p>

<h2>Deploying the applications with Dokku</h2>

<p>So, we&rsquo;ve came to the most interesting part, how Dokku is <strong>helpful for the product development</strong>. Theoretically, Dokku can work on any Linux machine with LXC support, to run docker, dokku itself is written on shell script, which make it really portable. Practically it works on Ubuntu 13 64b.</p>

<p>You build you own small PaaS on any IaaS as you want. One&rsquo;s which is able to fire up Ubuntu machine and give you ssh access to it. For a few reasons, I&rsquo;ve picked up Digital Ocean, since they indeed provide really nice service and competitive prices.</p>

<p>Once the machine is started, you push have to install Dokku there. After it&rsquo;s installed, you upload you SSH key there, so you are able to do git push.</p>

<p>You are able to configure environment variables, as well as configure SSL connection.</p>

<p>That&rsquo;s a <strong>perfect fit</strong>, especially for small projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Dokku on Vagrant]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/09/playing-with-dokku-on-vagrant.html"/>
    <updated>2013-09-03T19:57:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/09/playing-with-dokku-on-vagrant</id>
    <content type="html"><![CDATA[<p>As I said <a href="http://beletsky.net/2013/08/digitalocean-plus-dokku-equals-10-heroku.html">previously</a>, it&rsquo;s very easy to turn Linux machine into Heroku-like server. But, before setting up paying account on Amazon or Digital Ocean, it&rsquo;s nice to just play it locally. Will do that, running a Dokku on virtual machine. Will setup development environment and do first local deployment, just to see some real features.</p>

<p>It does not require complex environment to run Dokku locally. All you need is <code>git</code> and <code>Vagrant</code>.</p>

<!-- More -->


<h2>Prepearing Environment</h2>

<p>You box should contain few things: git (github account), VirtualBox and Vagrant. If you don&rsquo;t have Vagrant installed, please do now. It makes a lot of sense to keep such kind software on machine.</p>

<p>Here you can find <a href="http://docs.vagrantup.com/v2/getting-started/index.html">some instructionn</a> of how to do that.</p>

<h3>Cloning Dokku</h3>

<p>You should clone Dokku repo locally. In your development folder, run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; git clone git@github.com:progrium/dokku.git
</span><span class='line'>&gt; <span class="nb">cd </span>dokku
</span></code></pre></td></tr></table></div></figure>


<p>Dokku repository already contains Vagrant file, with all required configuration.</p>

<h3>Local Networking</h3>

<p>Just in sake of convenience, will map <code>10.0.0.2</code> ip address (the one that Vagrant machine is assigned with), to <code>dokku.me</code> DNS name, so it&rsquo;s just handy for testing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>› sudo nano /private/etc/hosts
</span></code></pre></td></tr></table></div></figure>


<p>and put last 2 lines, as it shown in my example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##
</span><span class='line'># Host Database
</span><span class='line'>#
</span><span class='line'># localhost is used to configure the loopback interface
</span><span class='line'># when the system is booting.  Do not change this entry.
</span><span class='line'>##
</span><span class='line'>127.0.0.1       localhost
</span><span class='line'>255.255.255.255 broadcasthost
</span><span class='line'>::1             localhost
</span><span class='line'>fe80::1%lo0     localhost
</span><span class='line'>10.0.0.2        dokku.me
</span><span class='line'>10.0.0.2        node-simple.dokku.me</span></code></pre></td></tr></table></div></figure>


<h3>Fire Up Virtual Machine</h3>

<p>In <code>dokku</code> folder, you should run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>It will start to prepare new virtual environment for you,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">80</span> <span class="o">=</span>&gt; 8080 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Running any VM customizations...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span></code></pre></td></tr></table></div></figure>


<p>I have a problem with this step few times, so if you machine could not be booted, try to run <code>vagrant reload</code>, it should help.</p>

<p>It would took about up to 20 minutes, to fire up virtual machine, install git there, install Docker + Dokku. As soon as it&rsquo;s done, it&rsquo;s possible to access machine by <code>ssh</code>.</p>

<p>Last thing you need to do, is to upload your <code>ssh</code> key to Dokku server, so you will be to <code>git push</code> code there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; cat ~/.ssh/id_rsa.pub | ssh root@dokku.me <span class="s2">&quot;sudo gitreceive upload-key alexanderbeletsky&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use default vagrant root password, which is <code>vagrant</code>.</p>

<p>Now, just to check that everything is fine simply access you machine by <code>ssh</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>So, just try that everything is running fine by checking version of Docker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; docker -v
</span><span class='line'>Docker version 0.6.1, build 5105263
</span></code></pre></td></tr></table></div></figure>


<p>The instance is ready for deployment.</p>

<h2>Deploy to Dokku</h2>

<p>If you still there, you can just quit vagrant <code>ssh</code> session, and went to the folder with Node.js application. I&rsquo;ll be using really simple <a href="https://github.com/alexanderbeletsky/node-simple">app</a>, called <code>Node-simple</code> &ndash; express.js based, that serves one HTML file and shows <code>NODE_ENV</code> env. variable.</p>

<p>So, what you need to setup is remote repository to push to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; git remote add <span class="nb">local</span>-deploy git@dokku.me:node-simple
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all. You ready for first deploy, just push code to machine with Dokku:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push <span class="nb">local</span>-deploy master
</span><span class='line'>› git push <span class="nb">local</span>-deploy master --force
</span><span class='line'>Counting objects: 5, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 8 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, 289 bytes | 0 bytes/s, <span class="k">done</span>.
</span><span class='line'>Total 3 <span class="o">(</span>delta 2<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>-----&gt; Building node-simple ...
</span><span class='line'>       Node.js app detected
</span><span class='line'>-----&gt; Resolving engine versions
</span><span class='line'>       Using Node.js version: 0.8.25
</span><span class='line'>       Using npm version: 1.2.30
</span><span class='line'>-----&gt; Fetching Node.js binaries
</span><span class='line'>-----&gt; Vendoring node into slug
</span><span class='line'>-----&gt; Installing dependencies with npm
</span><span class='line'>       npm WARN package.json application-name@0.0.5 No repository field.
</span><span class='line'>       npm WARN package.json application-name@0.0.5 No readme data.
</span><span class='line'>       npm WARN package.json send@0.1.0 No repository field.
</span><span class='line'>       ...
</span><span class='line'><span class="o">=====</span>&gt; Application deployed:
</span><span class='line'>       http://node-simple.dokku.me
</span><span class='line'>
</span><span class='line'>To git@dokku.me:node-simple
</span><span class='line'>   dd05aae..ac5b6da  master -&gt; master
</span></code></pre></td></tr></table></div></figure>


<h2>Setting up Environment</h2>

<p>Every application requires environment. It&rsquo;s common practice to set at least <code>NODE_ENV</code> variable for Node.js applications. To do that, you need to create <code>ENV</code> file inside the <code>/home/git/node-simple</code> folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>› ssh root@dokku.me <span class="s2">&quot;echo export NODE_ENV=&quot;</span>development<span class="s2">&quot; &gt; /home/git/node-simple/ENV&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s re-deploy the application, change the version in <code>package.json</code> and push code again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>› git push <span class="nb">local</span>-deploy master
</span></code></pre></td></tr></table></div></figure>


<p>Now, application is ready to be accessed.</p>

<h2>Accessing the Application</h2>

<p>Open Chrome and hit <code>http://node-simple.dokku.me</code>, so you will see such response:</p>

<p><img src="http://alexanderbeletsky.github.io/images/blog/node-simple-run.png"></p>

<p>You can play a bit further, by just changing some Node.js code of end-points and re-deploy. Each time, new docker instance is started and served on <code>http://node-simple.dokku.me</code>. The experience of deployment is really like something you have with Heroku.</p>

<p>Just looking on logs while new application is deployed, would give pretty much idea of what&rsquo;s going on there.</p>

<p>So, your local Vagrant image will good start place, before you ready to use Dokku on cloud.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digital Ocean + Dokku = 10$ Heroku]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/08/digitalocean-plus-dokku-equals-10-heroku.html"/>
    <updated>2013-08-28T22:00:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/08/digitalocean-plus-dokku-equals-10-heroku</id>
    <content type="html"><![CDATA[<p>My last infrastructure related <a href="http://beletsky.net/2013/07/why-we-moved-from-appfog-to-nodejitsu.html">post</a> was about an experience of using AppFog and switching to Nodejitsu eventually. But that was not the end. In short: for <a href="https://likeastore.com/">Likeastore</a> we needed SSL support, it happed that SSL is only available for Nodejitsu business plan, which price is 120 USD. That was simply to much for our small venture.</p>

<p>Long time ago, I realized &ndash; constrains are good. This case just proved that. Looking for alternative options, gave really nice results, which I easily could be re-used if you looking for simple deployment solutions.</p>

<!-- More -->


<h2>Heroku</h2>

<p>Heroku is good service. Afraid to be mistaken, but that&rsquo;s probably Heroku who popularized &ldquo;git-powered&rdquo; deployments much, ones there deployment script looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>The rest is all about the service &ndash; prepare runtime, deploy code, start web application etc. Besides of that Heroku open-sourced a lot of good stuff, including so called <a href="https://devcenter.heroku.com/articles/buildpacks">buildpacks</a>, some ready to use scripts that are able to setup the dyno with all required runtime to be able to start application there.</p>

<p>I never seriously used Heroku, though. What I dislike, is pricing. Also, the other people I asked about their satisfaction of using Heroku, was not satisfying much (arguable). We needed more lightweight, easy to change setup.</p>

<h2>Digital Ocean</h2>

<p><a href="https://www.digitalocean.com/?refcode=de56d081b272">Digital Ocean</a> is very fast growing cloud-computing service. It&rsquo;s not PaaS (platform as a service) like Heroku, it&rsquo;s rather IaaS (infrastructure as a service). They are notable for few major things:</p>

<ul>
<li><strong>Pricing</strong> &ndash; really (mean, really!) competitive pricing, 1GB RAM, 30GB SSD machine for 10$.</li>
<li><strong>Easy of use</strong> &ndash; the flow from registration for first droplet creation is smooth and clear.</li>
<li><strong>Regions</strong> &ndash; machines can be fired up for both US and EU, ideal for us.</li>
</ul>


<p>But again, Digital Ocean is nothing more as great infrastructure. Herding the server is all up to you. I personally was really afraid of that perspective of setting up nginx, configuring firewalls, load-balancing etc., that prevented me to look to Digital Ocean closely. Getting used to deployment procedures with Nodejitsu and Heroku, it&rsquo;s real pain to deploy app by FTP again and do everything manually.</p>

<p>But lucky chance I noticed <a href="https://github.com/progrium/dokku">Dokku</a> project and that was something really great, explain why later.</p>

<h2>Dokku &amp; Docker</h2>

<p>So, <a href="https://github.com/progrium/dokku">Dokku</a> is simply amazing hack (or more correctly, combination of diffrent hacks) by <a href="https://github.com/progrium">Jeff Lindsay</a>. Some initial facts:</p>

<ul>
<li>Written in Shell script and currently nearly 100 lines of code</li>
<li>Based on Docker</li>
<li>Provides Heroku-like deployment experience</li>
<li>Community-driven</li>
</ul>


<p>Dokku, can be installed to Ubuntu 13 machine and turn that machine into Heroku-like server. I mean, you can push the code there and Dokku, will fire-up new <em>docker process</em>, deploy code there, start the application, configure nginx and setup environment variables and SSL.</p>

<p>Btw, the time I just looked to Dokku, they missed exactly support of ENV variables and SSL. It was not acceptable for me, without those 2 features. Constraints again, but that gave me ability to contribute the projects and eventually I submitted both features.</p>

<p>Dokku, is very interesting project. First of all, because it based on trendy <a href="http://www.docker.io/">Docker</a>. Docker is &ldquo;Virtual-Machine-Based-Deployment&rdquo; alternative. Deployment on virtual boxes are de-facto standard now and docker is about to change that. Guys from <a href="https://www.dotcloud.com/">dotCloud</a> open-sourced solution that allows to run isolated processes (containers) &ndash; that are like lightweight virtual machines. You can deploy docker on Ubuntu server and then use that as host any kind of applications or databases.</p>

<p>Docker could turn Ubuntu Server to PaaS and Dokku makes great &ldquo;interface&rdquo; for that.</p>

<p>Each Dokku piece is very interesting indeed and I hope to blog more about. And Dokku is using Heroku buildbacks, which makes you feel you deal with Heroku, not with your own setup.</p>

<h2>Putting Things Together</h2>

<p>Digital Ocean and Dokku make a perfect match. As I said above, Digital Ocean is something you can really start quick with. So, what we did is just started up 10$ Ubuntu 13 server and installed Dokku there. In total it took 7 minutes or so. I would not bother you with instructions, cause you find a lot in <a href="https://medium.com/code-adventures/438bce155dcb">internet</a>.. but also, assuming that DO + Dokku is a kind of Apple product, that does not require instructions.</p>

<p>First impression was simply amazing. You have everything under control and fill great with &ldquo;git-powered&rdquo; deployments. So, after successful try that machine became our staging server and I also fired-up another one for production one.</p>

<p>Now, then we developing features and what to show each other or test, you just need to do following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; git push deploy-staging feature:master
</span><span class='line'>Counting objects: 7, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 8 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, 445 bytes | 0 bytes/s, <span class="k">done</span>.
</span><span class='line'>Total 4 <span class="o">(</span>delta 2<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>remote: -----&gt; Building collector ...
</span><span class='line'>remote:        Node.js app detected
</span><span class='line'>remote: -----&gt; Resolving engine versions
</span><span class='line'>remote:        Using Node.js version: 0.10.15
</span><span class='line'>remote:        Using npm version: 1.2.30
</span><span class='line'>remote: -----&gt; Fetching Node.js binaries
</span><span class='line'>remote: -----&gt; Vendoring node into slug
</span><span class='line'>remote: -----&gt; Installing dependencies with npm
</span><span class='line'>remote:        npm WARN package.json likeastore-collector@0.0.2-21 No repository field.
</span><span class='line'>remote:        npm http GET https://registry.npmjs.org/mongojs
</span><span class='line'>remote:        npm http GET https://registry.npmjs.org/underscore
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>remote: <span class="o">=====</span>&gt; Application deployed:
</span><span class='line'>remote:        http://stage-collector.likeastore.com
</span></code></pre></td></tr></table></div></figure>


<p>The time we are ready to release:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; git push deploy-production master
</span><span class='line'>Counting objects: 7, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 8 threads.
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>remote: <span class="o">=====</span>&gt; Application deployed:
</span><span class='line'>remote:        http://collector.likeastore.com
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s fast and it&rsquo;s pretty reliable.</p>

<p>For conclusion, I would say that using both Digial Ocean and Dokku was a clear win for <a href="https://likeastore.com/">Likeastore</a> being released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Week in The Air]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/08/first-week-in-the-air.html"/>
    <updated>2013-08-06T05:40:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/08/first-week-in-the-air</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a week how <a href="https://likeastore.com/">Likeastore</a> application went public. I was amazed with initial reaction and feedback. Right now, we have 730 sign-ups, 844 social networks connected and 117950 likes collected. That mean, we had ~100 signups per day and it&rsquo;s growing.</p>

<p>Here is a little retrospective on the things happened through that seven days.</p>

<!-- More -->


<h2>Few hours after release</h2>

<p>We&rsquo;ve deployed about 6.00 PM at Saturday, sending out a bunch of invitation latters. Right after that, users began to register.</p>

<p>Small script that sends <em>&ldquo;New user registered&rdquo;</em> notification has been rolled out as well, so it was easy to see how things are going. Saturday both me and <a href="https://twitter.com/voronianski">@voronianski</a> were completely tired. No doubt, it has been quite an exhausting journey, we worked hard last 3 weeks at nights and weekends, so I just came home and fall asleep, just checking that application is still running.</p>

<h2>Unpredictable thing</h2>

<p>Next morning, I found a bunch of emails in my box, maybe 40-50 subscribed. Mostly from my &ldquo;nearest&rdquo; network, after notification in twitter and facebook.</p>

<p>But then, something unpredictable happened &ndash; we&rsquo;ve announced in amazing <a href="http://t.co/4DinPVlcdk">Collective #74</a> issue.</p>

<p>That gave us a lot of traffic and sign-ups. Monday and Tuesday, we had a rush hours then every minute new user sign-up. My phone was ringing all the time, and my email box was full of notifications. People were <a href="https://twitter.com/search?q=likeastore&amp;src=typd">tweeting</a> about, we recieved few request for new service connectors as well.</p>

<p>I have to say, I was really pleased with that. We did something noticeable, something that other people liked.</p>

<h2>First problems</h2>

<p>Real user experience shows real application issues. We had few..</p>

<p>First is that our app failed to work in IE. It appeared that our <em>nginx</em> configuration. Since we are using <a href="https://github.com/progrium/dokku">Dokku</a> for deployment, it have to be fixed there. Thanks to Dokku community, the issue has been resolved rather quickly and fix being <a href="https://github.com/progrium/dokku/commit/33a3b85674e92fe883ba3151dee861f53914718a">pushed</a>.</p>

<p>Another thing, that was not possible to see without some <em>real</em> data &ndash; stackoverflow OAuth token is very short living.. So, if you enabled stackoverlow connector, next day it fail to collect the data, since token in not valid any more. Unfortunately, there is no way to workaround this issue automatically, only ask user to re-enable the network.</p>

<p>We had several outages of data collection caused be bugs not noticed on staging. Also, to improve <em>initial collecting velocity</em>, we run 2 instances of collector in parallel. That worked, so just subscribed users are served fast, but it&rsquo;s not ideal yet.</p>

<h2>What&rsquo;s coming?</h2>

<p>The last week was really motivating. We are continue to improve the service and expecting new users to come.</p>

<p>Through the next month we&rsquo;ll be focusing on:</p>

<ul>
<li><strong>Facebook connector</strong> &ndash; the top most requested connector to be implemented.</li>
<li><strong>Likes indexing</strong> &ndash; currenly implemented search is very simple, just to show the idea, what is really needed is to perform the search based in likes content.</li>
<li><strong>UI improvements</strong> &ndash; we are still improving the design of application, to make it attractive and unique.</li>
<li><strong>Performance</strong> &ndash; our core component <a href="https://github.com/likeastore/collector">collector</a> will be deployed on dedicated core 2 machine and re-written to be easily scaled.</li>
<li><strong>CDN</strong> &ndash; currently all static resources are handled by node.js, which is terrible slow, will move all our stuff to Amazon CloudFront.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Likeastore App Goes to Public]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/07/likeastore-app-goes-to-public.html"/>
    <updated>2013-07-28T09:30:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/07/likeastore-app-goes-to-public</id>
    <content type="html"><![CDATA[<p>About 4 month the project <a href="http://beletsky.net/2013/03/likeastore-application-built-on.html">started</a> on hackathon and called <a href="https://likeastore.com/">Likeastore</a>. Yesterday, it&rsquo;s been pushed out to public and I feel really great about that. Started out as quick hack, it eventually became a real product.</p>

<p>Bootstrapping is always hard, despite of the actual product size. Finishing something that other people will see, just doubles the stake &ndash; you could not fail, wish to do best of the best. It&rsquo;s been really breathtaking journey (or I would call it beginning of the path), so if you are interested I&rsquo;ll share some details of product and it&rsquo;s development.</p>

<!--More-->


<p><img src="http://alexanderbeletsky.github.io/images/blog/likeastore-home.png" alt="likeastore" /></p>

<h2>Likeastore in few simple words</h2>

<p>We all connected to a different social systems, like twitter, github or stackoverlow. All of those are constant flow of information and we clasiffy that information by &ldquo;liking&rdquo; them.</p>

<p>The usual problem though, is it&rsquo;s very hard to remember where you saw some information. For instance, I just remember <em>&ldquo;hm..I read great post of configuring nginx for Node.js application..&rdquo;</em>, but totally forget &ndash; was on github readme, twitted blog post or answer on stackoverflow.</p>

<blockquote><p>Likeastore tool that helps you to survive information overload.</p></blockquote>

<p>Likeastore fixes the problem, it stores all information that you might be interested in, by collecting your &ldquo;likes&rdquo; throught a different social applications and allow you to search that information.</p>

<h2>After hackathon time</h2>

<p>We took a second place on hackathon and a lot of people were interested in Likeastore idea. We just wanted to make it right and enhance the code we already had.</p>

<p>Our plan was simple: make everything we had right, improve the UI and found reliable hosting for our product. As this is done, we go for a private mode, sharing application with limited number of users. If everything is good, will release it public. Pretty standard approach for different kinds of SaaS.</p>

<p>At May, 2013 we had our application deployed on <a href="https://www.appfog.com/">AppFog</a> and subscribers been invited.</p>

<h2>Private beta results</h2>

<p>After few hours on production site running, we&rsquo;ve got first users, first real data and even first feedback in twitter.
But what&rsquo;s more important, we&rsquo;ve got a logs full of errors and understanding we are not that far from previous milestone.</p>

<p>Application stopped to work on next day. We&rsquo;ve <a href="http://beletsky.net/2013/07/why-we-moved-from-appfog-to-nodejitsu.html">moved</a> to another PaaS <a href="https://www.nodejitsu.com/">Nodejitsu</a>. A lot of different things happen.</p>

<p>Looking back, I have to say &ndash; <em>it&rsquo;s great we didn&rsquo;t show it to public immediately</em>, cause it would be a bit shameful. Decrypting the logs, gave us better understanding of problems you face collecting big amount of data through different API&rsquo;s. There was obviously huge amount of work to make it better.</p>

<h2>Focusing on quality</h2>

<p>Originally, we&rsquo;ve planned to push more features to public version: facebook and tumlr connectors, full text search and other stuff. But private beta clearly showed &ndash; the <em>focus have to be on quality</em>.</p>

<p>We literally re-wrote the application from scratch, both server side and client. Applied integration tests and unit tests whereever it&rsquo;s possible, also covering main application pathes with zombie.js <a href="http://pixelhunter.me/post/54753803233/end-to-end-testing-with-zombie-js-mocha-js-and">end-to-end</a> tests.</p>

<p>Our <a href="https://github.com/likeastore/app/tree/master/source/api">API</a> became stable and fully tested, our <a href="https://github.com/likeastore/app/tree/master/public/js">client</a> solid rock and very reliable. The trickiest part of application, the <a href="https://github.com/likeastore/collector">collector</a> &ndash; it became smarter, with a scheduler that schedules optimal requests to avoid API rate limits.</p>

<h2>Making the product beautiful</h2>

<p>Beautiful UI/UX for applications like a crucial. And that&rsquo;s why I&rsquo;m happy that <a href="https://twitter.com/voronianski">@voronianski</a> is a part of team.</p>

<p>He did amazing job by visualizing both site and application. Design became very clean, contrast and looks great on numerous of devices, from smart phones to huge desktop monitors.</p>

<p>Following the modern trend of flat design, we&rsquo;ve picked up colors and styles, showing the way we see application, as modern and useful. Just <em>making the things look nicer</em> would be a real further strategy for us.</p>

<h2>Security is concern</h2>

<p>We collect users private data, it was obvioulsy just impossible to give a chance of someone else access it. So, have to secure the application with SSL connection, so all trafic between API and browser is crypted. SSL became a quite hard, first because certificate is rather expensive, second you have to install on server, which I never did before.</p>

<p>The importance of SSL left us with a no-go on <a href="https://www.nodejitsu.com/">Nodejitsu</a>. Nodejitsu policies allows to have SSL connections only on &ldquo;Bussiness Plan&rdquo;, which costs 120USD/month. That was not that money we ready to put on table. We had to have change the way we host application. Basically, it meant &ndash; move out from PaaS to IaaS, and do all the stuff on your own.</p>

<p>I personally felt bad about, since we&rsquo;ve really get used to PaaS. But, we&rsquo;ve found a way around, having place own application on <a href="https://www.digitalocean.com/">Digital Ocean</a> cloud, in conjunction with <a href="https://github.com/progrium/dokku">dokku</a>, which allows us to Heroku-like deployment model. That also gave me the chance to play vagrant/linux/docker more that I could ever image. I contributed <a href="https://github.com/progrium/dokku">dokku</a> some important stuff as SSL and ENV support and that gave ability to use it for production needs.</p>

<h2>Current technology stack</h2>

<p>So, a little bit of geeky info. We running on:</p>

<ul>
<li><a href="https://www.digitalocean.com/">Digital Ocean</a>, 2 droplets one for staging and one for production</li>
<li><a href="http://nginx.org/">Nginx</a> 1.4, ssl, routing and balancing 2 Node.js servers on each droplet</li>
<li><a href="http://nodejs.org/">Node.js</a> 0.8.25 + <a href="http://expressjs.com/">Express.js</a> based API</li>
<li><a href="http://www.mongohq.com/home">MongoHQ</a> deplyment for staging and production database</li>
<li>Each Node.js server runs in <a href="http://www.docker.io/">docker</a> container</li>
<li>Deployments and docker orchestration by <a href="https://github.com/progrium/dokku">dokku</a></li>
<li><a href="http://angularjs.org/">AngularJS</a> driven client</li>
<li>Handcrafted CSS, HTML (no frameworks)</li>
</ul>


<p>Each of these is very interesting and demands dedicated posts. Hope, we do some in future.</p>

<h2>Conclusions</h2>

<p>Just current results: 18 hours after, we have 40 users, 62 network connections, 10861 item collected. That&rsquo;s the motivating stuff, so we feel very positive to carry that on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why We Moved From AppFog to Nodejitsu]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/07/why-we-moved-from-appfog-to-nodejitsu.html"/>
    <updated>2013-07-19T19:36:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/07/why-we-moved-from-appfog-to-nodejitsu</id>
    <content type="html"><![CDATA[<p><a href="http://likeastore.com/">Likeastore</a> started to use <a href="https://www.appfog.com/">AppFog</a> as PaaS during private beta campaign. That was great idea initially since AppFog offers really nice conditions: 8 running instances with 256MB or RAM, custom domain names, support and all relative services. I have to say, it did work fine at the beginning, allowing us to push product forward and show it to our subscribers.</p>

<p>But very fast we realized that AppFog does not suite us at lot.</p>

<!--More-->


<h2>Why to mess up with PaaS?</h2>

<p>If you never tried things like <a href="https://www.heroku.com/">Heroku</a>, <a href="https://www.appfog.com/">AppFog</a>, or <a href="https://appharbor.com/">AppHabor</a> you might have a question, why to pay for something you &ldquo;almost&rdquo; can do your self just by renting VPS.</p>

<p>Renting VPS seems to be nice idea, but the problem is &ndash; you taking to much responsibility to manage the server by your own. You have to have certain skills to configure nginx, git repositories, ssh keys etc. It&rsquo;s possible to do, but it takes a lot time.. time you can spend on code something will be spend to configure something.</p>

<p>Another very important point is deployments. Usually deployments are hard and time consuming, since you have to do them manually. But with PaaS all you have to do to deploy the up is either, <code>git push</code> to some remote repo.. or call a special script like <code>af push app</code>, to do all the magic.</p>

<p>For small companies and side-projects PaaS is a really good opportunity to actually ship something, instead of fail to customize the web server.</p>

<h2>Why AppFog?</h2>

<p>I&rsquo;ve heard about AppFog before from twitter and hacker news. It looked very attractive.</p>

<p>But it was not the only one on the market. So, really competitive feature for me was: 8 running instances, for 20 USD. Very good price. We need 4 at that time, so AppFog was very good choice.</p>

<p>But as always, with time you start to see some negative moments. Something that lead us to finally drop AppFog. I would like to quickly go through good and less good things.</p>

<h2>Dashboard and UI</h2>

<p>AppFog dashboard is quite nicely designed. But sometimes I felt difficulties to just find the things.</p>

<p>I was not happy with performance of dashboard as well. It was really slow for me usually, so you click to check instance state and wait for 30 seconds while the page opens. You can leave with that, but the time comes than you start to hate it.</p>

<h2>AppFog CLI</h2>

<p>To create / run / stop applications on AppFog, you get a special command line utility, called <code>af</code>. It&rsquo;s typically for all PaaS to have some CLI to communicate to it. It&rsquo;s easy to install and configure, everything is nice.</p>

<p>It&rsquo;s written on Ruby, so you won&rsquo;t have any problems on Mac, but Ruby have to installed on Windows machine.</p>

<p>Once it&rsquo;s installed you have to login to you AppFog account and start to deploy.</p>

<h2>Deployment experience</h2>

<p>Even if CLI itself was quite nicely done, deployment experience was not so nice &ndash; it was too slow.</p>

<p>Node.js is deployment-friendly platform. No build steps, no linking, no packaging &ndash; nothing. All you have to do, is to push the sources to remote machine. Sure, PaaS is doing a lot magic behind the scences, like firing new virtual machines and configuring network interfaces etc.</p>

<p>And all that magic for AppFog works too long.</p>

<p>Deployment could took up to 40 seconds, which is fine if you do it once in week. But it bothers you a lot while you do that once in hour.</p>

<h2>Release management</h2>

<p>If your plan is continuous delivery and frequent deployments, you have to be ready for frequent rollbacks as well. Without that feature, you are in trouble.</p>

<p>AppFog does not afford anything like that. Correctly say, you have to do it manually, like tagging sources, then fetching by tag and push again.</p>

<p>That&rsquo;s not big issue, I would say. Nevertheless, developers are too optimistic thinking that everything works great (and indeed in always works fine, on my machine), but the time you see issues on production you just panic and loosing control of what to do.</p>

<h2>Support</h2>

<p>Even if you running tiny bussiness and no one hurt if your application is down, still you expect that you&rsquo;ll get help if you are in trouble. That&rsquo;s the whole idea of support, especially if you pay money for it.</p>

<p>AppFog support is not good. Few times my tickets were unanswered for 2 days. Then they answered I found the reason or was able to fix it by myself.</p>

<p>This is just makes very bad impression of service. You start to think, it&rsquo;s not so reliable, so the time you&rsquo;ll be really screwed, they won&rsquo;t come help.</p>

<h2>Load balancing and cookies</h2>

<p>So, all mentioned above is something that we would prioritize as &ldquo;cosmetic&rdquo; issues. A bit ugly, but you can leave with it. The real and unexpected problem appeared as we did first announcement and users came to check the application.</p>

<p>We are using <a href="">passport</a> for user authorization, which depends on sessions. Each request contains contains a <code>session_state</code> which being persisted in cookie. The problem was that, on AppFog for some unknown dropped that <code>session_state</code>. So, after user just logged on and clicked somewhere, she was immediately redirected back to login page, as unauthorized.</p>

<p>Absolutely unclear behavior to me.</p>

<p>I definitely know I&rsquo;m not the <a href="https://www.google.com/search?q=appfog+session+lost&amp;oq=appfog+session+lost">only one</a> who was suffering that issue. Supported failed to answer quickly and even on my next request they didn&rsquo;t provide anything constructive.</p>

<p>That was the show-stopper with AppFog.</p>

<h2>.. and now Nodejitsu?</h2>

<p>Meanwhile, I just deployed application to <a href="">Nodejtsu</a> and it worked fine there. I was really happy to see the features I missed with AppFog:</p>

<ul>
<li>Clear and fast dashboard</li>
<li>Release management (you can go back and forth with any version you deployed)</li>
<li>Node.js written CLI and fast deployments</li>
<li>Good support</li>
</ul>


<p>The time we joined Nodejitsu it costs 33 USD for 3 instances, that didn&rsquo;t match our needs ideally, but we had to embrace the constraints.</p>

<h2>Conclusions</h2>

<p>I know, there is nothing ideal in this world &ndash; but if you have choice, it&rsquo;s fine pick up best (or at least better). I would not say AppFog completely sucks, but it didn&rsquo;t work for me as I was expecting.</p>

<p>PS. While writing this post I&rsquo;ve noticed that AppFog being <a href="https://www.appfog.com/savvis/">acquired</a> by CentruLink. I only wish that it would positively affect service and support, so wish good luck for AppFog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think Ahead, Think Logging]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/07/think-ahead-think-logging.html"/>
    <updated>2013-07-04T09:02:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/07/think-ahead-think-logging</id>
    <content type="html"><![CDATA[<p>When we develop application, we have everything to understand applications behavior. Debugger, traces, tests &ndash; all information just in hands. If something goes wrong, it&rsquo;s not so hard to track the problem.</p>

<p>Situation is completely different then app leaves development box and goes to production. In best case, we&rsquo;ll receive email or tweet from user, but typically problem remains on production <em>silently</em>, while customers just <em>silently</em> leave.</p>

<p>Prepare application to production, means prepare good error logging. I&rsquo;m going to show how to extend your Express.js with proper logs.</p>

<!-- More -->


<h2>What it means to have good logs?</h2>

<p>In my perspective good logs are ones satisfying following criterias:</p>

<ul>
<li>All unhandled errors are logged</li>
<li>Log records are comprehensive and clear</li>
<li>Logs are easily accessible</li>
<li>If critical error logged, developers have to be notified</li>
</ul>


<h2>Logger</h2>

<p>Logger is object responsible to take some message or object and log it. The example of one,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;colors&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">colorsMap</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;success&#39;</span><span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;warning&#39;</span><span class="o">:</span> <span class="s1">&#39;yellow&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;err&#39;</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;info&#39;</span><span class="o">:</span> <span class="s1">&#39;grey&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;success&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">warning</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;warning&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;err&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">info</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">record</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">timestamptMessage</span><span class="p">(</span><span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;%s: %s&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(),</span> <span class="k">this</span><span class="p">.</span><span class="nx">formatMessage</span><span class="p">(</span><span class="nx">message</span><span class="p">)));</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">record</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">colorsMap</span><span class="p">[</span><span class="nx">type</span><span class="p">]]);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">formatMessage</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">typeof</span> <span class="nx">message</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">?</span> <span class="nx">message</span> <span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">timestamptMessage</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">util</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;[%s] %s&#39;</span><span class="p">,</span> <span class="nx">moment</span><span class="p">(),</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">logger</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Logger</code> could be used everywhere you need to get some info. But our ultimate goal is to be aware of all errors might appear in application.</p>

<h2>Augmenting Express.js application with logs</h2>

<p>We never know then error might appear. But, we can catch all unhandled errors + if some web request failed to complete with success code, we have to log that as well.</p>

<h3>Handling &ldquo;unhandled&rdquo; errors</h3>

<p>We can listen to process &lsquo;uncaughtException&rsquo; event. It just placed in <code>app.js</code> file. The best place is just after require section and before any object is used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;uncaughtException&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">logger</span><span class="p">.</span><span class="nx">error</span><span class="p">({</span><span class="nx">msg</span><span class="o">:</span><span class="s1">&#39;Uncaught exception&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stack</span><span class="o">:</span><span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>From official docs,</p>

<blockquote><p>Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) will not occur.</p></blockquote>

<p>So, we just redirecting that error to logger. Also, docs say following:</p>

<blockquote><p>Don&rsquo;t use it, use <a href="http://nodejs.org/api/domain.html">domains</a> instead. If you do use it, restart your application after every unhandled exception!</p></blockquote>

<p>I still not switched to domain version for that, need to consider that advice.</p>

<p>Anyway, this <code>uncaughtException</code> will give us only information typically about <code>undefined</code> variables used, that&rsquo;s pretty simple to caught during development testing. More interesting stuff is what&rsquo;s actually happening on runtime, while application handling HTTP requests.</p>

<h3>Logging failing HTTP requests</h3>

<p>Express.js power feature is <em>middleware</em>. It&rsquo;s possible to do a lot of cool stuff based on middleware functions. We&rsquo;ll utilize that feature to create a few middleware function that would allow to log all failed HTTP requests.</p>

<p>First one,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// have to be injected as last middlware function for all routes</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">logErrors</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="nx">logErrors</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">unhandledError</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second one,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">logHttpErrors</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="nx">logHttpErrors</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">url</span><span class="o">:</span> <span class="nx">res</span><span class="p">.</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">headers</span><span class="o">:</span> <span class="nx">res</span><span class="p">.</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">status</span><span class="o">:</span> <span class="nx">status</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">body</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">params</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">unhandledError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">message</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">unhandledError</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">warning</span><span class="p">(</span><span class="nx">status</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">logger</span><span class="p">.</span><span class="nx">warning</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">(</span><span class="nx">status</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">logger</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">end</span><span class="p">.</span><span class="nx">call</span> <span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">warning</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">400</span> <span class="o">&amp;&amp;</span> <span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">error</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look a bit closer: <code>logError()</code> produces middleware function that expected to be the last in chain, and if previous function retured an error, it stores that error object in in requests. <code>logHttpErrors()</code> produces middleware function that would override response <code>.end()</code> function and logs warning or error, depending on response status code.</p>

<p>Let&rsquo;s integrate to app.</p>

<p><code>logHttpErrors()</code> could be put into <code>app.configure()</code> function,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VCAP_APP_PORT</span> <span class="o">||</span> <span class="mi">3001</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">logHttpErrors</span><span class="p">());</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a bit more trickier with <code>logError()</code> function. As I said above, it have to be <strong>last</strong> callback in chain.</p>

<p>So, it&rsquo;s only possible to apply it in <code>app.configure()</code> since the routes are not defined yet. Even it&rsquo;s possible to manually add it to each endpoint manually, I don&rsquo;t think it&rsquo;s good idea, because it&rsquo;s easy to forgot do that.</p>

<p>I came up to following solution,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./source/api&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./source/router&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// here .logError() will be added to end of chain</span>
</span><span class='line'><span class="nx">applyErrorLogging</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;Likeastore app listening on port &#39;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">env</span> <span class="o">+</span> <span class="s1">&#39; mongo: &#39;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">connection</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>applyErrorLogging()</code> function,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">middleware</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../middleware&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">applyErrorLogging</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">verb</span> <span class="k">in</span> <span class="nx">app</span><span class="p">.</span><span class="nx">routes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">verb</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">routes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">patchRoute</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">patchRoute</span> <span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">route</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">logErrors</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">applyErrorLogging</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, it&rsquo;s everything in place, so all <code>4xx</code> are logged as warnings, all <code>5xx</code> are logged as errors.</p>

<h2>Move your logs to cloud</h2>

<p>Simply logging information is not enough. While your application writes info to console on production machine, this information worthless to you. You have to put you logs to the place where is easily accessible.</p>

<p>There are few services like that. One of I recently hooked with in <a href="https://logentries.com/">Logentries</a>.</p>

<p>Logentries gives you API to submit information there + Dashboard, there logs can be viewed, search and analyzed.</p>

<p><img src="http://alexanderbeletsky.github.io/images/blog/logentries-screen.png" alt="logentries dashboard" /></p>

<p>Install <code>node-logentries</code> client,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install node-logentries --save
</span></code></pre></td></tr></table></div></figure>


<p>And now, we need to update logger, to not only <code>console.log</code> but send it to Logentries.</p>

<p>Will create Logentries client,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">logentries</span><span class="p">.</span><span class="nx">logger</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">token</span><span class="o">:</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">LOGENTRIES_TOKEN</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">log</span><span class="p">.</span><span class="nx">level</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will extend existing logger and override current <code>.log()</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">logentriesLogger</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_super</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">_super</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">_super</span><span class="p">),</span> <span class="nx">child</span><span class="p">);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">logger</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">logentriesLogger</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checkout this <a href="https://gist.github.com/alexanderbeletsky/5921464">gist</a> where you can see all things put together.</p>

<p>So, now wherever <code>logger</code> is used, logs will both shown to screen (which is cool for development) and submitted to Logentries (which is cool for production).</p>

<h2>Setup notification on critical errors</h2>

<p>If error appeared on production, developers attention should be there. Without good notification system, is too easy to skip the moment then error arises.</p>

<p>Again, it&rsquo;s easy to do with Logentries. Just go to <code>Alerts</code> section and setup patterns of errors you interested and email addresses for notifications.</p>

<p><img src="http://alexanderbeletsky.github.io/images/blog/logentries-alerts.png" alt="logentries alerts setup" /></p>

<p>Email is not only one option, you can setup for SMS or webhook for your app. So, anytime error or warning appeared you will be notified and take action on it.</p>

<h2>Conclusions</h2>

<p>I&rsquo;ve used that for <a href="http://likeastore.com">likeastore</a> app I currently working on and it works just fine. Having such logs gave a lot of information after we went to private-beta phase. When you see how application behaves then real users start to use, it gives you good insights about fixes and improvements to apply.</p>

<p>Taking into account that approach above is very universal and easy to adopt, to it today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Were Wrong 10 Years Ago]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/06/we-were-wrong-10-years-ago.html"/>
    <updated>2013-06-20T23:43:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/06/we-were-wrong-10-years-ago</id>
    <content type="html"><![CDATA[<p>The way we build distributed systems and platforms is changing through the the last 10 years. Recently, I was thinking myself about different technological options I used so far and came for some conclusions.</p>

<p>Early 2000&rsquo;s I was programming C/C++ and the best way of passing some data from one machine to another, was &ndash; <em>socket</em>. The time took understanding of sockets, I clearly saw it&rsquo;s the best solution for that task.</p>

<!-- more -->


<p>Sending and receiving strings and binary structures was very nice comparing to using C or assembler to directly talk to network driver. Sockets allowed to build server-client architectures, in theory allowing application written in different languages to communicate each other.</p>

<p>But time passed and COM / DCOM technologies appeared. Data transport operations was completely hidden, a lot of abstraction put above objects and marshaling. Again, that technology was massively adopted by developers, many projects were created based on COM / DCOM (or similar technology called CORBA).</p>

<p>Marshaling, IDL, ATL and other stuff was very difficult to understand and to use. But still there was much better than implement something similar on raw sockets.</p>

<p>Era of Web Services has begun. Web Services indeed allowed build highly distributed systems based on reliable HTTP protocol. Data transport mechanisms appeared to be transparent and very clear. Data transfered back and forth as XML payloads. Almost all web service technologies were build in concept on <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a>.</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> was primary payload format, formalized XML with metadata inside. Again, previous DCOM / COBRA things looked very ugly, Web services looked very promising.</p>

<p>Web Services, definitely affected the way we architecture distributed systems now. It formalized a lot, <code>WS-*</code> set of standards came out. Many vendors like Microsoft or Sun created bunch of frameworks to support it. Many books, many blog posts and speaks issued on that topic.</p>

<p>Nowadays, <code>RPC-based</code> services completely substituted with <code>REST-style</code>. XML as payload, seems to be awful, cause its verbose, requires more bandwidth comparing to <code>JSON</code>. <code>JSON</code> in conjunction with dynamic languages gives great framework of building distributed systems. We are currently in era of <em>API oriented</em> systems and as soon as you adopted that, SOAP and RPC makes no sense to you.</p>

<p>What I&rsquo;m telling is, technologies are improving very fast. What was great today, will appear awful tomorrow.</p>

<p>We were wrong 10 years ago that some particular technology is cool. So now, than I see some new and shinny thing I&rsquo;m no longer blindly excited about that. It will gone&hellip; and substituted with something better.</p>

<p>Developers ultimate goal remains to <em>influence</em> that process. And make influence is easy &ndash; share your thoughts, implement prototypes, talk to people.</p>

<p>Make things simpler, make things better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved from Blogger to Octopress]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/06/moved-from-blogger-to-octopress.html"/>
    <updated>2013-06-15T16:18:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/06/moved-from-blogger-to-octopress</id>
    <content type="html"><![CDATA[<p>I actively started to blog almost 3 years ago. Before that, far away 2008 I created blogger account and had few posts there about TDD and ASP.NET development. So, after some pause I just picked up existing one and jumped in in blogging community.</p>

<p>That time, blogger was quite obvious choice. Google powered, editor and plain HTML support, templates etc. I used to use Visual Studio to create posts, then pasted that to blogger, posting images on Picassa and code on Github. That worked for quite while, but now I consider that is very heavyweight approach.</p>

<p>Now this site is running <a href="http://octopress.org/">Octopress</a> and hosted on <a href="https://github.com/">Github</a> and that&rsquo;s totally reflects my current tools of choice.</p>

<!-- more -->


<h2>Reasons to move</h2>

<p>My primary concern was up to blog design. The time I started to blog I had almost zero skill to HTML/CSS, so picking up some existing theme was best option. In 2010 <a href="http://beletsky.net">beletsky.net</a> looked pretty fine for me. But time has passed, my vision of design has changed, requirements for blog UI has changed (consider mobile devices), the way I blog has changed.</p>

<p>I tried to tweak blogger theme and tried to create new one, but that appeared a <em>bloody</em> mess.</p>

<p>Besides the design, the recent Google actions like closing up Picassa, Reader &ndash; are quite obvious signs that Blogger days are counted. They would probably try to integrate it to Google+ services and I&rsquo;m literally sick of Google+.</p>

<p>Finally, with much of Github influence, I <a href="http://alexanderbeletsky.github.io/2013/05/github-as-blogging-platform.html">realized</a> Markdown is awesome, blogging in plain HTML sucks hard. I wanted to have nice and easy platform for handling my blog and personal page.. I wanted to blog like <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">hackers</a> do.</p>

<h2>How to move, easy way</h2>

<p>I was really <em>afraid</em> of difficulties related to moving to other platform, that&rsquo;s why I procrastinated that so long.</p>

<p>That lead to the point then I wanted to blog about something, but running up VS, starting HTML coding and uploading images somewhere simply prevented me to do that. Blogging should be as easy as writing to notepad, in that way you will do that with pleasure.</p>

<p>But, I was really surprised how <strong>simple</strong> it actually was. I found that small and precise blog <a href="http://blog.thepete.net/blog/2012/02/08/blogger-to-octopress/">post</a> by <a href="http://twitter.com/ph1">Pete Hodgson</a>. After reading some docs on <a href="http://octopress.org/">Octopress</a> site I had running setup in 10 minutes or so. That was great start.</p>

<p>But I didn&rsquo;t want to have default theme of Octopress, I didn&rsquo;t want to pick up <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd parties</a> as well. My goal was to create something original.</p>

<h2>Custom theme for Octopress</h2>

<p>I&rsquo;ve picked up just released <a href="http://purecss.io/">Pure CSS</a> framework, since I <em>promised</em> myself never ever create my custom grids and layouts, since it works really bad. I basically use only grid system from there.</p>

<p>I wanted to have something clean, minimal, black &amp; white theme. My inspiration was primarily from <a href="http://zachholman.com/">zachholman.com</a>, <a href="http://blog.brunoscopelliti.com/">blog.brunoscopelliti.com</a>, <a href="http://carmo.org.uk/">carmo.org.uk</a>.</p>

<p>So, I spent maybe 2-3 hours to sketch new blog look.</p>

<p><img src="http://alexanderbeletsky.github.io/images/blog/design-blog-sketch.png" title="[beletsky.net design sketch [design sketch]]" ></p>

<p>I showed that to colleagues and received some valuable feedback from <a href="http://twitter.com/voronianski">@voronianski</a> regarding fonts and styles. Sketch looked amazingly good on Mac retina, with custom fonts (Open Sans, Lato). It has anti-aliasing issues on Windows, though.</p>

<p>Turning resulted HTML / CSS into Octopress was <strong>not</strong> so easy.</p>

<p>I&rsquo;ve spent up to 16 hours to make it work nicely. There was a lot of CSS style conflicts between existing SASS and my custom one. So, I had to disable almost everything and use my custom <code>style.css</code>. But still, that was worth effort if you compare with previous look,</p>

<p><img src="http://alexanderbeletsky.github.io/images/blog/old-beletsky-net.png" title="[beletsky.net old look [old look]]" ></p>

<p>Since I had some heavily read posts, I need to make sure that old google indexed URL&rsquo;s would work. Fourtunatelly, that was really easy to configure. In <code>_config.yml</code>, just paste:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>permalink: /:year/:month/:title.html</span></code></pre></td></tr></table></div></figure>


<p>That would give <strong>exactly</strong> the same URL as blogger have. Even if I hate that <code>.html</code> extension, nothing I can do now.</p>

<p>I&rsquo;ve turned <a href="http://beletsky.net">beletsky.net</a> a bit more toward personal page, not only blog. There are about me, talks and projects page, that would demonstrate the profile more clearly I hope.</p>

<p>And I dropped comments. I don&rsquo;t receive many and if you want to get in touch, twitter and github are better alternatives.</p>

<h2>Hosting and domain names</h2>

<p>Another problem was to get my custom domain back from Google. I&rsquo;ve bought it tougher with Google Apps, which I never actively use, except creating some email boxes to workaround some XBox Live stupidity.</p>

<p>I was mad about I&rsquo;m not able to control DNS configuration of my own domain name. <code>Whois</code> showed that <code>beletsky.net</code> is actually registered by <a href="http://www.enom.com/">enom</a> registrar. So, I dropped a line there and with my great surprise that replied quite fast. We agreed, I move the domain name to another registar that I use for other stuff I own.</p>

<p>That took a lot of time (more than 10 days) and even now DNS configuration is not yet broadcasted.</p>

<p>Nevertheless, hosting Octopress blog on Github is best option. And Octopress has build in <code>rake</code> tasks for that.</p>

<h2>Happy blogging time</h2>

<p>So, the experience is different now. No more HTML, only clean and nice Markdown.</p>

<p>I do everything in <a href="">Sublime Text 2</a> (wring post in <em>distraction free</em> mode is great) that has good syntax highlighting for Markdown and spell checker, from the box.</p>

<p>Octopress running preview mode, so with each save of file you can check out the results on locally run web server. No more uploads of images to Google+, simple placing on file system.</p>

<p>Nice integration with <code>gist</code> so I hope to do more code shares there. Code coloring is very nice, but I hope to customize that in future as well.</p>

<p>New UI makes my eyes happy and this is big motivator to produce more content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github as blogging platform]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/05/github-as-blogging-platform.html"/>
    <updated>2013-05-16T18:55:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/05/github-as-blogging-platform</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        No, I&#8217;m not going to talk about creation some <a href="https://github.com/alexanderbeletsky/wonka">github-backed</a> blogging system. I would like to talk on some blogging style I tried to apply recently.<br />
    </p>    <p>        The problem is, technical blogging is difficult. I usually have a lot of ideas or know-how&#8217;s while I create some code. It&#8217;s just hard to blog about. As you didn&#8217;t do the blog post during coding, you might forget some details or simply loose the encouragement to blog about it.<br />
    <!-- more -->
    </p>    <p>        As I mentioned in my <a href="http://www.beletsky.net/2013/04/building-single-page-applications-with.html">previous</a> post I recently created some code that contains Backbone.js + Express.js boilerplate code that could be great start for building single page applications. I felt I need to document it somehow, so even myself will remember what&#8217;s going on there. So, I put some <a href="https://github.com/alexanderbeletsky/backbone-express-spa/blob/master/README.md">README</a> file there. Usually, I don&#8217;t write much documentation, but during writing it I realized that it&#8217;s a kind of blog post or tutorial I&#8217;m writing immediately after I created something.<br />
    </p>    <p>        I liked the way how it went. First of all, Markdown is great for technical blogging. I still use HTML and feel a but ashamed by that fact. It&#8217;s so easy to format and place code examples inside with Markdown (and it looks minimalistic and great on github). Second, the content of resulted readme file, pleased me much.. I felt it&#8217;s the same as blogging, but a bit.. more interesting, or so? So, I twitted about and great surprise for me, repository got 200 stars and 20 forks, got <a href="http://javascriptweekly.com/archive/128.html">mention</a> on <a href="http://javascriptweekly.com/">JavaScript Weekly</a> and raised some <a href="https://github.com/alexanderbeletsky/backbone-express-spa/issues">questions</a>. <br />
    </p>    <p>        The same as blogging, but instead post you have repo with README + some valuable code. Instead comments, you got issues and pull requests.<br />
    </p>    <p>        That was really motivating experience. I think I would like to repeat it from time to time.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Single Pages Applications]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/building-single-pages-applications.html"/>
    <updated>2013-04-29T20:26:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/building-single-pages-applications</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        This is transcript of talk I gave on <a href="http://www.msswit.in.ua/">#msswit</a> conference 25 April 2013.<br />
    </p>
    <h2>        What is SPA?<br />
    </h2>    <p>        If you just imagined the pools and saunas and massage rooms, this is, unfortunately, not the thing that I going to talk about. We&#8217;ll check out new concept of web applications, that are called - Single Page Applications.<br />
    </p>    <p>        From technical perspective SPA means the web application, that being loaded as one HTML page and redraws it&#8217;s UI without round trip to server. That sounds not so exiting, but we can see that SPA is much more than that.<br />
    <!-- more -->
 <script async class="speakerdeck-embed" data-id="2e8c91508fbe0130b23722000a1c4609" data-ratio="1.77777777777778" src="http://alexanderbeletsky.github.io//speakerdeck.com/assets/embed.js"></script><br />
    </p>    <p>        GMail is canonical example of single page application. It was not the first single page application though, it became very popular and gathered a lot of users. That was probably the first time the masses of people realized new user experience - application that works in browser, behaves similar to application on desktop. So, SPA opened a of new opportunities and abilities for software developers to release and promote their applications in web, which is in common case a much easier task, comparing to desktop applications. And new approach need to be taken to create such applications.<br />
    </p>    <h2>        API oriented architecture<br />
    </h2>    <p>        Before we jump into SPA details, let&#8217;s talk about the architecture that would allow to build apps in that way. Popularized by <a href="http://twitter.com/">Twitter</a> it&#8217;s being adopted by many vendors and became kind of default. We are talking about &#8216;API oriented&#8217; architecture.<br />
    </p>    <p>        Basically, it&#8217;s just a deviation of classical &#8216;Server-client&#8217;, where we have server that provides an open API.. and where client is browser, powered by JavaScript engine.<br />
    </p>    <p>        It&#8217;s quite typically that server and client are communicating through HTTP, using JSON as payload format and relying on REST principles. I&#8217;m saying <i>typically</i>, since it&#8217;s not always the case. Some apps might takes XML and use RPC instead of REST, but that actually doesn&#8217;t really matter.<br />
    </p>    <p>        Client is browser, that runs JavaScript code. JavaScript code is requesting the data and updating the DOM. Few years ago, jQuery was the primary tool of making such applications. Nowadays, we see MV* JavaScript frameworks are gaining a lot of traction and simplifying front-end development. It&#8217;s not only about simplification, but also bringing the architecture principles on front-end, something that we haven&#8217;t seen earlier.<br />
    </p>    <h2>How to build Single Page applications?</h2>    <p>        We have a bunch of technologies, server and client that would allow to do that. ASP.NET MVC, Web API, NancyFX, ServiceStack, Express.js, RoR.. etc, on server and Backbone.js, Knockout.js, Angular.js, Marrionette.js, Durandal.js etc. from client.<br />
    </p>    <p>        It gives a lot of options, actually. All of them have their pro/cons. I&#8217;ve used to use ASP.NET MVC as platform to build open API&#8217;s and was quite happy with that. Nowadays, I&#8217;m using Node.js / Express.js and it works really great, as well.<br />
    </p>    <p>        The truth is, with SPA, the front-end technology plays a bit more significant role. Of course, server still performs important role for authorization, data access, business logic.. but in API oriented architecture is turns to be a kind of CRUD exposed through HTTP.<br />
    </p>    <p>        As for front-end, my experience lies in Backbone.js. Preventing the questions, I would say - Backbone.js is not perfect (as there are nothing perfect in this world). Bare Backbone.js app would require a lot of manual coding, but it would also allows to see some important implementation details that could be good for general SPA understanding.<br />
    </p>    <h2>Server architecture</h2>    <p>        Server is responsible for two principal things. First, it provides with API. Second, it server the master page (again, it&#8217;s not always the case, master.html could be places in some static resource server).<br />
    </p>    <p>        Master page, is the one that being rendered in browser should bring basic DOM structure + reference the JavaScript code to initialize and run application. That&#8217;s it.<br />
    </p>    <p>        As always, it&#8217;s important to think about scalability. Doesn&#8217;t matter what technology you pick up, it&#8217;s able to scale and hanlde more incoming request with given response time is vital.<br />
    </p>    <h2>Client architecture</h2>    <p>        Scalability is important here, as well. That&#8217;s a different scalability, though.<br />
    </p>    <p>        I liked the way <a href="https://twitter.com/derickbailey">Derick Bailey</a> stated in one of <a href="http://javascriptjabber.com/056-jsj-marionette-js-with-derick-bailey/">JavaScript Jabber</a> show:<br />
    </p>    <blockquote>        &#8230; scalability in this case is not the number of users running the code at any given time. It’s the number of features in the system, how those features interact, and how you can start up and shut down and do all these things with these different features so that your application can grow in size, grow in features, and grow in capabilities.<br />
    </blockquote>    <p>        That&#8217;s were there the JavaScript pattern, MV* frameworks are shine. And without simple modularity, it&#8217;s very hard to build scalable JavaScript applications.<br />
    </p>    <h2>Require.js and AMD</h2>    <p>        Modularity is important. Each module represents some small piece of application functionality. The problem that JavaScript (ES5, to be precise) doesn&#8217;t have modules as part of language.<br />
    </p>    <p>        Require.js helps to solve the problem. Instead of referencing hundreds of JavaScript files which expose itself to global namespace, Require.js relies on, so called, Asynchronous Module Definition. The special rules which you code have to follow, to be able to act as module and being loaded by request.<br />
    </p>    <p>        Besides of that, Require.js comes with building/optimization tools, that helps to prepare application to production.<br />
    </p>    <p>        So, the Master html has a reference to Require.js main file, which will be responsible for configuration and initialization of app. This typically includes setup of view state management (ViewManager) and routing (Backbone.Router).<br />
    </p>    <h2>Routing</h2>    <p>        Router, handles in-browser URL change events and notifies about that changes. <br />
    </p>    <p>        The URL change might appear of 2 things: user clicks some href or submits the form with re-direct. The SPA prevents those things. Instead, all <code>href</code> click are overloaded, so instead of performing GET request on given URL, JavaScript code would let router know that URL is changing. Router receives the message and using some route rules, call corresponding handler.<br />
    </p>    <p>        The handler job is to load the application and execute it.<br />
    </p>    <h2>Applications</h2>    <p>        Applications in terms of code, are simple objects with <code>run</code> (or <code>execute</code>) function.<br />
    </p>    <p>        The responsibility of application is to fetch all required data and intitialize application Main View. The Main view is then passed to a ViewManager, which is responsible to render it and attach to DOM.<br />
    </p>    <p>        Besides of that, application is also &#8216;logical&#8217; group of different modules with one goal. Imagine GMail application again - Contacts, Mails, Tasks are different applications. Each application, could have sub applications (with their own data and views).<br />
    </p>    <p>        The rule of thumb, one route one application.<br />
    </p>    <h2>        View Manager<br />
    </h2>    <p>        As it&#8217;s been mentioned about, View Manager is important part of SPA architecture.<br />
    </p>    <p>        It handles the aspects of switching one application (MainView) to another. So, the content of application div is cleared up and than updated with new one. In Backbone.js application, that is particularly important, since besides the DOM update View Manager is responsible to clear up unsubscribe all events that views might be subscribed to, to prevent, so called <a href="http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/">Zombie View</a> problem.<br />
    </p>    <h2>Main View and Subviews</h2>    <p>        Not trivial application could contain some complex UI. All complex UI is being divided on many smaller components.<br />
    </p>    <p>        MainView is responsible for whole application UI. It&#8217;s typical job to instantiate and render all required subviews. It also stores the references for all subviews into some internal data structure, so it&#8217;s been able to close all them, while main view is closed.<br />
    </p>    <h2>TheMailer - demo application</h2>    <p>        Here is <a href="https://github.com/alexanderbeletsky/themailer">TheMailer</a> - very simple application that implements all the ideas above. I&#8217;ve created that very quickly and I could not call it completed. At the backend it runs ASP.NET MVC/WebAPI and using Require.js + Backbone.js at front end.<br />
    </p>    <p>        It allows you to view and compose email, as well as some simple management of tasks and contacts. <br />
    </p>    <p>        Under the debugger, it is clear how the application is initialized and starting up, how MainView creates Subviews and how Routing and ViewManager works.<br />
    </p>    <h2>Conclusions</h2>    <p>        I would call it SPA bare bones. As I mentioned above, using pure Backbone.js is good, since Backbone.js contains all required components which any SPA need (most important it have Backbone.Router).<br />
    </p>    <p>        But I would recommended to check further. If you plan stick to Backbone.js, <a href="http://marionettejs.com/">Backbone.Marionette</a> by <a href="https://twitter.com/derickbailey">Derick Beiley</a> could be really nice option. For Google technologies fans, <a href="http://angularjs.org/">Angular.JS</a> makes a lot of sense. For ones that liked <a href="http://caliburnmicro.codeplex.com/">Caliburn.Micro</a> during WPF programming, could play with new framework <a href="http://durandaljs.com/">Durandal.js</a> by <a href="https://twitter.com/eisenbergeffect">Rob Eisenberg</a>.<br />
    </p>    <p>        SPA is a lot of fun and adventure, welcome in!<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Single Page Applications with Backbone.js and Express.js]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with.html"/>
    <updated>2013-04-24T06:11:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>This Saturday I was doing my first Backbone.js class. It went really fine, except one fact.<br />
</p><p>I wanted to show the aspects of creating Single Pages Application running on Backbone. Started the application from scratch, we had to spend a lot of time writing some infrastructure code before we even jump to Backbone. So, after the class I decided to create some boilerplate project, so next time we would just clone it from github and start to work.<br />
<!-- more -->
</p><p>That&#8217;s how the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> born.<br />
</p><h2>Backbone.js + Express.js SPA boilerplate</h2><p>The project is a <a href="http://expressjs.com/">Express.js</a> application using <a href="http://backbonejs.org/">Backbone.js</a> as front-end framework. The idea is you just simply clone it, remove non needed routes and application and build something on your own.<br />
</p><p>I won&#8217;t put to much details in a blog post, since <a href="https://github.com/alexanderbeletsky/backbone-express-spa">repo</a> neat readme section. Just several facts:<br />
</p><ul><li><strong>Minimal and simple</strong> - pure Backbone code, no plugins. For some real needs plugins are required anyway and you are free to include whatever you want.</li>
<li><strong>AMD modules with RequireJS</strong> - modularity is key factor for large-scale apps, <a href="http://requirejs.org/">RequireJS</a></li>
<li><strong>Concept of Application</strong> - to group all view, models, collection related to one application unit in one place.</li>
<li><strong>Handlebars template</strong> - using <a href="http://handlebarsjs.com/">Handlebars</a> as template engine.</li>
</ul><h2>Further work</h2><p>It&#8217;s not yet completely done. I want to create more meaningful app, show some layouts principles + prepare readme section of building application for production.<br />
</p><p>I&#8217;m also thinking of putting some examples of unit tests both for Express.js and Backbone.js.<br />
</p><h2>Conclusions</h2><p>Check the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> out. If you like it, please give some stars or shout in twitter. I would be really happy to see some pull requests for improving applications or infrastructure. So, if you want to join - you are welcome!<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Developer in JavaScript World]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/net-developer-in-javascript-world.html"/>
    <updated>2013-04-14T14:35:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/net-developer-in-javascript-world</id>
    <content type="html"><![CDATA[<div class='post'>
        <p>This is a subscript of lighting talk I did on <a href="http://www.odessajs.org.ua/">#odessajs</a> conference that took place 13 April in Odessa.<br />
</p><h2>The story</h2><p>Thinking about the things going on inside and around me I realized - I don&#8217;t do .NET development more than 1.5 years for now. It&#8217;s not the <a href="http://www.beletsky.net/2012/07/three-month-without-net-code.html">first time</a> I was thinking about that, but now it has a bit different perspective.<br />
</p><h2>WTH?</h2><p>I work in E-conomic company and about 2 years ago we decided to build new product. <br />
</p><p>Till that time we&#8217;ve learned hard few things: plain jQuery applications is mess, building new shinny product on out-dated infrastructure is bad idea.<br />
</p><p>So, we&#8217;ve started with front-end by choosing Backbone.js as our foundation, later on we&#8217;ve decided to switch our API server from .NET to Node.js.<br />
</p><p>It appears we got full JavaScript stack on that product and I involved in JavaScript more and more each day.<br />
<!-- more -->
</p><h2>I thought I know JavaScript</h2><p>That time I mistakenly thought, I can do JS programming. Sure, I understood jQuery selectors, concept of callback and even why we need &#8216;var me = this;&#8217; trick in code.<br />
</p><p>But the reality was a bit different. Now, listening to podcasts and reading some blogs, I understood that I&#8217;ve been to &#8216;classic&#8217; trap on C#/Java developer switching to JavaScript. Languages and frameworks requires time to learn.<br />
</p><h2>Long hard way of learning</h2><p>I had to spend the time to learn new stuff. I would say the best source of information was the code written by my <a href="https://github.com/e-conomic?tab=members">colleagues</a>. We have great team, so initially I were just reviewing the code following some patterns. I also spent time of peering famous OS projects like underscore and Backbone.js.<br />
</p><p>JavaScript  <a href="http://shop.oreilly.com/product/9780596517748.do">Good Parts</a>, opened my eyes on few important things as well.<br />
</p><p>There are 3 aspects that changed my mind on JavaScript.<br />
</p><h3>JavaScript is dynamic language</h3><p>Let&#8217;s be clear. If someone in 2003 tell me I&#8217;m going to program dynamic language and will be happy about, I would never believe that. I was programming C++ and truly believed in types. Types as I was thinking is only way to tackle complexity of software.<br />
</p><p>Even though, I still think about some advantages of static vs. dynamic languages, my opinion has changed radically.<br />
</p><p>Dynamic languages are great. I feel I more solve problems rather than designing types (or usually hierarchy of types). Consider that, instead of thinking about the name for next &#8220;ProxyAbstractFactoryManager&#8221; I&#8217;m writing functions that do stuff.<br />
</p><h3>Frictionless development</h3><p>I was compiling applications for whole my life. Just to run some simple thing I need to compile and link. It&#8217;s usually not a problem at all, but depends on project infrastructure it can take a lot of time. Sooner or later you start to hate builds.<br />
</p><p>With JavaScript application, you simply should run it. It starting fast so the gap between &#8220;write the line of code&#8221; and &#8220;check the results&#8221; became very small.<br />
</p><p>Instead of heavyweight IDE&#8217;s I became Sublime Text 2 user. After years in VS you simply could not understand how to write code without IntellySense. But practice shows it&#8217;s really possible. <br />
</p><h3>Node.js</h3><p>To be honest with you, I was very skeptical regarding Node.js initially. But again, practice showed different results. It&#8217;s been proved that Node.js is very suitable for our product. We are running API server on Node.js and it performs really nice.<br />
</p><p>Later I started to learn what Node.js platform offers and I was really surprised with it&#8217;s abilities.<br />
<p>CommonJS style of writing code started to make sense. Namespacing problem is solved, so you can build big applications there.<br />
</p><p>I have to add that Node.js is a significant Open Source player. Everything you get by npm is open source, you can check the sources if anything unclear. Most of Node.js modules are hosted in github, so even if you experience issues you can fix it.<br />
</p><script async class="speakerdeck-embed" data-id="8e251d9087200130c2401231381d5999" data-ratio="1.77777777777778" src="http://alexanderbeletsky.github.io//speakerdeck.com/assets/embed.js"></script><br />
<h2>Conclusions</h2><p>JavaScript is awesome. I like the experience of JavaScript programming so far. Whatever you do, front-end or back-end you stay in one &#8220;language context&#8221;. I would not call a huge problem, but usually context switching from one language to another can take something.<br />
</p><p>Picking up technology for next <a href="http://www.likeastore.com/">side-project</a> or quick hack I&#8217;m selecting JavaScript.<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Exploring collections. Part 2.]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/baby-steps-to-backbonejs-exploring.html"/>
    <updated>2013-04-10T20:53:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/baby-steps-to-backbonejs-exploring</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Backbone.js is event-driven framework. All Backbone entities are extended from <a href="http://backbonejs.org/#Events">Backbone.Event</a> object. That means, they are able to raise events, subscribers are able to listen to that events and act accordingly. Let&#8217;s take a look what type of event does Backbone.Collection have.<br />
    <!-- more -->
    </p>    <h2>Backbone.Collection events</h2>    <p>        Will have a test suite for that,<br />
    </p>    <pre class="brush: js">describe('collection events', function () {
    var listener;

    beforeEach(function () {
        collection = new FeedbackCollection();
    });

    beforeEach(function () {
        listener = jasmine.createSpy();
    });
    </pre>    <p>        Here we are creating collection for testing and Jasmine spy, special function we going to use as event subscriber.<br />
    </p>    <h3>Adding element to collection</h3>    <p>        As we saw <a href="http://www.beletsky.net/2013/03/baby-steps-to-backbonejs-exploring.html">previously</a> there are several ways of adding new elements to collection. By add and push methods. The important thing, does not matter what API method you use, Backbone.Collection would trigger &#8216;add&#8217; event.<br />
    </p>    <p>        By <code>add</code> method,<br />
    </p>    <pre class="brush: js">describe('while adding elements', function () {
    beforeEach(function () {
        collection.on('add', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it ('should raise add event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        By <code>push</code> method,<br />
    </p>    <pre class="brush: js">describe('while pusing elements', function () {
    beforeEach(function () {
        collection.on('add', listener);
    });

    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it ('should raise add event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        Each event handlers receives model itself and reference to collection.<br />
    </p>    <h3>Removing elements from collection</h3>    <p>        Similarly, there 2 ways of removing items from collection, by remove and pop methods.<br />
    </p>    <p>        By <code>remove</code> method,<br />
    </p>    <pre class="brush: js">describe('while removing items', function () {
    beforeEach(function () {
        collection.on('remove', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        var model = collection.get('feedback-1');
        collection.remove(model);
    });

    it ('should raise remove event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        By <code>pop</code> method,<br />
    </p>    <pre class="brush: js">describe('while poping items', function () {
    beforeEach(function () {
        collection.on('remove', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        collection.pop();
    });

    it ('should raise remove event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <h3>Resetting and sorting</h3>    <p>        Besides just adding and removing stuff from collection, it have few more method which reaction is triggering event. It&#8217;s reset and sort. Reset is the bulk insert into collection, it works great when we fetch some data from server and want to push everything just by one operation. Sort, is rarely called manually, since if collection provides <code>comparator</code> function, it would sort itself, during add or reset operations. But sometimes sorting could be triggered from UI as user changes the sort column of table, for example.<br />
    </p>    <p>        Resetting collection,<br />
    </p>    <pre class="brush: js">describe('while reseting collection', function () {
    beforeEach(function () {
        collection.on('reset', listener);
    });

    beforeEach(function () {
        collection.reset([
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}]);
    });

    it('should raise reset event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
</pre>    <p>        Sorting collection,<br />
    </p>    <pre class="brush: js">describe('while sorting collection', function () {
    beforeEach(function () {
        collection.on('sort', listener);
    });

    beforeEach(function () {
        collection.reset([
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}]);
        collection.sort();
    });

    it('should raise sort event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <h2>Why it matters?</h2>    <p>        Knowing the events of all Backbone.js entities is very important. You should always design you application based on events triggering/subscription, instead of direct function call. That would make your code much de-coupled and UI logic very flexible.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Likeastore, Application Built on Hackathone]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/likeastore-application-built-on.html"/>
    <updated>2013-03-31T18:52:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/likeastore-application-built-on</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        It&#8217;s my <a href="http://www.beletsky.net/2011/06/hackatone-in-kiev-11-12-june.html">second time</a> I attended hackatone. As last time, it took place in Ciklum, the best office in Kiev, so I had very strong wish to visit it. My previous experience showed several things: hacktone is absolutely unpredicable thing, you can&#8217;t guess which projects will be popular or not.. and the second, that it&#8217;s hard to do something valuable alone.<br />
    </p>    <p>        So, this time I decided to build a team of guys I know and trust, so we can do something together. Those two guys appeared to be my colleagues, in @debitoor project <a href="https://github.com/voronianski">@voronianski</a> and <a href="https://github.com/mamant">@mamant</a>. We gathered together, to build a product which was called - &#8220;Likeastore&#8221;<br />
    <!-- more -->
    </p>    <h2>Idea behind</h2>    <p>        All of us having at least those 3 accounts: facebook, twitter and github. And all of those are continuous stream of information. If you have an interesting network, it probably produces interesting content so you do much of likes/favorites/stars (stories, tweets, or interesting gihub repos). The problem, it&#8217;s very difficult to keep this information ordered - you typically remember you heard something interesting, but could not remember the source of it.<br />
    </p>    <p>        &#8220;Likeastore&#8221; is aimed to fix this problem. Integrating wish different services it&#8217;s keeping your &#8220;likes&#8221; information in good order, with nice search and smart categorizing.<br />
    </p>    <img src="https://lh5.googleusercontent.com/-AaH9Nrnr54o/UVhZihO3yjI/AAAAAAAAR1Y/FhtHcOksuik/s988/login.png" style="width: 620px" alt="likeastore login screen"/><br />
    <h2>What we did?</h2>    <p>        We basically allow &#8220;Likeastore&#8221; to connect all those application by their open API and collect the information from it. We transform the information into something generic and grouping it together. So, the users are having all information up-to-date in nice and clear dashboard.<br />
    </p>    <p>        Originally we had ambition to have a kinda real-time. In the way, I favorited the tweet and &#8220;Likeastore&#8221; almost immediately got the information. We had to drop it. The reason is API&#8217;s of popular applications are very quoted. You simply cannot do more request that in quota, otherwise you just banned.<br />
    </p>    <p>        So, nethertheless of similar projects, we don&#8217;t want to make next social network of bookmarks. Instead, we want to build easy to use and powerful information keeper. Something, that help you to have things in order.<br />
    </p>    <img src="https://lh4.googleusercontent.com/-cHk7Pdbyus8/UVhZisS6e5I/AAAAAAAAR1g/-3uXVV28rL0/s988/setup.png" style="width: 620px" alt="likeastore setup screen"/><br />
    <h2>How we did it?</h2>    <p>        In fact, we&#8217;ve build a &#8220;thrown-out&#8221; prototype. The <a href="https://github.com/organizations/likeastore">code</a> is a shitty inside, so we bit far of nearest production. But, we&#8217;ve created an interesting application. We split on 2 + 1, two backend (me and <a href="https://github.com/voronianski">@voronianski</a>) and one front-end guy (<a href="https://github.com/mamant">@mamant</a>). Sat closely and worked shoulder-to-shoulder for next 22 hours. <br />
    </p>    <p>        From the very beginning I had very clear vision of stuff we need to do. I could imagine architecture and UI principles. And as soon I shared that the teammates accepted that really fine and provided high quality feedback and collaboration. That helped us to have a strong team in my perspective.<br />
    </p>    <p>        All of us are JS developers, so no doubt we&#8217;ve taken a JavaScript stack as default. Node.js, powered by Express.js at the backend and Backbone.js front end. Sometimes it&#8217;s tricky, but in fact - it&#8217;s powerful combination. <br />
    </p>    <h2>A bit of tech info</h2>    <p>        We are having 2 main architectural units: core and connectors. Core, is Express.js application having both serving static content and providing API. The API itself, consists on public and private parts. Public part is aimed our web client (or potentiall apps), where the private is used to communicated connectors.<br />
    </p>    <p>        Connectors are just very simple HTTP services, which perform the handshake with core and then post back all data they have collected through API&#8217;s. That means, we have 3 connectors now - twitter, github and facebook. Facebook, became a quite difficult to integrated with, so we currently dropped it.<br />
    </p>    <p>        We are having <a href="http://couchdb.apache.org/">CouchDB</a> as our storage. We took it, because <a href="https://github.com/voronianski">@voronianski</a> had some good experience with. That appeared to be a very lucky decision. CouchDB is very interesting NoSQL solution. It&#8217;s storage model has few interesting features. One of them is &#8220;merge-update&#8221;. Means, you can post exactly same set of information many times, but CouchDB would not create new entities. It would merge identical documents into one. That simplied connectors very much, since they no longer need to track only new information, but could post back just a transformed bulk of information from API&#8217;s.<br />
    </p>    <p>        Initially, we all agreed - our UI will never be default Bootstrap theme. It&#8217;s overused and impress no more as toilet door. That&#8217;s where <a href="https://github.com/mamant">@mamant</a> apply his best skills. He carefully worked all our screens making a it look nice and original. <br />
    </p>    <img src="https://lh3.googleusercontent.com/-XSXpDhEuX9Y/UVhZjLe7w6I/AAAAAAAAR1k/HI6xIJQnUXc/s988/dashboard.png" style="width: 620px" alt="likeastore dashboard screen"/><br />
    <h2>Presentation and feedback</h2>    <p>        Without few features we did demo-able version in time. We have concluded few major fixes, just before the deadline. <br />
    </p>    <p>        I did a presentation of app in short way, without anything unimportant (at least I wish to think so) and we had received great feedback. People liked the idea, so we&#8217;ve collected 32 voices that brought us 2nd place.<br />
    </p>    <p>        That gives a much of inspiration for further work! All of us are very enthusiastic to make the stuff done. It&#8217;s a lot of work, actually.<br />
    </p>    <p>        I just want to say thank you to all organizers of this event, it was nicely handled. And to the team, for making it fun and interesting.<br />
    </p>    <p>        Stay tuned for release of &#8220;Likeastore&#8221;, check out <a href="https://github.com/likeastore">sources</a> in a meanwhile.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Exploring collections]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/baby-steps-to-backbonejs-exploring.html"/>
    <updated>2013-03-27T17:51:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/baby-steps-to-backbonejs-exploring</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        After initial introduction to Backbone&#8217;s <a href="http://www.beletsky.net/2012/12/baby-steps-to-backbonejs-unit-testing.html">views</a> and <a href="http://www.beletsky.net/2012/11/baby-steps-to-backbonejs-unit-testing.html">models</a>, we going to look on next Backbone.js fundamental entity - <a href="http://backbonejs.org/#Collection">Collection</a>. Collections represents the ordered set of models and became very handy for any type of applications. Consider that, we almost always operate with set of different models: posts, tweets, news etc. all of that are collections, typically rendered as lists or grids.<br />
    <!-- more -->
    </p>    <p>        In small application we are doing through that series we have collection of feedbacks. But before I show how to integrate collection into the app, I want to make sure you understand all collection properties right. We&#8217;ll do that by TDD&#8217;ing the collection and exploring it&#8217;s behavior.<br />
    </p>    <h2>Collection construction</h2>    <p>        So, to create collection we need to extend <code>Backbone.Collection</code> object,<br />
    </p>    <pre class="brush: js">var FeedbackCollection = Backbone.Collection.extend({
    model: Feedback,
    url: '/feedback'
});
    </pre>    <p>        Here we just specified the URL for collection persistence and the model, of which the collection would consists of. Let&#8217;s prepare the test suite for collection stories,<br />
    </p>    <pre class="brush: js">describe('FeedbackCollection.js spec', function () {
    var collection;
});
    </pre>    <p>        And create our first specification,<br />
    </p>    <pre class="brush: js">describe('when constructing', function () {
    describe('just empty', function () {
        beforeEach(function () {
            collection = new FeedbackCollection();
        });

        it('should be created', function () {
            expect(collection).toBeDefined();
        });
    });
</pre>    <p>        Just to make sure, our definition is fine and we are able to instantiate new collection object.<br />
    </p>    <p>        <code>FeedbackCollection</code> constructor have few optional arguments - <code>models</code>, <code>options</code>. Models, could be either arrays of objects, or array of Backbone.Models. In case of object, collection constructor would &#8220;turn&#8221; them to models (taking the type we specified on collection definition) and add those models to collection. <br />
    </p>    <pre class="brush: js">describe('with objects', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be lenght of 2', function () {
        expect(collection.length).toBe(2);
    });

    it('should contain models inside', function () {
        expect(collection.models).toBeDefined();
    });
});
</pre>    <p>        or,<br />
    </p>    <pre class="brush: js">describe('with models', function () {
    beforeEach(function () {
        var models = [
            new Feedback({email: 'a@a.com', website: 'a.com', feedback: 'hello'}),
            new Feedback({email: 'b@b.com', website: 'b.com', feedback: 'good bye'})
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be lenght of 2', function () {
        expect(collection.length).toBe(2);
    });

    it('should contain models inside', function () {
        expect(collection.models).toBeDefined();
    });
});
</pre>    <p>        Both things are equivalent. Moreover, typically it&#8217;s only unit tests you need to initialize collections that way, so I usually prefer first option.<br />
    </p>    <p>        The <code>options</code> parameter, could contain the type of model that collection contain. So, if collection does not specify <code>model</code> property, <code>Backbone.Model</code> will be created by default.<br />
    </p>    <pre class="brush: js">describe('with options', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new Backbone.Collection(models);   // not specifying model
    });

    it('should be created', function () {
        expect(collection).toBeDefined();
    });

    it('should have models of Backbone.Model type', function () {
        expect(collection.models[0].constructor).toBe(Backbone.Model);
    });
</pre>    <p>        You can override that by passing <code>{model: MyModel}</code> options object,<br />
    </p>    <pre class="brush: js">describe('while passing model option', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new Backbone.Collection(models, { model: Feedback });
    });

    it('should have models of Feedback type', function () {
        expect(collection.models[0].constructor).toBe(Feedback);
    });
});
</pre>    <p>        Despite of that possibility I really rare use that in practice. It&#8217;s better to simply specify model type in collection definition, that makes code easy to understand.<br />
    </p>    <h2>Accessing collection elements</h2>    <p>        After collection has been constructed, it&#8217;s possible to access internal models. There are several ways of doing that.<br />
    </p>    <p>        The simplest one is by index,<br />
    </p>    <pre class="brush: js">describe('when accessing collection elements', function () {
    var first, second, models;

    describe('by index', function () {
        beforeEach(function () {
            models = [
                {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
                {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
            ];
            collection = new FeedbackCollection(models);
        });

        beforeEach(function () {
            first = collection.at(0);
            second = collection.at(1);
        });

        it('should get first model by index', function () {
            expect(first.toJSON()).toEqual(models[0]);
        });

        it('should get second model by index', function () {
            expect(second.toJSON()).toEqual(models[1]);
        });
    });
</pre>    <p>        Even it possible, in real apps you probably don&#8217;t know the index of model you need to get from collection, since they might come from server in unpredictable order. So, instead of index, getting by id is more appropriate way.<br />
    </p>    <pre class="brush: js">describe('by id', function () {
    beforeEach(function () {
        models = [
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    beforeEach(function () {
        first = collection.get('feedback-1');
        second = collection.get('feedback-2');
    });

    it('should get first model by id', function () {
        expect(first.toJSON()).toEqual(models[0]);
    });

    it('should get second model by id', function () {
        expect(second.toJSON()).toEqual(models[1]);
    });
});
</pre>    <p>        And finally, something that I being trapped many time while starting up with Backbone - indexers on collection, does not work.<br />
    </p>    <pre class="brush: js">describe('indexer does not work', function () {
    beforeEach(function () {
        models = [
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be undefined', function () {
        expect(collection[0]).not.toBeDefined();
    });
});
</pre>    <h2>Adding and removing items</h2>    <p>        Next, we need to understand to how to add and remove items from collections.<br />
    </p>    <p>        There are 2 ways of adding item into backbone collection: <code>add</code>, <code>push</code>. They are very similar, but there are difference between those. The add method takes a model or array of models and the options you can specify the position there the item should be interred to. Push method, would simply add new item to the end of collection.<br />
    </p>    <pre class="brush: js">describe('by add method', function () {
    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it('should be added', function () {
        expect(collection.get('feedback-1')).toBeDefined();
    });

    it('should be converted to model', function () {
        expect(collection.get('feedback-1').constructor).toBe(Feedback);
    });

    describe('with index specified', function () {
        beforeEach(function () {
            collection.add({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}, {at: 0});
        });

        it('should have 2 items in collection', function () {
            expect(collection.length).toBe(2);
        });

        it('should have feedback-2 item at index 0', function () {
            expect(collection.at(0).id).toBe('feedback-2');
        });
    });
});
</pre>    <p>        By push,<br />
    </p>    <pre class="brush: js">describe('by push method', function () {
    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it('should be added', function () {
        expect(collection.get('feedback-1')).toBeDefined();
    });

    it('should be converted to model', function () {
        expect(collection.get('feedback-1').constructor).toBe(Feedback);
    });

    describe('with next push', function () {
        beforeEach(function () {
            collection.push({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'});
        });

        it('should have 2 items in collection', function () {
            expect(collection.length).toBe(2);
        });

        it('should have feedback-1 item at index 0', function () {
            expect(collection.at(0).id).toBe('feedback-1');
        });
    });
});
</pre>    <p>        Please note, that <code>push</code> recieves the same options as <code>add</code>, but it&#8217;s just a short-cut for <code>add</code> method (take a look how it&#8217;s <a href="https://github.com/documentcloud/backbone/blob/master/backbone.js#L747">implemented</a>, to make it completely clear)<br />
    </p>    <p>        For removing the items, we also have 2 methods: <code>remove</code>, <code>pop</code>. They are opposite symmetrical to the <code>add</code>, <code>push</code>. Remove, removes specified model from collection, pop removes the last model in collection. This is shown by following specification,<br />
    </p>    <pre class="brush: js">describe('when removing items', function () {
    beforeEach(function () {
        collection = new FeedbackCollection();
    });

    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        collection.push({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'});
    });

    describe('by remove method', function () {
        beforeEach(function () {
            var model = collection.get('feedback-1');
            collection.remove(model);
        });

        it('should be removed', function () {
            expect(collection.get('feedback-1')).not.toBeDefined();
        });
    });

    describe('by pop method', function () {
        beforeEach(function () {
            collection.pop();
        });

        it('should be removed', function () {
            expect(collection.get('feedback-2')).not.toBeDefined();
        });
    });
});
</pre>    <h2>Conclusions</h2>    <p>        We&#8217;ve just gone for a very basic features of Backbone.Collection type. Next time, we&#8217;ll explore more about collections as events it produces, fetching and persisting data to server.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third Year of E-conomic]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/third-year-of-e-conomic.html"/>
    <updated>2013-03-13T20:29:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/third-year-of-e-conomic</id>
    <content type="html"><![CDATA[<div class='post'>
<p>That&#8217;s my traditional post on yet another anniversary in <a href="http://www.e-conomic.com/">E-conomic</a> company. Even thought, I still work there, this year I&#8217;ve heard a bit less of <a href="http://www.e-conomic.com/">E-conomic</a> but more about <a href="https://debitoor.com/">Debitoor</a> instead. Debitoor is very cool product me and <a href="https://debitoor.com/about/the-team">my team</a> is working on and I was totally focused on that during this year.<br />
	<!-- more -->
    </p>    <p>        So, what&#8217;s interesting about? Alright, it begins with <a href="http://www.e-conomic.com/">E-conomic</a> company, which through about 10 years on market gathered huge experience in online accounting. The primary target audience for all that years were professional accounters and administrators that have pretty solid knowledge what the accounting is. But due influence of internet economy and small-business grow there appeared high demand on simple accounting software, that could be easily understood even for non-professional accounters. That&#8217;s were we saw the opportunity. That&#8217;s then the <a href="https://debitoor.com/">Debitoor</a> born.<br />
    </p>    <p>        Technologically it&#8217;s been very innovative for us, too. As I <a href="http://www.beletsky.net/2012/03/second-year-of-e-conomic.html">wrote</a> last year, the March was the month we tried how good different technologies might work for us. The decision were taking up to full JavaScript stack - <a href="http://nodejs.org/">node.js</a> and <a href="http://www.mongodb.org/">MongoDB</a> as backend, <a href="http://backbonejs.org/">Backbone.js</a> as front end technologies.<br />
    </p>    <p>        So, near the April we have a working product running .NET + MSSQL, that was on production and customers started to use, we decided to switch backend from .NET to Node.js. The HTTP API interfaces were &#8220;copied&#8221; from ASP.NET MVC implementation to exactly the same but on Express.js. The difference was in the way how ASP.NET MVC and Express.js is serving the HTML responses, so we have to re-desing the way how front-end application is being initialized and started. Since the low coupling of our front end to ASP.NET features, the rest of Backbone.js application remained absolutely the same.<br />
    </p>    <p>        All existing data has been exported to JSON files and been imported to MongoDB through the existing API. That gave us a chance to make some performance measuring and we definitely we happy about. Average HTTP request were handled in ~100ms that was a quite big boost comparing to previous platform.<br />
    </p>    <p>        Front-end is being involved as well. We&#8217;ve been switched to Single Page Application (SPA) architecture client side and there is no way back. With Node.js backend we easily moved application to cloud, all static resources to CloudFront that affected initial load time as a result made application to look and feel incredibly fast.<br />
    </p>    <p>        But the most important is - users love it! We&#8217;ve got plenty of sign-ups during the day, from different countries as Germany, Spain, Great Britain, Columbia etc., recently we&#8217;ve started premium campaign, and the premium users joins us. UI/UX are tweeked all the time, based on future application vision and A/B tests.<br />
    </p>    <p>        All that makes me feel - your work is important and you do something valuable.. and that is exactly what keeps me working on <a href="http://www.e-conomic.com/">E-conomic</a>. It&#8217;s interesting and make sense - that&#8217;s all I need.        <br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking back to 2012]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/01/looking-back-to-2012.html"/>
    <updated>2013-01-05T17:25:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/01/looking-back-to-2012</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        It&#8217;s the first Saturday of New Year, so it would be good idea to spend some time thinking of year that passed.<br />
    </p>    <h2>Work in e-conomic</h2>    <p>        That was yet another great year in e-conomic. We have build great app - <a href="https://debitoor.com/">Debitoor</a>. Along the way, we were trying different approaches, re-writing things from scratch, designing and re-designing again and again. Finally we got very solid application built upon Node.js, MongoDB and Backbone.js. Debitoor has been created with scalability in mind, we started with Heroku cloud service, eventually moved to Amazon EC for back-end and Amazon Cloud Front for front-end. Now, it&#8217;s working amazingly fast and for 8 month we gathered ~20,000 signups, launched service for many countries.<br />
    <!-- more -->
    </p>    <p>        At the beginning of the year we were a bunch of .NET developers diving into JavaScript. Having a very strong team of responsible professionals we&#8217;ve gathered initial knowledge quite fast. I&#8217;ve been focused almost at front-end this year. You probably noticed that I slowed down my writings about <a href="http://www.beletsky.net/search/label/asp.net">ASP.NET MVC</a> and doing more for <a href="http://www.beletsky.net/search/label/Backbone.js">Backbone.js</a>. That just reflects the fact of my current specialization. Initially, I was not very serious about Node.js platform. But with time, I became to love it. It speed up our development velocity several times, the API we&#8217;ve built on this platform shows amazing performance indicators.<br />
    </p>    <p>        The team has been expanded a bit. We got new very strong PO and few developers both in Ukraine and Denmark and all of those guys are awesome. I enjoy friendly and cooperative environment we have in team. Besides of that, this year we got 2 QA guys. QA influenced the development really much and helped to improve overall quality of service. I would also mention amazing UX team we have, calling themselves &#8220;UX Wizards Team&#8221; I have to admit - we are really doing magically things. UI/UX of app is changing all the time and with each iteration it became more intuitive, comprehensive and good looking.<br />
    </p>    <h2>Speaking and blogging</h2>    <p>        For 2012 and have written 63 blog posts on various topics, primarily on .NET, JavaScript and TDD. Some stats, from Google Analytics:<br />
    </p>    <p>        I don&#8217;t track GA stats actively and I was really surprised to see the figures. I got 105,490 visits, 79,445 unique visits. That gives 288% more traffic than <a href="http://www.beletsky.net/2011/12/retrospective-2011.html">2011</a>. That&#8217;s quite big number and I could only hope that this year the traffic would only grow up.<br />
    </p>    <p>        As for most viewed blog posts:<br />
    </p>    <ul>        <li><a href="http://www.beletsky.net/2012/04/new-in-aspnet-mvc4-razor-changes.html">New in ASP.NET MVC4: Razor changes</a> where I highlighted some new stuff of ASP.NET MVC 4 and it&#8217;s been tweeted by <a href="http://weblogs.asp.net/scottgu/">@scottgu</a> (what explains it&#8217;s popularity).</li>
        <li><a href="http://www.beletsky.net/2012/02/new-tools-in-my-tdd-arsenal.html">New Tools in My TDD Arsenal</a> I posted about stuff I used in .NET development like NCrunch, NSubstitute and FluentAssertions.<br />
        </li>
        <li><a href="http://www.beletsky.net/2012/06/starting-up-nodejs-development-on.html">Starting Up Node.js Development on Windows</a> as quick introduction to setup Node.js development environment on Windows box.</li>
    </ul>    <p>        Something that I personally liked the most:<br />
    </p>    <ul>        <li><a href="http://www.beletsky.net/2012/01/convention-based-ioc-configuration.html">Convention based IoC configuration</a> convention over configuration principles applied to IoC.</li>
        <li><a href="http://www.beletsky.net/2012/06/7-weeks-with-python.html">7 Weeks With Python</a> my little journey with Python language during Audacity CS101 course.</li>
        <li><a href="http://www.beletsky.net/2012/08/developing-web-applications-faster.html">Developing Web Applications Faster</a> that shows how to apply LiveReload technique to working faster with front-end tasks.<br />
        </li>
    </ul>    <p>        As I said above my focus moved from .NET to JavaScript a bit. I&#8217;ve started a series of blog posts called <a href="http://www.beletsky.net/search/label/BabyStepsBackbone">Baby steps to Backbone.js</a>, I&#8217;m learning JavaScript and other front-end frameworks, so I would say more info about JavaScript to come.<br />
    </p>    <p>        As for speaking, I&#8217;ve prepared 10 <a href="https://speakerdeck.com/alexanderbeletsky">presentations</a> during 2012 and had nearly 15 speeches on different events. That&#8217;s not a lot, but it&#8217;s much more that 2011 and I feel good about it.<br />
    </p>    <h2>Trainings and Consulting</h2>    <p>        Our <a href="http://xpinjection.com/trainings/tdd-in-net/">TDD in .NET</a> training became very popular. We did a quite of the through the year. It goes very fine and thanks to <a href="http://xpinjection.com/">XP Injection</a> efforts I could only predict more to come. I also did a training on <a href="">ASP.NET MVC</a> which went quite fine, but very small demand could be seen on that. I hope that 2013 will bring some more trainings in JavaScript as well.<br />
    </p>    <p>        In 2012 I&#8217;ve tried myself as a consultant. I&#8217;ve been contacted by the guy who listened to my <a href="https://speakerdeck.com/alexanderbeletsky/large-scale-javascript-applications">JavaScript talk</a> and asked to help with architectural advices on new service he tries to build. I think that was very good experience for both of us. Of cause, that&#8217;s just a tiny job but I hope that consulting could work for me in future.<br />
    </p>    <p>        I believe that 2012 was just the beginning of Trainings & Consulting part of my duties and 2013 will be the one to prove it.<br />
    </p>    <h2>Communities</h2>    <p>        <a href="http://www.facebook.com/groups/574355212591240/">Kyiv Beer&#8217;N&#8217;Code</a> is something that I personally happy about. Being relauched in September 2012, we haven&#8217;t missed any meet up. Taking into account it&#8217;s bi-weekly meetings that&#8217;s a lot. New guys, who joined the group are open minded and smart, so it&#8217;s always interesting to spend time there. I would like to have say big thanks to <a href="">Ciklum</a> company, who provides a support for us.<br />
    </p>    <p>        <a href="http://xpinjection.com/uadevclub/">UA Dev Club</a> is growing and growing. Each meeting gathers more and people and it&#8217;s great. I did a few talks there I try to attend as more meetings as I can (even if they are talking about Java). UA Dev Club became very active this year and I wish it only improves in 2013.<br />
    </p>    <p>        <a href="http://kievalt.net/">Kiev ALT.NET</a> in opposite a little slowed down this year. Primarily, because it&#8217;s leader moved to another city, so it became difficult to manage the stuff. Nevertheless, we&#8217;ve organized very cool meetup at the end of year with Jimmy Bogard and it motivated us to go on. We already have planned few meetings ahead and expecting more interesting foreign guests to come. Besides of that, <a href="http://www.jetbrains.com/">JetBrains</a> might be the one who can help us this year.<br />
    </p>    <h2>Side projects</h2>    <p>        The last topic in my list that makes me a bit sad. I have to admit, I haven&#8217;t produced anything really noticeable through the year. My problem is that I&#8217;m starting few projects and none of them could make done. Simply lacking the energy and motivation to accomplish it. I believe that &#8220;Less is more&#8221; should be my slogan for 2013.<br />
    </p>    <p>        Some new projects appeared in my github profile in 2012:<br />
    </p>    <ul>        <li><a href="https://github.com/alexanderbeletsky/wonka">Wonka</a> - supposed to be a blogging engine based on github with easy integration to ASP.NET MVC applications. I had some designs and ideas of implementing it, but it&#8217;s still in very early stage.</li>
        <li><a href="https://github.com/alexanderbeletsky/aspnet.mobile">ASP.NET Mobile</a> - small project that I&#8217;ve completed during preparation to the conference. It launched on AppHabor at <a href="http://aspnetmobile.apphb.com/">http://aspnetmobile.apphb.com/</a>, but the traffic is very low there.<br />
        </li>
        <li><a href="https://github.com/alexanderbeletsky/foundstyles">FoundStyles</a> - while my playing with Foundation framework I&#8217;ve decided to build small site to keep gallery of themes there, so <a href="http://foundstyles.com/">http://foundstyles.com/</a> was born. I&#8217;ve created only 3 and after left it. But, currently it has about 300 visits per day and it make sense to update the project. It would be easier, since Foundation moved to SASS.</li>
        <li><a href="https://github.com/alexanderbeletsky/freeze">Freeze</a> - small utility project to make a snapshots of dynamic web sites. Originally I&#8217;ve created it to make a snapshot of Kyiv Beer && Code site and place it to github. I&#8217;ve spent some time on that and it&#8217;s not yet done (as well as Kyiv Beer && Code site is not moved).</li>
        <li><a href="https://github.com/alexanderbeletsky/github-fs.net">GithubFS.net</a> - using Github remote repository as local file system project. It&#8217;s on really early development stage, but has some documentation describing ideas. And, it&#8217;s not done as well.</li>
        <li><a href="https://github.com/alexanderbeletsky/benchmark-js">Benchmark-js</a> - tiny library for measuring JS execution time and putting that to log. Works both Node.js and browser.</li>
        <li><a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone Computed.Fields</a> - something that I personally happy with. Started as some code I&#8217;ve created for debitoor it moved as stand alone Backbone.js plugin.</li>
    </ul>    <p>        If you reading this and those projects looks interesting to you, so you would like to pick that up - please let me know.<br />
    </p>    <p>        Something that I has started in 2011 and feel most shame for is <a href="https://github.com/alexanderbeletsky/candidate">Candidate</a>. Being <a href="http://www.beletsky.net/2012/08/re-thinking-candidate-application.html">restarted</a> this year I had big ambitions to actually make it done. I still want to implement some meaningful product for .NET web applications deployment. And Candidate would probably be my focus at the beginning of 2013.<br />
    </p>    <h2>Conclusions</h2>    <p>        Despite of side-projects failure, 2012 was a good year. 2013 is the year of Python that means it would bring happy coding time for all the developers. Happy New Year!<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Backbone.ComputedFields]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/12/introducing-backbonecomputedfields.html"/>
    <updated>2012-12-25T22:28:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/12/introducing-backbonecomputedfields</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Recently, I&#8217;ve been working on small project which I want to share here. It&#8217;s called <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> and it&#8217;s small plugin that extends Backbone.Model functionality a bit.<br />
    </p>    <p>        I needed to have a model with &#8216;virtual&#8217; fields. Namely, fields that does not belong to model directly, but being computed based on some other fields values.<br />
    <!-- more -->
    </p>    <p>        The easiest solution would be simply introduce some model methods, say <code>model.getComputedField() / model.setComputedField()</code> and store the value inside the model object. But that turns out to be bad idea, for several reasons. First, we are breaking usual Backbone interface for getting and setting values - <code>model.get('computed') / model.set('computed', 100)</code>. Also, if model is binded to a view, we are responsible for raising events manually, in case of computed or depended field changing.<br />
    </p>    <p>        So, after few iterations <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> was born. The design goals: to be simple, to be declarative, to be friendly to model binding (read, respect the events).<br />
    </p>    <h2>Use cases</h2>    <p>        Typical use cases for <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> are: calculating the prices; concatenating several fields; encapsulating the logic of retrieving object by reference.<br />
    </p>    <p>        It&#8217;s fairly important, that computed field could change. Based on it&#8217;s value, dependent fields should be updated.<br />
    </p>    <h2>Examples</h2>    <p>        Let&#8217;s take a look on few examples. The models here are very simplified. But, it shows the main application of <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a>.<br />
    </p>    <h3>Calculating prices</h3>    <p>        The model represents the product, which contains net price and VAT rate.<br />
    </p>    <pre class="brush: js">var Produc = Backbone.Model.extend({
    initialize: function () {
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        grossPrice: {
            depends: ['netPrice', 'vatRate'],
            get: function (fields) {
                return fields.netPrice * (1 + fields.vatRate / 100);
            },
            set: function (value, fields) {
                fields.netPrice = value / (1 + fields.vatRate / 100);
            }
        }
    }
});
</pre>    <p>        So, we have <code>grossPrice</code> as computed field. That field depends on &#8216;netPrice&#8217; and &#8216;vatRate&#8217; and being calculated by simple formulas.<br />
    </p>    <pre class="brush: js">var product = new Product({ netPrice: 100, vatRate: 20 });
var grossPrice = product.get('grossPrice');
    </pre>    <p>        In this case, gross price would be 120.<br />
    </p>    <pre class="brush: js">product.set({grossPrice: 300});
var netPrice = product.get('netPrice');
</pre>    <p>        After gross price is update, netPrice will be recalculated and netPrice will be 250.<br />
    </p>    <h3>Concatenating fields</h3>    <p>        Let&#8217;s have a model to represent the person with first name and last name.<br />
    </p>    <pre class="brush: js">var Person = Backbone.Model.extend({
    initialize: function () {
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        fullName: {
            depends: ['firstName', 'lastName'],
            get: function (fields) {
                return fields.firstName + ' ' + fields.lastName;
            }
        }
    }
});
</pre>    <p>        I&#8217;m skipping the setter cause we don&#8217;t need to set full name here.<br />
    </p>    <pre class="brush: js">var person = new Person({firstName: 'Alexander', lastName: 'Beletsky'});
var fullName = person.get('fullName');
</pre>    <p>        Full name &#8216;Alexander Beletsky&#8217; is returned here.<br />
    </p>    <h3>Referenced objects</h3>    <p>        Sometimes we have a models that only contains a reference to another model. All the time, we need to get referenced object we have to create some piece of code, which it typically copy-n-pasted thought the code base. Computed field could be a good idea to encapsulate that.<br />
    </p>    <pre class="brush: js">var Invoice = Backbone.Model.extend({
    initialize: function (attrs, options) {
        this.customers = options.customers;
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        customer: {
            depends: ['customerId'],
            get: function (fields) {
                return fields.customerId && this.customers.get(fields.customerId);
            },
            set: function(customer, fields) {
                fields.customerId = customer.get('id');
            }
        }
    }
});
</pre>    <p>        Here we have customer field, which is computed. <br />
    </p>    <pre class="brush: js">var invoice = new Invoice({}, { customers: collectionOfCustomers });
var customer = invoice.get('customer');
</pre>    <p>        So, I&#8217;m able to get customer model even if invoice is just holding the invoice Id. <br />
    </p>    <pre class="brush: js">invoice.set({customer: anotherCustomer});
var customerId = invoice.get('customerId');
    </pre>    <p>        If I&#8217;m changing the customer of invoice, the &#8216;customerId&#8217; would be initialized with id of &#8216;anotherCustomer&#8217;.<br />
    </p>    <h2>Conclusions</h2>    <p>        <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> is still pre-mature, but I already successfully used that in one of projects. The github page contains pretty much documentation, so you should have to problems of adopting it for personal needs.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Unit testing of views]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/12/baby-steps-to-backbonejs-unit-testing.html"/>
    <updated>2012-12-19T21:52:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/12/baby-steps-to-backbonejs-unit-testing</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>Previous time, we&#8217;ve implemented a Backbone model and wrote some meaningful tests for it.<br />
</p><p>Next very important Backbone&#8217;s entry to test is View.<br />
</p><p>Views are central concept in framework. Views are actually ones who do stuff. We don&#8217;t have Controller in Backbone, but according to Controller <a href="http://www.itu.dk/courses/VOP/E2005/VOP2005E/8_mvc_krasner_and_pope.pdf">initial idea</a> as user input handler, Backbone views following exactly the same architectural goal, so they could be treaded as controllers in some way. <br />
</p><h2>What to test?</h2><p>You should focus on such things: <br />
</p><ul><li><strong>Initialization</strong> - test that view is provided with all required inputs like: model or collection, localization texts, different options. If view is not able, say, render without some option, you should test that exception is thrown.</li>
<li><strong>Rendering </strong> - test that required html appeared in view. I do not create those very strict, since they would be to fragile in case of markup changes, but still I check for major DOM elements are present and have right styles.</li>
<li><strong>Events</strong> - test that view is correctly handle DOM events.</li>
<li><strong>Model changes and persistence</strong> - test that changes in view are correctly propagated in model. If view is about to persist the model, that could tested as well.</li>
</ul><p>I see tests of views as kind of integration test. You communicate to DOM, listening to events, updating models or changing DOM elements state. It&#8217;s typically that view tests are catching most regression issues.<br />
</p><h2>How to test?</h2><p>Fortunately, the Backbone views are designed in very testable way. You don&#8217;t need any special HTML on test page, since view holding all it&#8217;s DOM structure inside <code>this.el</code>. By means of jQuery, it&#8217;s easy to change DOM values or trigger events.<br />
</p><p>Since view also holds reference to model, it&#8217;s easy to check model&#8217;s attributes changes or spying on particular models methods.<br />
</p><p>First red test,<br />
</p><pre class="brush: js">describe('FeedbackFormView.js spec', function () {
    var view, model;

    beforeEach(function () {
        view = new FeedbackFormView();
    });

    describe('when view is constructing', function () {

        it ('should exist', function () {
            expect(view).toBeDefined();
        });

    });
    </pre><p>Here we basically testing, that FeedbackFormView should exist, so as soon as function is in place, test should be green.<br />
</p><p>FeedbackFormView could not exist without a model as well as default feedback text, that should be used as initial value of textbox. In the language of TDD, that means:<br />
</p><pre class="brush: js">describe('when view is initialized', function () {

    describe('without model', function () {

        it('should throw exception', function () {
            expect(function () {
                new FeedbackFormView();
            }).toThrow(new Error('model is required'));
        });

    });

    describe('without default feedback', function () {
            
        it('should throw exception', function () {
            expect(function () {
                new FeedbackFormView({model: new Backbone.Model() });
            }).toThrow(new Error('feedback is required'));
        });
    });

});
    </pre><p>To turn from Red to Green, let&#8217;s add <code>initialize</code> function to view,<br />
</p><pre class="brush: js">initialize: function (options) {

    if (!this.model) {
        throw new Error('model is required');
    }

    if (!(options && options.feedback)) {
        throw new Error('feedback is required');
    }

    this.feedback = options.feedback;
},
    </pre><p>Btw, after that change it&#8217;s required to fix previous test, since it start to fail.<br />
</p><pre class="brush: js">describe('FeedbackFormView.js spec', function () {
    var view, model;

    beforeEach(function () {
        view = new FeedbackFormView({model: new Feedback(), feedback: 'TDD is awesome..' });
    });

    describe('when view is constructing', function () {

        it ('should exist', function () {
            expect(view).toBeDefined();
        });

    });
    </pre><p>Now, let&#8217;s test how rendering works.<br />
</p><pre class="brush: js">describe('when view is rendered', function () {

    beforeEach(function () {
        view.render();
    });

    it ('should email field be empty', function () {
        expect(view.$el.find('input#email')).toHaveValue('');
    });

    it ('should website field be empty', function () {
        expect(view.$el.find('input#website')).toHaveValue('');
    });

    it ('should feedback field with default feedback', function () {
        expect(view.$el.find('textarea#feedback')).toHaveValue('TDD is awesome..');
    });

});
</pre><p>Here and after I&#8217;m using very nice Jasmine plugin, called <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a>. It adds a number of matchers, very useful for testing jQuery objects.<br />
</p><p>We&#8217;ve tested initialization and rendering, now let&#8217;s test last aspect, model changes and persistence.<br />
</p><p>Suppose a user inputs nothing, erases default feedback and presses submit button. Expected behavior is expressed with this test:<br />
</p><pre class="brush: js">describe('when form is submitted', function () {

    describe('no inputs are filled', function () {

        beforeEach(function () {
            view.$el.find('#email').val('').trigger('change');
            view.$el.find('#feedback').val('').trigger('change');
        });

        beforeEach(function () {
            view.$el.find('#submit').trigger('click');
        });

        it('email field should be invalidated', function () {
            expect(view.$el.find('.control-group.email')).toHaveClass('error');
        });

        it('feedback field should be invalidated', function () {
            expect(view.$el.find('.control-group.feedback')).toHaveClass('error');
        });

        it('website field should be valid', function () {
            expect(view.$el.find('.control-group.website')).not.toHaveClass('error');
        });

    });
</pre><p>That&#8217;s cool. After those tests are passing, we can test that if only email is filled, but feedback is still empty, we are not able to submit the form. By analogy of previous test,<br />
</p><pre class="brush: js">describe('only email field filled', function () {

    beforeEach(function () {
        view.$el.find('#email').val('a@a.com').trigger('change');
        view.$el.find('#feedback').val('').trigger('change');
    });

    beforeEach(function () {
        view.$el.find('#submit').trigger('click');
    });

    it('email field should be valid', function () {
        expect(view.$el.find('.control-group.email')).not.toHaveClass('error');
    });

    it('feedback field should be invalidated', function () {
        expect(view.$el.find('.control-group.feedback')).toHaveClass('error');
    });

    it('website field should be valid', function () {
        expect(view.$el.find('.control-group.website')).not.toHaveClass('error');
    });

});
</pre><p>And finally, if view is filled correctly,<br />
</p><pre class="brush: js">describe('email and feedback filled', function () {

    beforeEach(function () {
        spyOn(view.model, 'save').andCallThrough();
    });

    beforeEach(function () {
        view.$el.find('#email').val('a@a.com').trigger('change');
        view.$el.find('#feedback').val('some feedback').trigger('change');
    });

    beforeEach(function () {
        view.$el.find('#submit').trigger('click');
    });

    it('should show no errors', function () {
        expect(view.$el.find('.error').length).toBe(0);
    });

    it('should save model', function () {
        expect(view.model.save).toHaveBeenCalled();
    });

});
</pre><p>Here, we test 2 things: first, that no validation errors appeared on form and second that <code>save</code> method of model is called. Jasmine built-in spy framework is used here. You can setup on any function of any object and then verify that function has (or has not) been called.<br />
</p><p>I&#8217;m skipping the implementation of that view, but you can find the code of application in <a href="https://gist.github.com/4330928">gist</a>.<br />
</p><h2>Conclusions</h2><p>While you typically start with defining and testing models in your application, view is integration test that helps to test actual behavior of application, depending on model states and events. You should define how &#8220;deep&#8221; you want to test the view, but my proposal is to focus on initialization, rendering, changes (validation) and persistence.<br />
</p></div>
]]></content>
  </entry>
  
</feed>
