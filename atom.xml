<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alexander Beletsky's development blog]]></title>
  <link href="http://alexanderbeletsky.github.io/atom.xml" rel="self"/>
  <link href="http://alexanderbeletsky.github.io/"/>
  <updated>2013-06-15T09:06:32+03:00</updated>
  <id>http://alexanderbeletsky.github.io/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github as blogging platform]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/05/github-as-blogging-platform.html"/>
    <updated>2013-05-16T18:55:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/05/github-as-blogging-platform</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        No, I&#8217;m not going to talk about creation some <a href="https://github.com/alexanderbeletsky/wonka">github-backed</a> blogging system. I would like to talk on some blogging style I tried to apply recently.<br />
    </p>    <p>        The problem is, technical blogging is difficult. I usually have a lot of ideas or know-how&#8217;s while I create some code. It&#8217;s just hard to blog about. As you didn&#8217;t do the blog post during coding, you might forget some details or simply loose the encouragement to blog about it.<br />
    <!-- more -->
    </p>    <p>        As I mentioned in my <a href="http://www.beletsky.net/2013/04/building-single-page-applications-with.html">previous</a> post I recently created some code that contains Backbone.js + Express.js boilerplate code that could be great start for building single page applications. I felt I need to document it somehow, so even myself will remember what&#8217;s going on there. So, I put some <a href="https://github.com/alexanderbeletsky/backbone-express-spa/blob/master/README.md">README</a> file there. Usually, I don&#8217;t write much documentation, but during writing it I realized that it&#8217;s a kind of blog post or tutorial I&#8217;m writing immediately after I created something.<br />
    </p>    <p>        I liked the way how it went. First of all, Markdown is great for technical blogging. I still use HTML and feel a but ashamed by that fact. It&#8217;s so easy to format and place code examples inside with Markdown (and it looks minimalistic and great on github). Second, the content of resulted readme file, pleased me much.. I felt it&#8217;s the same as blogging, but a bit.. more interesting, or so? So, I twitted about and great surprise for me, repository got 200 stars and 20 forks, got <a href="http://javascriptweekly.com/archive/128.html">mention</a> on <a href="http://javascriptweekly.com/">JavaScript Weekly</a> and raised some <a href="https://github.com/alexanderbeletsky/backbone-express-spa/issues">questions</a>. <br />
    </p>    <p>        The same as blogging, but instead post you have repo with README + some valuable code. Instead comments, you got issues and pull requests.<br />
    </p>    <p>        That was really motivating experience. I think I would like to repeat it from time to time.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Single Pages Applications]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/building-single-pages-applications.html"/>
    <updated>2013-04-29T20:26:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/building-single-pages-applications</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        This is transcript of talk I gave on <a href="http://www.msswit.in.ua/">#msswit</a> conference 25 April 2013.<br />
    </p>
    <h2>        What is SPA?<br />
    </h2>    <p>        If you just imagined the pools and saunas and massage rooms, this is, unfortunately, not the thing that I going to talk about. We&#8217;ll check out new concept of web applications, that are called - Single Page Applications.<br />
    </p>    <p>        From technical perspective SPA means the web application, that being loaded as one HTML page and redraws it&#8217;s UI without round trip to server. That sounds not so exiting, but we can see that SPA is much more than that.<br />
    <!-- more -->
 <script async class="speakerdeck-embed" data-id="2e8c91508fbe0130b23722000a1c4609" data-ratio="1.77777777777778" src="http://alexanderbeletsky.github.io//speakerdeck.com/assets/embed.js"></script><br />
    </p>    <p>        GMail is canonical example of single page application. It was not the first single page application though, it became very popular and gathered a lot of users. That was probably the first time the masses of people realized new user experience - application that works in browser, behaves similar to application on desktop. So, SPA opened a of new opportunities and abilities for software developers to release and promote their applications in web, which is in common case a much easier task, comparing to desktop applications. And new approach need to be taken to create such applications.<br />
    </p>    <h2>        API oriented architecture<br />
    </h2>    <p>        Before we jump into SPA details, let&#8217;s talk about the architecture that would allow to build apps in that way. Popularized by <a href="http://twitter.com/">Twitter</a> it&#8217;s being adopted by many vendors and became kind of default. We are talking about &#8216;API oriented&#8217; architecture.<br />
    </p>    <p>        Basically, it&#8217;s just a deviation of classical &#8216;Server-client&#8217;, where we have server that provides an open API.. and where client is browser, powered by JavaScript engine.<br />
    </p>    <p>        It&#8217;s quite typically that server and client are communicating through HTTP, using JSON as payload format and relying on REST principles. I&#8217;m saying <i>typically</i>, since it&#8217;s not always the case. Some apps might takes XML and use RPC instead of REST, but that actually doesn&#8217;t really matter.<br />
    </p>    <p>        Client is browser, that runs JavaScript code. JavaScript code is requesting the data and updating the DOM. Few years ago, jQuery was the primary tool of making such applications. Nowadays, we see MV* JavaScript frameworks are gaining a lot of traction and simplifying front-end development. It&#8217;s not only about simplification, but also bringing the architecture principles on front-end, something that we haven&#8217;t seen earlier.<br />
    </p>    <h2>How to build Single Page applications?</h2>    <p>        We have a bunch of technologies, server and client that would allow to do that. ASP.NET MVC, Web API, NancyFX, ServiceStack, Express.js, RoR.. etc, on server and Backbone.js, Knockout.js, Angular.js, Marrionette.js, Durandal.js etc. from client.<br />
    </p>    <p>        It gives a lot of options, actually. All of them have their pro/cons. I&#8217;ve used to use ASP.NET MVC as platform to build open API&#8217;s and was quite happy with that. Nowadays, I&#8217;m using Node.js / Express.js and it works really great, as well.<br />
    </p>    <p>        The truth is, with SPA, the front-end technology plays a bit more significant role. Of course, server still performs important role for authorization, data access, business logic.. but in API oriented architecture is turns to be a kind of CRUD exposed through HTTP.<br />
    </p>    <p>        As for front-end, my experience lies in Backbone.js. Preventing the questions, I would say - Backbone.js is not perfect (as there are nothing perfect in this world). Bare Backbone.js app would require a lot of manual coding, but it would also allows to see some important implementation details that could be good for general SPA understanding.<br />
    </p>    <h2>Server architecture</h2>    <p>        Server is responsible for two principal things. First, it provides with API. Second, it server the master page (again, it&#8217;s not always the case, master.html could be places in some static resource server).<br />
    </p>    <p>        Master page, is the one that being rendered in browser should bring basic DOM structure + reference the JavaScript code to initialize and run application. That&#8217;s it.<br />
    </p>    <p>        As always, it&#8217;s important to think about scalability. Doesn&#8217;t matter what technology you pick up, it&#8217;s able to scale and hanlde more incoming request with given response time is vital.<br />
    </p>    <h2>Client architecture</h2>    <p>        Scalability is important here, as well. That&#8217;s a different scalability, though.<br />
    </p>    <p>        I liked the way <a href="https://twitter.com/derickbailey">Derick Bailey</a> stated in one of <a href="http://javascriptjabber.com/056-jsj-marionette-js-with-derick-bailey/">JavaScript Jabber</a> show:<br />
    </p>    <blockquote>        &#8230; scalability in this case is not the number of users running the code at any given time. Itâ€™s the number of features in the system, how those features interact, and how you can start up and shut down and do all these things with these different features so that your application can grow in size, grow in features, and grow in capabilities.<br />
    </blockquote>    <p>        That&#8217;s were there the JavaScript pattern, MV* frameworks are shine. And without simple modularity, it&#8217;s very hard to build scalable JavaScript applications.<br />
    </p>    <h2>Require.js and AMD</h2>    <p>        Modularity is important. Each module represents some small piece of application functionality. The problem that JavaScript (ES5, to be precise) doesn&#8217;t have modules as part of language.<br />
    </p>    <p>        Require.js helps to solve the problem. Instead of referencing hundreds of JavaScript files which expose itself to global namespace, Require.js relies on, so called, Asynchronous Module Definition. The special rules which you code have to follow, to be able to act as module and being loaded by request.<br />
    </p>    <p>        Besides of that, Require.js comes with building/optimization tools, that helps to prepare application to production.<br />
    </p>    <p>        So, the Master html has a reference to Require.js main file, which will be responsible for configuration and initialization of app. This typically includes setup of view state management (ViewManager) and routing (Backbone.Router).<br />
    </p>    <h2>Routing</h2>    <p>        Router, handles in-browser URL change events and notifies about that changes. <br />
    </p>    <p>        The URL change might appear of 2 things: user clicks some href or submits the form with re-direct. The SPA prevents those things. Instead, all <code>href</code> click are overloaded, so instead of performing GET request on given URL, JavaScript code would let router know that URL is changing. Router receives the message and using some route rules, call corresponding handler.<br />
    </p>    <p>        The handler job is to load the application and execute it.<br />
    </p>    <h2>Applications</h2>    <p>        Applications in terms of code, are simple objects with <code>run</code> (or <code>execute</code>) function.<br />
    </p>    <p>        The responsibility of application is to fetch all required data and intitialize application Main View. The Main view is then passed to a ViewManager, which is responsible to render it and attach to DOM.<br />
    </p>    <p>        Besides of that, application is also &#8216;logical&#8217; group of different modules with one goal. Imagine GMail application again - Contacts, Mails, Tasks are different applications. Each application, could have sub applications (with their own data and views).<br />
    </p>    <p>        The rule of thumb, one route one application.<br />
    </p>    <h2>        View Manager<br />
    </h2>    <p>        As it&#8217;s been mentioned about, View Manager is important part of SPA architecture.<br />
    </p>    <p>        It handles the aspects of switching one application (MainView) to another. So, the content of application div is cleared up and than updated with new one. In Backbone.js application, that is particularly important, since besides the DOM update View Manager is responsible to clear up unsubscribe all events that views might be subscribed to, to prevent, so called <a href="http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/">Zombie View</a> problem.<br />
    </p>    <h2>Main View and Subviews</h2>    <p>        Not trivial application could contain some complex UI. All complex UI is being divided on many smaller components.<br />
    </p>    <p>        MainView is responsible for whole application UI. It&#8217;s typical job to instantiate and render all required subviews. It also stores the references for all subviews into some internal data structure, so it&#8217;s been able to close all them, while main view is closed.<br />
    </p>    <h2>TheMailer - demo application</h2>    <p>        Here is <a href="https://github.com/alexanderbeletsky/themailer">TheMailer</a> - very simple application that implements all the ideas above. I&#8217;ve created that very quickly and I could not call it completed. At the backend it runs ASP.NET MVC/WebAPI and using Require.js + Backbone.js at front end.<br />
    </p>    <p>        It allows you to view and compose email, as well as some simple management of tasks and contacts. <br />
    </p>    <p>        Under the debugger, it is clear how the application is initialized and starting up, how MainView creates Subviews and how Routing and ViewManager works.<br />
    </p>    <h2>Conclusions</h2>    <p>        I would call it SPA bare bones. As I mentioned above, using pure Backbone.js is good, since Backbone.js contains all required components which any SPA need (most important it have Backbone.Router).<br />
    </p>    <p>        But I would recommended to check further. If you plan stick to Backbone.js, <a href="http://marionettejs.com/">Backbone.Marionette</a> by <a href="https://twitter.com/derickbailey">Derick Beiley</a> could be really nice option. For Google technologies fans, <a href="http://angularjs.org/">Angular.JS</a> makes a lot of sense. For ones that liked <a href="http://caliburnmicro.codeplex.com/">Caliburn.Micro</a> during WPF programming, could play with new framework <a href="http://durandaljs.com/">Durandal.js</a> by <a href="https://twitter.com/eisenbergeffect">Rob Eisenberg</a>.<br />
    </p>    <p>        SPA is a lot of fun and adventure, welcome in!<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Single Page Applications with Backbone.js and Express.js]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with.html"/>
    <updated>2013-04-24T06:11:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>This Saturday I was doing my first Backbone.js class. It went really fine, except one fact.<br />
</p><p>I wanted to show the aspects of creating Single Pages Application running on Backbone. Started the application from scratch, we had to spend a lot of time writing some infrastructure code before we even jump to Backbone. So, after the class I decided to create some boilerplate project, so next time we would just clone it from github and start to work.<br />
<!-- more -->
</p><p>That&#8217;s how the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> born.<br />
</p><h2>Backbone.js + Express.js SPA boilerplate</h2><p>The project is a <a href="http://expressjs.com/">Express.js</a> application using <a href="http://backbonejs.org/">Backbone.js</a> as front-end framework. The idea is you just simply clone it, remove non needed routes and application and build something on your own.<br />
</p><p>I won&#8217;t put to much details in a blog post, since <a href="https://github.com/alexanderbeletsky/backbone-express-spa">repo</a> neat readme section. Just several facts:<br />
</p><ul><li><strong>Minimal and simple</strong> - pure Backbone code, no plugins. For some real needs plugins are required anyway and you are free to include whatever you want.</li>
<li><strong>AMD modules with RequireJS</strong> - modularity is key factor for large-scale apps, <a href="http://requirejs.org/">RequireJS</a></li>
<li><strong>Concept of Application</strong> - to group all view, models, collection related to one application unit in one place.</li>
<li><strong>Handlebars template</strong> - using <a href="http://handlebarsjs.com/">Handlebars</a> as template engine.</li>
</ul><h2>Further work</h2><p>It&#8217;s not yet completely done. I want to create more meaningful app, show some layouts principles + prepare readme section of building application for production.<br />
</p><p>I&#8217;m also thinking of putting some examples of unit tests both for Express.js and Backbone.js.<br />
</p><h2>Conclusions</h2><p>Check the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> out. If you like it, please give some stars or shout in twitter. I would be really happy to see some pull requests for improving applications or infrastructure. So, if you want to join - you are welcome!<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Developer in JavaScript World]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/net-developer-in-javascript-world.html"/>
    <updated>2013-04-14T14:35:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/net-developer-in-javascript-world</id>
    <content type="html"><![CDATA[<div class='post'>
        <p>This is a subscript of lighting talk I did on <a href="http://www.odessajs.org.ua/">#odessajs</a> conference that took place 13 April in Odessa.<br />
</p><h2>The story</h2><p>Thinking about the things going on inside and around me I realized - I don&#8217;t do .NET development more than 1.5 years for now. It&#8217;s not the <a href="http://www.beletsky.net/2012/07/three-month-without-net-code.html">first time</a> I was thinking about that, but now it has a bit different perspective.<br />
</p><h2>WTH?</h2><p>I work in E-conomic company and about 2 years ago we decided to build new product. <br />
</p><p>Till that time we&#8217;ve learned hard few things: plain jQuery applications is mess, building new shinny product on out-dated infrastructure is bad idea.<br />
</p><p>So, we&#8217;ve started with front-end by choosing Backbone.js as our foundation, later on we&#8217;ve decided to switch our API server from .NET to Node.js.<br />
</p><p>It appears we got full JavaScript stack on that product and I involved in JavaScript more and more each day.<br />
<!-- more -->
</p><h2>I thought I know JavaScript</h2><p>That time I mistakenly thought, I can do JS programming. Sure, I understood jQuery selectors, concept of callback and even why we need &#8216;var me = this;&#8217; trick in code.<br />
</p><p>But the reality was a bit different. Now, listening to podcasts and reading some blogs, I understood that I&#8217;ve been to &#8216;classic&#8217; trap on C#/Java developer switching to JavaScript. Languages and frameworks requires time to learn.<br />
</p><h2>Long hard way of learning</h2><p>I had to spend the time to learn new stuff. I would say the best source of information was the code written by my <a href="https://github.com/e-conomic?tab=members">colleagues</a>. We have great team, so initially I were just reviewing the code following some patterns. I also spent time of peering famous OS projects like underscore and Backbone.js.<br />
</p><p>JavaScript  <a href="http://shop.oreilly.com/product/9780596517748.do">Good Parts</a>, opened my eyes on few important things as well.<br />
</p><p>There are 3 aspects that changed my mind on JavaScript.<br />
</p><h3>JavaScript is dynamic language</h3><p>Let&#8217;s be clear. If someone in 2003 tell me I&#8217;m going to program dynamic language and will be happy about, I would never believe that. I was programming C++ and truly believed in types. Types as I was thinking is only way to tackle complexity of software.<br />
</p><p>Even though, I still think about some advantages of static vs. dynamic languages, my opinion has changed radically.<br />
</p><p>Dynamic languages are great. I feel I more solve problems rather than designing types (or usually hierarchy of types). Consider that, instead of thinking about the name for next &#8220;ProxyAbstractFactoryManager&#8221; I&#8217;m writing functions that do stuff.<br />
</p><h3>Frictionless development</h3><p>I was compiling applications for whole my life. Just to run some simple thing I need to compile and link. It&#8217;s usually not a problem at all, but depends on project infrastructure it can take a lot of time. Sooner or later you start to hate builds.<br />
</p><p>With JavaScript application, you simply should run it. It starting fast so the gap between &#8220;write the line of code&#8221; and &#8220;check the results&#8221; became very small.<br />
</p><p>Instead of heavyweight IDE&#8217;s I became Sublime Text 2 user. After years in VS you simply could not understand how to write code without IntellySense. But practice shows it&#8217;s really possible. <br />
</p><h3>Node.js</h3><p>To be honest with you, I was very skeptical regarding Node.js initially. But again, practice showed different results. It&#8217;s been proved that Node.js is very suitable for our product. We are running API server on Node.js and it performs really nice.<br />
</p><p>Later I started to learn what Node.js platform offers and I was really surprised with it&#8217;s abilities.<br />
<p>CommonJS style of writing code started to make sense. Namespacing problem is solved, so you can build big applications there.<br />
</p><p>I have to add that Node.js is a significant Open Source player. Everything you get by npm is open source, you can check the sources if anything unclear. Most of Node.js modules are hosted in github, so even if you experience issues you can fix it.<br />
</p><script async class="speakerdeck-embed" data-id="8e251d9087200130c2401231381d5999" data-ratio="1.77777777777778" src="http://alexanderbeletsky.github.io//speakerdeck.com/assets/embed.js"></script><br />
<h2>Conclusions</h2><p>JavaScript is awesome. I like the experience of JavaScript programming so far. Whatever you do, front-end or back-end you stay in one &#8220;language context&#8221;. I would not call a huge problem, but usually context switching from one language to another can take something.<br />
</p><p>Picking up technology for next <a href="http://www.likeastore.com/">side-project</a> or quick hack I&#8217;m selecting JavaScript.<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Exploring collections. Part 2.]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/baby-steps-to-backbonejs-exploring.html"/>
    <updated>2013-04-10T20:53:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/baby-steps-to-backbonejs-exploring</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Backbone.js is event-driven framework. All Backbone entities are extended from <a href="http://backbonejs.org/#Events">Backbone.Event</a> object. That means, they are able to raise events, subscribers are able to listen to that events and act accordingly. Let&#8217;s take a look what type of event does Backbone.Collection have.<br />
    <!-- more -->
    </p>    <h2>Backbone.Collection events</h2>    <p>        Will have a test suite for that,<br />
    </p>    <pre class="brush: js">describe('collection events', function () {
    var listener;

    beforeEach(function () {
        collection = new FeedbackCollection();
    });

    beforeEach(function () {
        listener = jasmine.createSpy();
    });
    </pre>    <p>        Here we are creating collection for testing and Jasmine spy, special function we going to use as event subscriber.<br />
    </p>    <h3>Adding element to collection</h3>    <p>        As we saw <a href="http://www.beletsky.net/2013/03/baby-steps-to-backbonejs-exploring.html">previously</a> there are several ways of adding new elements to collection. By add and push methods. The important thing, does not matter what API method you use, Backbone.Collection would trigger &#8216;add&#8217; event.<br />
    </p>    <p>        By <code>add</code> method,<br />
    </p>    <pre class="brush: js">describe('while adding elements', function () {
    beforeEach(function () {
        collection.on('add', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it ('should raise add event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        By <code>push</code> method,<br />
    </p>    <pre class="brush: js">describe('while pusing elements', function () {
    beforeEach(function () {
        collection.on('add', listener);
    });

    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it ('should raise add event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        Each event handlers receives model itself and reference to collection.<br />
    </p>    <h3>Removing elements from collection</h3>    <p>        Similarly, there 2 ways of removing items from collection, by remove and pop methods.<br />
    </p>    <p>        By <code>remove</code> method,<br />
    </p>    <pre class="brush: js">describe('while removing items', function () {
    beforeEach(function () {
        collection.on('remove', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        var model = collection.get('feedback-1');
        collection.remove(model);
    });

    it ('should raise remove event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <p>        By <code>pop</code> method,<br />
    </p>    <pre class="brush: js">describe('while poping items', function () {
    beforeEach(function () {
        collection.on('remove', listener);
    });

    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        collection.pop();
    });

    it ('should raise remove event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <h3>Resetting and sorting</h3>    <p>        Besides just adding and removing stuff from collection, it have few more method which reaction is triggering event. It&#8217;s reset and sort. Reset is the bulk insert into collection, it works great when we fetch some data from server and want to push everything just by one operation. Sort, is rarely called manually, since if collection provides <code>comparator</code> function, it would sort itself, during add or reset operations. But sometimes sorting could be triggered from UI as user changes the sort column of table, for example.<br />
    </p>    <p>        Resetting collection,<br />
    </p>    <pre class="brush: js">describe('while reseting collection', function () {
    beforeEach(function () {
        collection.on('reset', listener);
    });

    beforeEach(function () {
        collection.reset([
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}]);
    });

    it('should raise reset event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
</pre>    <p>        Sorting collection,<br />
    </p>    <pre class="brush: js">describe('while sorting collection', function () {
    beforeEach(function () {
        collection.on('sort', listener);
    });

    beforeEach(function () {
        collection.reset([
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}]);
        collection.sort();
    });

    it('should raise sort event', function () {
        expect(listener).toHaveBeenCalled();
    });
});
    </pre>    <h2>Why it matters?</h2>    <p>        Knowing the events of all Backbone.js entities is very important. You should always design you application based on events triggering/subscription, instead of direct function call. That would make your code much de-coupled and UI logic very flexible.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Likeastore, Application Built on Hackathone]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/likeastore-application-built-on.html"/>
    <updated>2013-03-31T18:52:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/likeastore-application-built-on</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        It&#8217;s my <a href="http://www.beletsky.net/2011/06/hackatone-in-kiev-11-12-june.html">second time</a> I attended hackatone. As last time, it took place in Ciklum, the best office in Kiev, so I had very strong wish to visit it. My previous experience showed several things: hacktone is absolutely unpredicable thing, you can&#8217;t guess which projects will be popular or not.. and the second, that it&#8217;s hard to do something valuable alone.<br />
    </p>    <p>        So, this time I decided to build a team of guys I know and trust, so we can do something together. Those two guys appeared to be my colleagues, in @debitoor project <a href="https://github.com/voronianski">@voronianski</a> and <a href="https://github.com/mamant">@mamant</a>. We gathered together, to build a product which was called - &#8220;Likeastore&#8221;<br />
    <!-- more -->
    </p>    <h2>Idea behind</h2>    <p>        All of us having at least those 3 accounts: facebook, twitter and github. And all of those are continuous stream of information. If you have an interesting network, it probably produces interesting content so you do much of likes/favorites/stars (stories, tweets, or interesting gihub repos). The problem, it&#8217;s very difficult to keep this information ordered - you typically remember you heard something interesting, but could not remember the source of it.<br />
    </p>    <p>        &#8220;Likeastore&#8221; is aimed to fix this problem. Integrating wish different services it&#8217;s keeping your &#8220;likes&#8221; information in good order, with nice search and smart categorizing.<br />
    </p>    <img src="https://lh5.googleusercontent.com/-AaH9Nrnr54o/UVhZihO3yjI/AAAAAAAAR1Y/FhtHcOksuik/s988/login.png" style="width: 620px" alt="likeastore login screen"/><br />
    <h2>What we did?</h2>    <p>        We basically allow &#8220;Likeastore&#8221; to connect all those application by their open API and collect the information from it. We transform the information into something generic and grouping it together. So, the users are having all information up-to-date in nice and clear dashboard.<br />
    </p>    <p>        Originally we had ambition to have a kinda real-time. In the way, I favorited the tweet and &#8220;Likeastore&#8221; almost immediately got the information. We had to drop it. The reason is API&#8217;s of popular applications are very quoted. You simply cannot do more request that in quota, otherwise you just banned.<br />
    </p>    <p>        So, nethertheless of similar projects, we don&#8217;t want to make next social network of bookmarks. Instead, we want to build easy to use and powerful information keeper. Something, that help you to have things in order.<br />
    </p>    <img src="https://lh4.googleusercontent.com/-cHk7Pdbyus8/UVhZisS6e5I/AAAAAAAAR1g/-3uXVV28rL0/s988/setup.png" style="width: 620px" alt="likeastore setup screen"/><br />
    <h2>How we did it?</h2>    <p>        In fact, we&#8217;ve build a &#8220;thrown-out&#8221; prototype. The <a href="https://github.com/organizations/likeastore">code</a> is a shitty inside, so we bit far of nearest production. But, we&#8217;ve created an interesting application. We split on 2 + 1, two backend (me and <a href="https://github.com/voronianski">@voronianski</a>) and one front-end guy (<a href="https://github.com/mamant">@mamant</a>). Sat closely and worked shoulder-to-shoulder for next 22 hours. <br />
    </p>    <p>        From the very beginning I had very clear vision of stuff we need to do. I could imagine architecture and UI principles. And as soon I shared that the teammates accepted that really fine and provided high quality feedback and collaboration. That helped us to have a strong team in my perspective.<br />
    </p>    <p>        All of us are JS developers, so no doubt we&#8217;ve taken a JavaScript stack as default. Node.js, powered by Express.js at the backend and Backbone.js front end. Sometimes it&#8217;s tricky, but in fact - it&#8217;s powerful combination. <br />
    </p>    <h2>A bit of tech info</h2>    <p>        We are having 2 main architectural units: core and connectors. Core, is Express.js application having both serving static content and providing API. The API itself, consists on public and private parts. Public part is aimed our web client (or potentiall apps), where the private is used to communicated connectors.<br />
    </p>    <p>        Connectors are just very simple HTTP services, which perform the handshake with core and then post back all data they have collected through API&#8217;s. That means, we have 3 connectors now - twitter, github and facebook. Facebook, became a quite difficult to integrated with, so we currently dropped it.<br />
    </p>    <p>        We are having <a href="http://couchdb.apache.org/">CouchDB</a> as our storage. We took it, because <a href="https://github.com/voronianski">@voronianski</a> had some good experience with. That appeared to be a very lucky decision. CouchDB is very interesting NoSQL solution. It&#8217;s storage model has few interesting features. One of them is &#8220;merge-update&#8221;. Means, you can post exactly same set of information many times, but CouchDB would not create new entities. It would merge identical documents into one. That simplied connectors very much, since they no longer need to track only new information, but could post back just a transformed bulk of information from API&#8217;s.<br />
    </p>    <p>        Initially, we all agreed - our UI will never be default Bootstrap theme. It&#8217;s overused and impress no more as toilet door. That&#8217;s where <a href="https://github.com/mamant">@mamant</a> apply his best skills. He carefully worked all our screens making a it look nice and original. <br />
    </p>    <img src="https://lh3.googleusercontent.com/-XSXpDhEuX9Y/UVhZjLe7w6I/AAAAAAAAR1k/HI6xIJQnUXc/s988/dashboard.png" style="width: 620px" alt="likeastore dashboard screen"/><br />
    <h2>Presentation and feedback</h2>    <p>        Without few features we did demo-able version in time. We have concluded few major fixes, just before the deadline. <br />
    </p>    <p>        I did a presentation of app in short way, without anything unimportant (at least I wish to think so) and we had received great feedback. People liked the idea, so we&#8217;ve collected 32 voices that brought us 2nd place.<br />
    </p>    <p>        That gives a much of inspiration for further work! All of us are very enthusiastic to make the stuff done. It&#8217;s a lot of work, actually.<br />
    </p>    <p>        I just want to say thank you to all organizers of this event, it was nicely handled. And to the team, for making it fun and interesting.<br />
    </p>    <p>        Stay tuned for release of &#8220;Likeastore&#8221;, check out <a href="https://github.com/likeastore">sources</a> in a meanwhile.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Exploring collections]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/baby-steps-to-backbonejs-exploring.html"/>
    <updated>2013-03-27T17:51:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/baby-steps-to-backbonejs-exploring</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        After initial introduction to Backbone&#8217;s <a href="http://www.beletsky.net/2012/12/baby-steps-to-backbonejs-unit-testing.html">views</a> and <a href="http://www.beletsky.net/2012/11/baby-steps-to-backbonejs-unit-testing.html">models</a>, we going to look on next Backbone.js fundamental entity - <a href="http://backbonejs.org/#Collection">Collection</a>. Collections represents the ordered set of models and became very handy for any type of applications. Consider that, we almost always operate with set of different models: posts, tweets, news etc. all of that are collections, typically rendered as lists or grids.<br />
    <!-- more -->
    </p>    <p>        In small application we are doing through that series we have collection of feedbacks. But before I show how to integrate collection into the app, I want to make sure you understand all collection properties right. We&#8217;ll do that by TDD&#8217;ing the collection and exploring it&#8217;s behavior.<br />
    </p>    <h2>Collection construction</h2>    <p>        So, to create collection we need to extend <code>Backbone.Collection</code> object,<br />
    </p>    <pre class="brush: js">var FeedbackCollection = Backbone.Collection.extend({
    model: Feedback,
    url: '/feedback'
});
    </pre>    <p>        Here we just specified the URL for collection persistence and the model, of which the collection would consists of. Let&#8217;s prepare the test suite for collection stories,<br />
    </p>    <pre class="brush: js">describe('FeedbackCollection.js spec', function () {
    var collection;
});
    </pre>    <p>        And create our first specification,<br />
    </p>    <pre class="brush: js">describe('when constructing', function () {
    describe('just empty', function () {
        beforeEach(function () {
            collection = new FeedbackCollection();
        });

        it('should be created', function () {
            expect(collection).toBeDefined();
        });
    });
</pre>    <p>        Just to make sure, our definition is fine and we are able to instantiate new collection object.<br />
    </p>    <p>        <code>FeedbackCollection</code> constructor have few optional arguments - <code>models</code>, <code>options</code>. Models, could be either arrays of objects, or array of Backbone.Models. In case of object, collection constructor would &#8220;turn&#8221; them to models (taking the type we specified on collection definition) and add those models to collection. <br />
    </p>    <pre class="brush: js">describe('with objects', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be lenght of 2', function () {
        expect(collection.length).toBe(2);
    });

    it('should contain models inside', function () {
        expect(collection.models).toBeDefined();
    });
});
</pre>    <p>        or,<br />
    </p>    <pre class="brush: js">describe('with models', function () {
    beforeEach(function () {
        var models = [
            new Feedback({email: 'a@a.com', website: 'a.com', feedback: 'hello'}),
            new Feedback({email: 'b@b.com', website: 'b.com', feedback: 'good bye'})
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be lenght of 2', function () {
        expect(collection.length).toBe(2);
    });

    it('should contain models inside', function () {
        expect(collection.models).toBeDefined();
    });
});
</pre>    <p>        Both things are equivalent. Moreover, typically it&#8217;s only unit tests you need to initialize collections that way, so I usually prefer first option.<br />
    </p>    <p>        The <code>options</code> parameter, could contain the type of model that collection contain. So, if collection does not specify <code>model</code> property, <code>Backbone.Model</code> will be created by default.<br />
    </p>    <pre class="brush: js">describe('with options', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new Backbone.Collection(models);   // not specifying model
    });

    it('should be created', function () {
        expect(collection).toBeDefined();
    });

    it('should have models of Backbone.Model type', function () {
        expect(collection.models[0].constructor).toBe(Backbone.Model);
    });
</pre>    <p>        You can override that by passing <code>{model: MyModel}</code> options object,<br />
    </p>    <pre class="brush: js">describe('while passing model option', function () {
    beforeEach(function () {
        var models = [
            {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new Backbone.Collection(models, { model: Feedback });
    });

    it('should have models of Feedback type', function () {
        expect(collection.models[0].constructor).toBe(Feedback);
    });
});
</pre>    <p>        Despite of that possibility I really rare use that in practice. It&#8217;s better to simply specify model type in collection definition, that makes code easy to understand.<br />
    </p>    <h2>Accessing collection elements</h2>    <p>        After collection has been constructed, it&#8217;s possible to access internal models. There are several ways of doing that.<br />
    </p>    <p>        The simplest one is by index,<br />
    </p>    <pre class="brush: js">describe('when accessing collection elements', function () {
    var first, second, models;

    describe('by index', function () {
        beforeEach(function () {
            models = [
                {email: 'a@a.com', website: 'a.com', feedback: 'hello'},
                {email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
            ];
            collection = new FeedbackCollection(models);
        });

        beforeEach(function () {
            first = collection.at(0);
            second = collection.at(1);
        });

        it('should get first model by index', function () {
            expect(first.toJSON()).toEqual(models[0]);
        });

        it('should get second model by index', function () {
            expect(second.toJSON()).toEqual(models[1]);
        });
    });
</pre>    <p>        Even it possible, in real apps you probably don&#8217;t know the index of model you need to get from collection, since they might come from server in unpredictable order. So, instead of index, getting by id is more appropriate way.<br />
    </p>    <pre class="brush: js">describe('by id', function () {
    beforeEach(function () {
        models = [
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    beforeEach(function () {
        first = collection.get('feedback-1');
        second = collection.get('feedback-2');
    });

    it('should get first model by id', function () {
        expect(first.toJSON()).toEqual(models[0]);
    });

    it('should get second model by id', function () {
        expect(second.toJSON()).toEqual(models[1]);
    });
});
</pre>    <p>        And finally, something that I being trapped many time while starting up with Backbone - indexers on collection, does not work.<br />
    </p>    <pre class="brush: js">describe('indexer does not work', function () {
    beforeEach(function () {
        models = [
            {id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'},
            {id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}
        ];
        collection = new FeedbackCollection(models);
    });

    it('should be undefined', function () {
        expect(collection[0]).not.toBeDefined();
    });
});
</pre>    <h2>Adding and removing items</h2>    <p>        Next, we need to understand to how to add and remove items from collections.<br />
    </p>    <p>        There are 2 ways of adding item into backbone collection: <code>add</code>, <code>push</code>. They are very similar, but there are difference between those. The add method takes a model or array of models and the options you can specify the position there the item should be interred to. Push method, would simply add new item to the end of collection.<br />
    </p>    <pre class="brush: js">describe('by add method', function () {
    beforeEach(function () {
        collection.add({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it('should be added', function () {
        expect(collection.get('feedback-1')).toBeDefined();
    });

    it('should be converted to model', function () {
        expect(collection.get('feedback-1').constructor).toBe(Feedback);
    });

    describe('with index specified', function () {
        beforeEach(function () {
            collection.add({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'}, {at: 0});
        });

        it('should have 2 items in collection', function () {
            expect(collection.length).toBe(2);
        });

        it('should have feedback-2 item at index 0', function () {
            expect(collection.at(0).id).toBe('feedback-2');
        });
    });
});
</pre>    <p>        By push,<br />
    </p>    <pre class="brush: js">describe('by push method', function () {
    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
    });

    it('should be added', function () {
        expect(collection.get('feedback-1')).toBeDefined();
    });

    it('should be converted to model', function () {
        expect(collection.get('feedback-1').constructor).toBe(Feedback);
    });

    describe('with next push', function () {
        beforeEach(function () {
            collection.push({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'});
        });

        it('should have 2 items in collection', function () {
            expect(collection.length).toBe(2);
        });

        it('should have feedback-1 item at index 0', function () {
            expect(collection.at(0).id).toBe('feedback-1');
        });
    });
});
</pre>    <p>        Please note, that <code>push</code> recieves the same options as <code>add</code>, but it&#8217;s just a short-cut for <code>add</code> method (take a look how it&#8217;s <a href="https://github.com/documentcloud/backbone/blob/master/backbone.js#L747">implemented</a>, to make it completely clear)<br />
    </p>    <p>        For removing the items, we also have 2 methods: <code>remove</code>, <code>pop</code>. They are opposite symmetrical to the <code>add</code>, <code>push</code>. Remove, removes specified model from collection, pop removes the last model in collection. This is shown by following specification,<br />
    </p>    <pre class="brush: js">describe('when removing items', function () {
    beforeEach(function () {
        collection = new FeedbackCollection();
    });

    beforeEach(function () {
        collection.push({id: 'feedback-1', email: 'a@a.com', website: 'a.com', feedback: 'hello'});
        collection.push({id: 'feedback-2', email: 'b@b.com', website: 'b.com', feedback: 'good bye'});
    });

    describe('by remove method', function () {
        beforeEach(function () {
            var model = collection.get('feedback-1');
            collection.remove(model);
        });

        it('should be removed', function () {
            expect(collection.get('feedback-1')).not.toBeDefined();
        });
    });

    describe('by pop method', function () {
        beforeEach(function () {
            collection.pop();
        });

        it('should be removed', function () {
            expect(collection.get('feedback-2')).not.toBeDefined();
        });
    });
});
</pre>    <h2>Conclusions</h2>    <p>        We&#8217;ve just gone for a very basic features of Backbone.Collection type. Next time, we&#8217;ll explore more about collections as events it produces, fetching and persisting data to server.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third Year of E-conomic]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/03/third-year-of-e-conomic.html"/>
    <updated>2013-03-13T20:29:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/03/third-year-of-e-conomic</id>
    <content type="html"><![CDATA[<div class='post'>
<p>That&#8217;s my traditional post on yet another anniversary in <a href="http://www.e-conomic.com/">E-conomic</a> company. Even thought, I still work there, this year I&#8217;ve heard a bit less of <a href="http://www.e-conomic.com/">E-conomic</a> but more about <a href="https://debitoor.com/">Debitoor</a> instead. Debitoor is very cool product me and <a href="https://debitoor.com/about/the-team">my team</a> is working on and I was totally focused on that during this year.<br />
	<!-- more -->
    </p>    <p>        So, what&#8217;s interesting about? Alright, it begins with <a href="http://www.e-conomic.com/">E-conomic</a> company, which through about 10 years on market gathered huge experience in online accounting. The primary target audience for all that years were professional accounters and administrators that have pretty solid knowledge what the accounting is. But due influence of internet economy and small-business grow there appeared high demand on simple accounting software, that could be easily understood even for non-professional accounters. That&#8217;s were we saw the opportunity. That&#8217;s then the <a href="https://debitoor.com/">Debitoor</a> born.<br />
    </p>    <p>        Technologically it&#8217;s been very innovative for us, too. As I <a href="http://www.beletsky.net/2012/03/second-year-of-e-conomic.html">wrote</a> last year, the March was the month we tried how good different technologies might work for us. The decision were taking up to full JavaScript stack - <a href="http://nodejs.org/">node.js</a> and <a href="http://www.mongodb.org/">MongoDB</a> as backend, <a href="http://backbonejs.org/">Backbone.js</a> as front end technologies.<br />
    </p>    <p>        So, near the April we have a working product running .NET + MSSQL, that was on production and customers started to use, we decided to switch backend from .NET to Node.js. The HTTP API interfaces were &#8220;copied&#8221; from ASP.NET MVC implementation to exactly the same but on Express.js. The difference was in the way how ASP.NET MVC and Express.js is serving the HTML responses, so we have to re-desing the way how front-end application is being initialized and started. Since the low coupling of our front end to ASP.NET features, the rest of Backbone.js application remained absolutely the same.<br />
    </p>    <p>        All existing data has been exported to JSON files and been imported to MongoDB through the existing API. That gave us a chance to make some performance measuring and we definitely we happy about. Average HTTP request were handled in ~100ms that was a quite big boost comparing to previous platform.<br />
    </p>    <p>        Front-end is being involved as well. We&#8217;ve been switched to Single Page Application (SPA) architecture client side and there is no way back. With Node.js backend we easily moved application to cloud, all static resources to CloudFront that affected initial load time as a result made application to look and feel incredibly fast.<br />
    </p>    <p>        But the most important is - users love it! We&#8217;ve got plenty of sign-ups during the day, from different countries as Germany, Spain, Great Britain, Columbia etc., recently we&#8217;ve started premium campaign, and the premium users joins us. UI/UX are tweeked all the time, based on future application vision and A/B tests.<br />
    </p>    <p>        All that makes me feel - your work is important and you do something valuable.. and that is exactly what keeps me working on <a href="http://www.e-conomic.com/">E-conomic</a>. It&#8217;s interesting and make sense - that&#8217;s all I need.        <br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking back to 2012]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/01/looking-back-to-2012.html"/>
    <updated>2013-01-05T17:25:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/01/looking-back-to-2012</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        It&#8217;s the first Saturday of New Year, so it would be good idea to spend some time thinking of year that passed.<br />
    </p>    <h2>Work in e-conomic</h2>    <p>        That was yet another great year in e-conomic. We have build great app - <a href="https://debitoor.com/">Debitoor</a>. Along the way, we were trying different approaches, re-writing things from scratch, designing and re-designing again and again. Finally we got very solid application built upon Node.js, MongoDB and Backbone.js. Debitoor has been created with scalability in mind, we started with Heroku cloud service, eventually moved to Amazon EC for back-end and Amazon Cloud Front for front-end. Now, it&#8217;s working amazingly fast and for 8 month we gathered ~20,000 signups, launched service for many countries.<br />
    <!-- more -->
    </p>    <p>        At the beginning of the year we were a bunch of .NET developers diving into JavaScript. Having a very strong team of responsible professionals we&#8217;ve gathered initial knowledge quite fast. I&#8217;ve been focused almost at front-end this year. You probably noticed that I slowed down my writings about <a href="http://www.beletsky.net/search/label/asp.net">ASP.NET MVC</a> and doing more for <a href="http://www.beletsky.net/search/label/Backbone.js">Backbone.js</a>. That just reflects the fact of my current specialization. Initially, I was not very serious about Node.js platform. But with time, I became to love it. It speed up our development velocity several times, the API we&#8217;ve built on this platform shows amazing performance indicators.<br />
    </p>    <p>        The team has been expanded a bit. We got new very strong PO and few developers both in Ukraine and Denmark and all of those guys are awesome. I enjoy friendly and cooperative environment we have in team. Besides of that, this year we got 2 QA guys. QA influenced the development really much and helped to improve overall quality of service. I would also mention amazing UX team we have, calling themselves &#8220;UX Wizards Team&#8221; I have to admit - we are really doing magically things. UI/UX of app is changing all the time and with each iteration it became more intuitive, comprehensive and good looking.<br />
    </p>    <h2>Speaking and blogging</h2>    <p>        For 2012 and have written 63 blog posts on various topics, primarily on .NET, JavaScript and TDD. Some stats, from Google Analytics:<br />
    </p>    <p>        I don&#8217;t track GA stats actively and I was really surprised to see the figures. I got 105,490 visits, 79,445 unique visits. That gives 288% more traffic than <a href="http://www.beletsky.net/2011/12/retrospective-2011.html">2011</a>. That&#8217;s quite big number and I could only hope that this year the traffic would only grow up.<br />
    </p>    <p>        As for most viewed blog posts:<br />
    </p>    <ul>        <li><a href="http://www.beletsky.net/2012/04/new-in-aspnet-mvc4-razor-changes.html">New in ASP.NET MVC4: Razor changes</a> where I highlighted some new stuff of ASP.NET MVC 4 and it&#8217;s been tweeted by <a href="http://weblogs.asp.net/scottgu/">@scottgu</a> (what explains it&#8217;s popularity).</li>
        <li><a href="http://www.beletsky.net/2012/02/new-tools-in-my-tdd-arsenal.html">New Tools in My TDD Arsenal</a> I posted about stuff I used in .NET development like NCrunch, NSubstitute and FluentAssertions.<br />
        </li>
        <li><a href="http://www.beletsky.net/2012/06/starting-up-nodejs-development-on.html">Starting Up Node.js Development on Windows</a> as quick introduction to setup Node.js development environment on Windows box.</li>
    </ul>    <p>        Something that I personally liked the most:<br />
    </p>    <ul>        <li><a href="http://www.beletsky.net/2012/01/convention-based-ioc-configuration.html">Convention based IoC configuration</a> convention over configuration principles applied to IoC.</li>
        <li><a href="http://www.beletsky.net/2012/06/7-weeks-with-python.html">7 Weeks With Python</a> my little journey with Python language during Audacity CS101 course.</li>
        <li><a href="http://www.beletsky.net/2012/08/developing-web-applications-faster.html">Developing Web Applications Faster</a> that shows how to apply LiveReload technique to working faster with front-end tasks.<br />
        </li>
    </ul>    <p>        As I said above my focus moved from .NET to JavaScript a bit. I&#8217;ve started a series of blog posts called <a href="http://www.beletsky.net/search/label/BabyStepsBackbone">Baby steps to Backbone.js</a>, I&#8217;m learning JavaScript and other front-end frameworks, so I would say more info about JavaScript to come.<br />
    </p>    <p>        As for speaking, I&#8217;ve prepared 10 <a href="https://speakerdeck.com/alexanderbeletsky">presentations</a> during 2012 and had nearly 15 speeches on different events. That&#8217;s not a lot, but it&#8217;s much more that 2011 and I feel good about it.<br />
    </p>    <h2>Trainings and Consulting</h2>    <p>        Our <a href="http://xpinjection.com/trainings/tdd-in-net/">TDD in .NET</a> training became very popular. We did a quite of the through the year. It goes very fine and thanks to <a href="http://xpinjection.com/">XP Injection</a> efforts I could only predict more to come. I also did a training on <a href="">ASP.NET MVC</a> which went quite fine, but very small demand could be seen on that. I hope that 2013 will bring some more trainings in JavaScript as well.<br />
    </p>    <p>        In 2012 I&#8217;ve tried myself as a consultant. I&#8217;ve been contacted by the guy who listened to my <a href="https://speakerdeck.com/alexanderbeletsky/large-scale-javascript-applications">JavaScript talk</a> and asked to help with architectural advices on new service he tries to build. I think that was very good experience for both of us. Of cause, that&#8217;s just a tiny job but I hope that consulting could work for me in future.<br />
    </p>    <p>        I believe that 2012 was just the beginning of Trainings & Consulting part of my duties and 2013 will be the one to prove it.<br />
    </p>    <h2>Communities</h2>    <p>        <a href="http://www.facebook.com/groups/574355212591240/">Kyiv Beer&#8217;N&#8217;Code</a> is something that I personally happy about. Being relauched in September 2012, we haven&#8217;t missed any meet up. Taking into account it&#8217;s bi-weekly meetings that&#8217;s a lot. New guys, who joined the group are open minded and smart, so it&#8217;s always interesting to spend time there. I would like to have say big thanks to <a href="">Ciklum</a> company, who provides a support for us.<br />
    </p>    <p>        <a href="http://xpinjection.com/uadevclub/">UA Dev Club</a> is growing and growing. Each meeting gathers more and people and it&#8217;s great. I did a few talks there I try to attend as more meetings as I can (even if they are talking about Java). UA Dev Club became very active this year and I wish it only improves in 2013.<br />
    </p>    <p>        <a href="http://kievalt.net/">Kiev ALT.NET</a> in opposite a little slowed down this year. Primarily, because it&#8217;s leader moved to another city, so it became difficult to manage the stuff. Nevertheless, we&#8217;ve organized very cool meetup at the end of year with Jimmy Bogard and it motivated us to go on. We already have planned few meetings ahead and expecting more interesting foreign guests to come. Besides of that, <a href="http://www.jetbrains.com/">JetBrains</a> might be the one who can help us this year.<br />
    </p>    <h2>Side projects</h2>    <p>        The last topic in my list that makes me a bit sad. I have to admit, I haven&#8217;t produced anything really noticeable through the year. My problem is that I&#8217;m starting few projects and none of them could make done. Simply lacking the energy and motivation to accomplish it. I believe that &#8220;Less is more&#8221; should be my slogan for 2013.<br />
    </p>    <p>        Some new projects appeared in my github profile in 2012:<br />
    </p>    <ul>        <li><a href="https://github.com/alexanderbeletsky/wonka">Wonka</a> - supposed to be a blogging engine based on github with easy integration to ASP.NET MVC applications. I had some designs and ideas of implementing it, but it&#8217;s still in very early stage.</li>
        <li><a href="https://github.com/alexanderbeletsky/aspnet.mobile">ASP.NET Mobile</a> - small project that I&#8217;ve completed during preparation to the conference. It launched on AppHabor at <a href="http://aspnetmobile.apphb.com/">http://aspnetmobile.apphb.com/</a>, but the traffic is very low there.<br />
        </li>
        <li><a href="https://github.com/alexanderbeletsky/foundstyles">FoundStyles</a> - while my playing with Foundation framework I&#8217;ve decided to build small site to keep gallery of themes there, so <a href="http://foundstyles.com/">http://foundstyles.com/</a> was born. I&#8217;ve created only 3 and after left it. But, currently it has about 300 visits per day and it make sense to update the project. It would be easier, since Foundation moved to SASS.</li>
        <li><a href="https://github.com/alexanderbeletsky/freeze">Freeze</a> - small utility project to make a snapshots of dynamic web sites. Originally I&#8217;ve created it to make a snapshot of Kyiv Beer && Code site and place it to github. I&#8217;ve spent some time on that and it&#8217;s not yet done (as well as Kyiv Beer && Code site is not moved).</li>
        <li><a href="https://github.com/alexanderbeletsky/github-fs.net">GithubFS.net</a> - using Github remote repository as local file system project. It&#8217;s on really early development stage, but has some documentation describing ideas. And, it&#8217;s not done as well.</li>
        <li><a href="https://github.com/alexanderbeletsky/benchmark-js">Benchmark-js</a> - tiny library for measuring JS execution time and putting that to log. Works both Node.js and browser.</li>
        <li><a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone Computed.Fields</a> - something that I personally happy with. Started as some code I&#8217;ve created for debitoor it moved as stand alone Backbone.js plugin.</li>
    </ul>    <p>        If you reading this and those projects looks interesting to you, so you would like to pick that up - please let me know.<br />
    </p>    <p>        Something that I has started in 2011 and feel most shame for is <a href="https://github.com/alexanderbeletsky/candidate">Candidate</a>. Being <a href="http://www.beletsky.net/2012/08/re-thinking-candidate-application.html">restarted</a> this year I had big ambitions to actually make it done. I still want to implement some meaningful product for .NET web applications deployment. And Candidate would probably be my focus at the beginning of 2013.<br />
    </p>    <h2>Conclusions</h2>    <p>        Despite of side-projects failure, 2012 was a good year. 2013 is the year of Python that means it would bring happy coding time for all the developers. Happy New Year!<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Backbone.ComputedFields]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/12/introducing-backbonecomputedfields.html"/>
    <updated>2012-12-25T22:28:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/12/introducing-backbonecomputedfields</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Recently, I&#8217;ve been working on small project which I want to share here. It&#8217;s called <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> and it&#8217;s small plugin that extends Backbone.Model functionality a bit.<br />
    </p>    <p>        I needed to have a model with &#8216;virtual&#8217; fields. Namely, fields that does not belong to model directly, but being computed based on some other fields values.<br />
    <!-- more -->
    </p>    <p>        The easiest solution would be simply introduce some model methods, say <code>model.getComputedField() / model.setComputedField()</code> and store the value inside the model object. But that turns out to be bad idea, for several reasons. First, we are breaking usual Backbone interface for getting and setting values - <code>model.get('computed') / model.set('computed', 100)</code>. Also, if model is binded to a view, we are responsible for raising events manually, in case of computed or depended field changing.<br />
    </p>    <p>        So, after few iterations <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> was born. The design goals: to be simple, to be declarative, to be friendly to model binding (read, respect the events).<br />
    </p>    <h2>Use cases</h2>    <p>        Typical use cases for <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> are: calculating the prices; concatenating several fields; encapsulating the logic of retrieving object by reference.<br />
    </p>    <p>        It&#8217;s fairly important, that computed field could change. Based on it&#8217;s value, dependent fields should be updated.<br />
    </p>    <h2>Examples</h2>    <p>        Let&#8217;s take a look on few examples. The models here are very simplified. But, it shows the main application of <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a>.<br />
    </p>    <h3>Calculating prices</h3>    <p>        The model represents the product, which contains net price and VAT rate.<br />
    </p>    <pre class="brush: js">var Produc = Backbone.Model.extend({
    initialize: function () {
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        grossPrice: {
            depends: ['netPrice', 'vatRate'],
            get: function (fields) {
                return fields.netPrice * (1 + fields.vatRate / 100);
            },
            set: function (value, fields) {
                fields.netPrice = value / (1 + fields.vatRate / 100);
            }
        }
    }
});
</pre>    <p>        So, we have <code>grossPrice</code> as computed field. That field depends on &#8216;netPrice&#8217; and &#8216;vatRate&#8217; and being calculated by simple formulas.<br />
    </p>    <pre class="brush: js">var product = new Product({ netPrice: 100, vatRate: 20 });
var grossPrice = product.get('grossPrice');
    </pre>    <p>        In this case, gross price would be 120.<br />
    </p>    <pre class="brush: js">product.set({grossPrice: 300});
var netPrice = product.get('netPrice');
</pre>    <p>        After gross price is update, netPrice will be recalculated and netPrice will be 250.<br />
    </p>    <h3>Concatenating fields</h3>    <p>        Let&#8217;s have a model to represent the person with first name and last name.<br />
    </p>    <pre class="brush: js">var Person = Backbone.Model.extend({
    initialize: function () {
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        fullName: {
            depends: ['firstName', 'lastName'],
            get: function (fields) {
                return fields.firstName + ' ' + fields.lastName;
            }
        }
    }
});
</pre>    <p>        I&#8217;m skipping the setter cause we don&#8217;t need to set full name here.<br />
    </p>    <pre class="brush: js">var person = new Person({firstName: 'Alexander', lastName: 'Beletsky'});
var fullName = person.get('fullName');
</pre>    <p>        Full name &#8216;Alexander Beletsky&#8217; is returned here.<br />
    </p>    <h3>Referenced objects</h3>    <p>        Sometimes we have a models that only contains a reference to another model. All the time, we need to get referenced object we have to create some piece of code, which it typically copy-n-pasted thought the code base. Computed field could be a good idea to encapsulate that.<br />
    </p>    <pre class="brush: js">var Invoice = Backbone.Model.extend({
    initialize: function (attrs, options) {
        this.customers = options.customers;
        this.computedFields = new Backbone.ComputedFields(this);
    },

    computed: {
        customer: {
            depends: ['customerId'],
            get: function (fields) {
                return fields.customerId && this.customers.get(fields.customerId);
            },
            set: function(customer, fields) {
                fields.customerId = customer.get('id');
            }
        }
    }
});
</pre>    <p>        Here we have customer field, which is computed. <br />
    </p>    <pre class="brush: js">var invoice = new Invoice({}, { customers: collectionOfCustomers });
var customer = invoice.get('customer');
</pre>    <p>        So, I&#8217;m able to get customer model even if invoice is just holding the invoice Id. <br />
    </p>    <pre class="brush: js">invoice.set({customer: anotherCustomer});
var customerId = invoice.get('customerId');
    </pre>    <p>        If I&#8217;m changing the customer of invoice, the &#8216;customerId&#8217; would be initialized with id of &#8216;anotherCustomer&#8217;.<br />
    </p>    <h2>Conclusions</h2>    <p>        <a href="https://github.com/alexanderbeletsky/backbone.computedfields">Backbone.ComputedFields</a> is still pre-mature, but I already successfully used that in one of projects. The github page contains pretty much documentation, so you should have to problems of adopting it for personal needs.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Unit testing of views]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/12/baby-steps-to-backbonejs-unit-testing.html"/>
    <updated>2012-12-19T21:52:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/12/baby-steps-to-backbonejs-unit-testing</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>Previous time, we&#8217;ve implemented a Backbone model and wrote some meaningful tests for it.<br />
</p><p>Next very important Backbone&#8217;s entry to test is View.<br />
</p><p>Views are central concept in framework. Views are actually ones who do stuff. We don&#8217;t have Controller in Backbone, but according to Controller <a href="http://www.itu.dk/courses/VOP/E2005/VOP2005E/8_mvc_krasner_and_pope.pdf">initial idea</a> as user input handler, Backbone views following exactly the same architectural goal, so they could be treaded as controllers in some way. <br />
</p><h2>What to test?</h2><p>You should focus on such things: <br />
</p><ul><li><strong>Initialization</strong> - test that view is provided with all required inputs like: model or collection, localization texts, different options. If view is not able, say, render without some option, you should test that exception is thrown.</li>
<li><strong>Rendering </strong> - test that required html appeared in view. I do not create those very strict, since they would be to fragile in case of markup changes, but still I check for major DOM elements are present and have right styles.</li>
<li><strong>Events</strong> - test that view is correctly handle DOM events.</li>
<li><strong>Model changes and persistence</strong> - test that changes in view are correctly propagated in model. If view is about to persist the model, that could tested as well.</li>
</ul><p>I see tests of views as kind of integration test. You communicate to DOM, listening to events, updating models or changing DOM elements state. It&#8217;s typically that view tests are catching most regression issues.<br />
</p><h2>How to test?</h2><p>Fortunately, the Backbone views are designed in very testable way. You don&#8217;t need any special HTML on test page, since view holding all it&#8217;s DOM structure inside <code>this.el</code>. By means of jQuery, it&#8217;s easy to change DOM values or trigger events.<br />
</p><p>Since view also holds reference to model, it&#8217;s easy to check model&#8217;s attributes changes or spying on particular models methods.<br />
</p><p>First red test,<br />
</p><pre class="brush: js">describe('FeedbackFormView.js spec', function () {
    var view, model;

    beforeEach(function () {
        view = new FeedbackFormView();
    });

    describe('when view is constructing', function () {

        it ('should exist', function () {
            expect(view).toBeDefined();
        });

    });
    </pre><p>Here we basically testing, that FeedbackFormView should exist, so as soon as function is in place, test should be green.<br />
</p><p>FeedbackFormView could not exist without a model as well as default feedback text, that should be used as initial value of textbox. In the language of TDD, that means:<br />
</p><pre class="brush: js">describe('when view is initialized', function () {

    describe('without model', function () {

        it('should throw exception', function () {
            expect(function () {
                new FeedbackFormView();
            }).toThrow(new Error('model is required'));
        });

    });

    describe('without default feedback', function () {
            
        it('should throw exception', function () {
            expect(function () {
                new FeedbackFormView({model: new Backbone.Model() });
            }).toThrow(new Error('feedback is required'));
        });
    });

});
    </pre><p>To turn from Red to Green, let&#8217;s add <code>initialize</code> function to view,<br />
</p><pre class="brush: js">initialize: function (options) {

    if (!this.model) {
        throw new Error('model is required');
    }

    if (!(options && options.feedback)) {
        throw new Error('feedback is required');
    }

    this.feedback = options.feedback;
},
    </pre><p>Btw, after that change it&#8217;s required to fix previous test, since it start to fail.<br />
</p><pre class="brush: js">describe('FeedbackFormView.js spec', function () {
    var view, model;

    beforeEach(function () {
        view = new FeedbackFormView({model: new Feedback(), feedback: 'TDD is awesome..' });
    });

    describe('when view is constructing', function () {

        it ('should exist', function () {
            expect(view).toBeDefined();
        });

    });
    </pre><p>Now, let&#8217;s test how rendering works.<br />
</p><pre class="brush: js">describe('when view is rendered', function () {

    beforeEach(function () {
        view.render();
    });

    it ('should email field be empty', function () {
        expect(view.$el.find('input#email')).toHaveValue('');
    });

    it ('should website field be empty', function () {
        expect(view.$el.find('input#website')).toHaveValue('');
    });

    it ('should feedback field with default feedback', function () {
        expect(view.$el.find('textarea#feedback')).toHaveValue('TDD is awesome..');
    });

});
</pre><p>Here and after I&#8217;m using very nice Jasmine plugin, called <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a>. It adds a number of matchers, very useful for testing jQuery objects.<br />
</p><p>We&#8217;ve tested initialization and rendering, now let&#8217;s test last aspect, model changes and persistence.<br />
</p><p>Suppose a user inputs nothing, erases default feedback and presses submit button. Expected behavior is expressed with this test:<br />
</p><pre class="brush: js">describe('when form is submitted', function () {

    describe('no inputs are filled', function () {

        beforeEach(function () {
            view.$el.find('#email').val('').trigger('change');
            view.$el.find('#feedback').val('').trigger('change');
        });

        beforeEach(function () {
            view.$el.find('#submit').trigger('click');
        });

        it('email field should be invalidated', function () {
            expect(view.$el.find('.control-group.email')).toHaveClass('error');
        });

        it('feedback field should be invalidated', function () {
            expect(view.$el.find('.control-group.feedback')).toHaveClass('error');
        });

        it('website field should be valid', function () {
            expect(view.$el.find('.control-group.website')).not.toHaveClass('error');
        });

    });
</pre><p>That&#8217;s cool. After those tests are passing, we can test that if only email is filled, but feedback is still empty, we are not able to submit the form. By analogy of previous test,<br />
</p><pre class="brush: js">describe('only email field filled', function () {

    beforeEach(function () {
        view.$el.find('#email').val('a@a.com').trigger('change');
        view.$el.find('#feedback').val('').trigger('change');
    });

    beforeEach(function () {
        view.$el.find('#submit').trigger('click');
    });

    it('email field should be valid', function () {
        expect(view.$el.find('.control-group.email')).not.toHaveClass('error');
    });

    it('feedback field should be invalidated', function () {
        expect(view.$el.find('.control-group.feedback')).toHaveClass('error');
    });

    it('website field should be valid', function () {
        expect(view.$el.find('.control-group.website')).not.toHaveClass('error');
    });

});
</pre><p>And finally, if view is filled correctly,<br />
</p><pre class="brush: js">describe('email and feedback filled', function () {

    beforeEach(function () {
        spyOn(view.model, 'save').andCallThrough();
    });

    beforeEach(function () {
        view.$el.find('#email').val('a@a.com').trigger('change');
        view.$el.find('#feedback').val('some feedback').trigger('change');
    });

    beforeEach(function () {
        view.$el.find('#submit').trigger('click');
    });

    it('should show no errors', function () {
        expect(view.$el.find('.error').length).toBe(0);
    });

    it('should save model', function () {
        expect(view.model.save).toHaveBeenCalled();
    });

});
</pre><p>Here, we test 2 things: first, that no validation errors appeared on form and second that <code>save</code> method of model is called. Jasmine built-in spy framework is used here. You can setup on any function of any object and then verify that function has (or has not) been called.<br />
</p><p>I&#8217;m skipping the implementation of that view, but you can find the code of application in <a href="https://gist.github.com/4330928">gist</a>.<br />
</p><h2>Conclusions</h2><p>While you typically start with defining and testing models in your application, view is integration test that helps to test actual behavior of application, depending on model states and events. You should define how &#8220;deep&#8221; you want to test the view, but my proposal is to focus on initialization, rendering, changes (validation) and persistence.<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospective of Trackyt.net or Best Project I Ever Accomplished]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/12/retrospective-of-trackytnet-or-best.html"/>
    <updated>2012-12-01T16:11:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/12/retrospective-of-trackytnet-or-best</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        It&#8217;s been to years ago, I&#8217;ve <a href="http://www.beletsky.net/2010/11/ive-release-my-own-product-trackytnet.html">released</a> my own project - Trackyt.net. Month ago I&#8217;ve cancelled my VPS lease contract, so your would not see it available at <a href="http://trackyt.net">http://trackyt.net</a> anymore.<br />
    </p>    <p>        This project is first attempt to release something. I had some pet projects before, but never ever made them done. Trackyt.net started as simple application to learn some JavaScript programming and HTML. It turns out to be much, much, much more. Even it seems to be very simple, but I&#8217;ve spent a lot of energy on it.<br />
    </p>    <a href="https://lh6.googleusercontent.com/-C1oDnTeZXIY/ULoMUOx3XPI/AAAAAAAAMuc/3GuIq-ra1UI/s1366/image-1.png"><br />
        <img src="https://lh6.googleusercontent.com/-C1oDnTeZXIY/ULoMUOx3XPI/AAAAAAAAMuc/3GuIq-ra1UI/s1366/image-1.png" style="width: 620px"/><br />
    </a><br />
    <p>        The product did not gather any meaningful amount of users neither good amount of traffic. For almost 2 years I was investing money/time on it. So, from the first sight it might appear as failed project.<br />
    </p>    <p>        Any kind of business should be evaluated in terms of assets. It&#8217;s not necessarily means money. Or more correctly, it does not meant &#8220;direct&#8221; money. I had no paying customers and I actually never thought to sell the product. But, I can prove it - every hour I spent on the project got back to me as value. And the most valuable asset for developer is skill, of cause.<br />
    </p>    <a href="https://lh6.googleusercontent.com/-OLeITq9xGf4/ULoMUBovQkI/AAAAAAAAMuU/lk7SvXWvvFc/s1086/image-2.png"><br />
        <img src="https://lh6.googleusercontent.com/-OLeITq9xGf4/ULoMUBovQkI/AAAAAAAAMuU/lk7SvXWvvFc/s1086/image-2.png" style="width: 620px"/><br />
    </a><br />
    <p>        I&#8217;ll try to analyze what actually happened:<br />
    </p>    <ul>        <li><strong>Web development and design:</strong> even my professional involvement into web applications, did not give me a feeling of web development. I <a href="http://www.beletsky.net/2011/03/aspnet-developers-disease.html">blame</a> ASP.NET Web Forms for that, but I realized that I lack that kind of skill. That was my first project were I did everything by myself, all HTML/CSS/JS were handmade, not stupid WebControls. My eyes opened on how many things I did not understand, how difficult the front-end might be. Crafting of UI is a huge pleasure for me, I simply like beautiful things. 2 years after I will never call Trackyt.net beautiful, but it was a great point to start.<br />
            <p>                <i>Outcome</i>: I overstepped the uncertainty and fears of front-end. During the JavaScript programming. I&#8217;ve seen a lot of value in front-end MVC frameworks, so I had no doubts of moving from jQuery based apps to Backbone.js (or other MV*) frameworks. I did a <a href="https://speakerdeck.com/alexanderbeletsky">several speeches</a> of JavaScript applications development and got really cool feedback on it.<br />
            </p>        </li>
        <li><strong>Test driven development:</strong> practicing TDD for quite long years already, so Trackyt.net was not my first project were I applied the technique. The difference was that usually the we work with some legacy code at work, so TDD could be difficult to apply. Starting that project I had strong opinion on TDD and literally TDD&#8217;ed everything. UI, Controllers, Repositories.. JavaScript and C#. That was so great experience, I never felt on any other projects. During Trackyt.net I think I moved from <a href="http://martinfowler.com/bliki/ShuHaRi.html">Shu</a> to <a href="</a>&#8220;>Ha</a> level of testing. Now, I <a href="http://www.beletsky.net/2011/11/develop-with-tests.html">more clearly</a> see what and when should I test to stay in good shape of application.<br />
        </li>
        <p>            <i>Outcome</i>: currently I&#8217;m professional TDD trainer at <a href="http://xpinjection.com/">XP Injection</a> and Trackyt.net much influenced that it happened. I share my experience with guys I show some examples of code there. I <a href="http://www.beletsky.net/search/label/TDD">wrote</a> a bunch of blog posts on TDD and it&#8217;s Trackyt.net who gave most inputs and insights. I&#8217;ve <a href="http://www.beletsky.net/2010/12/testing-rest-services-with-javascript.html">implemented</a> integration tests for my API based FuncUnit and that blog post became the part of <a href="http://javascriptweekly.com/">JavaScript Weekly</a> and still remains one of the best reads in my blog. I&#8217;ve learned UI testing and <a href="http://www.beletsky.net/2011/04/functional-tests-must-not-be-done-first.html">formed</a> my opinion on that.
        </p>        <li><strong>ASP.NET MVC:</strong> Never used ASP.NET MVC before, I armed with <a href="http://books.google.com.ua/books/about/Pro_ASP_NET_MVC_2_Framework.html?hl=uk&id=lFSPoYt9deAC">great book</a> by Steven Sanderson I&#8217;ve started to learn new framework. And Trackyt.net was main playground. Starting up with MVC2 and lately ported it to MVC3 I had a chance to play different aspects of framework. ASP.NET MVC was my first serious step into web development world.<br />
        </li>
        <p>            <i>Outcome:</i> I became a huge fan of this technology, learning it from deep and <a href="http://www.beletsky.net/search/label/InsideMVC">posting</a> information on it. I had a few speeches about ASP.NET MVC.. and the biggest one on MS SWIT 2012, there ~300 persons were listened to me. Then the company I worked to were deciding about back-end technology for API of new product I helped to integrate ASP.NET MVC into existing web site and we successfully built API on it. I assisted my team mates to understand the framework, it was not difficult at all, since I knew the stuff. Currently I have a <a href="http://xpinjection.com/trainings/mvc-net-development/">training course</a> on ASP.NET MVC as well and already conducted some.
        </p>        <li><strong>API oriented architecture:</strong> popularized by Twitter and GMail, the architecture and having RESTfull JSON based service behind and the JavaScript-driven application on front-end, was my high-level architecture for Trackyt.net. <br />
            <p>                <i>Outcome:</i> I successfully used the same ideas on other projects and it worked really well. For now I&#8217;m consulting few companies that tries to adopt same ideas. The most popular <a href="http://www.beletsky.net/2011/01/implementation-of-rest-service-with.html">post</a> in my blog is about build REST(like) services with ASP.NET MVC. <br />
            </p>        </li>
        <li><strong>Continuous Delivery:</strong> being annoyed by manual update of production environment I&#8217;ve <a href="http://www.beletsky.net/2011/05/continuous-production-make-it-work.html">built</a> simple continuous delivery pipeline that worked really great for me. During the way I&#8217;ve met such great tools as Jenkins, UppercuT, RoundhousE etc. That was my first try of this approach and I felt huge power and advantages of Continuous Delivery. Slightly it became one of the professional areas of interests for me.<br />
        </li>
        <p>            <i>Outcome:</i> Continuous Delivery and <a href="https://github.com/chucknorris">Chuck Norris</a> tools was the topic of my first talk on <a href="http://kievalt.net/">KievALT.NET</a>. Since then I became an active participant of community and I really like it. Also, I&#8217;m talking about things like RoundhousE on my other speeches and trainings and I got a lot of pleasure than people stand by saying: &#8220;You know, we&#8217;ve tried that and it worked so nice, thanks a lot&#8221;.
        </p>        <li><strong>Code base:</strong> the code base of application is rather small. There is C#, JavaScript, SQL and some NAnt scripts. A lot of things I used there I still copy and paste (or at least taking a look) from Trackyt.net to my current projects. It became a kind of cook book, from there I could quickly pick up some recipe. <br />
        </li>
        <p>            <i>Outcome:</i> I didn&#8217;t thought above that initially, but Trackyt.net codebase also helping me to see what improvements I&#8217;ve made so far. For instance, I reviewed the API controllers recently and realized that I would never write anything like that. Having some code that you produced year or two ago you peer and compare gives some really interesting insights. Besides of application code itself, I&#8217;ve made an C# API adapter and the most significant outcome is <a href="https://github.com/alexanderbeletsky/elmah.mvc">ELMAH.MVC</a>.
        </p>    </ul>    <p>        Concluding this, I would say - Trackyt.net changed the things radically. I&#8217;ve became a speaker on <a href="http://kievalt.net/">KievALT.NET</a> and <a href="http://xpinjection.com/uadevclub/">UADevClub</a> communities, my blog received an <a href="http://java.dzone.com/users/alexanderb">MVB</a> status, I improved my skills and knowledge and I do trainings and consulting. Basically, I&#8217;ve &#8220;rebooted&#8221; developer inside me and saw my way of constant learning and improving.<br />
    </p>    <p>        Looking back I definitely say - it was only possible because of Trackyt.net.<br />
    </p>    <p>        Without any doubts, that was the most successful project to me!<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kiev ALT.NET Re-launch with Jimmy Bogard]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/kiev-altnet-re-launch-with-jimmy-bogard.html"/>
    <updated>2012-11-27T10:16:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/kiev-altnet-re-launch-with-jimmy-bogard</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>Good news, <a href="http://kievalt.net/">Kiev ALT.NET</a> community! One of the best know ALT.NET developers <a href="http://twitter.com/jbogard">Jimmy Bogard</a> is visiting us on December 11. It&#8217;s been awhile since the last meetup we had, so it&#8217;s just great time to gather again and listen to the presentation Jimmy prepared for us.<br />
</p><p>There will be a talk with intriguing name <i>&#8220;Real World Polyglot Persistence&#8221;</i>. Here is the short description of it.<br />
</p><blockquote>It always sounds easy - &#8220;use the best tool for the job&#8221;. With very isolated systems, it&#8217;s easy to decide RDBMS for one application, Redis for another and Cassandra for somethings else. When it comes time to building systems with multiple persistent stores, we&#8217;re met with challenges in integration, existing applications, and push back from IT administrators. In this session, we&#8217;ll look at the multitude of challenges of achieving polyglot persistence nirvana, and strategies for addressing associated risks.<br />
</blockquote><p>I don&#8217;t know about you, but for me it sound extremely interesting.<br />
</p><p>Meetup will take place in <a href="http://ciklum.net/">Ciklum</a>, the most spectacular place in Kiev - <a href="http://www.ciklum.com/upload/iblock/41b/Ciklum_SkyPoint_Kyiv_20Floor.jpg">Sky Point</a> at 19-00. As always, <a href="http://ciklum.net/">Ciklum</a> happily agreed host us. <br />
</p><p>Participation is completely free, but you have to register before. Registration is available <a href="https://docs.google.com/spreadsheet/viewform?formkey=dDlsSS1QenUyMVVkRWM3RmJKZzB1Wnc6MQ">here</a>.<br />
</p><p>The information support by our good friend at <a href="http://wp7rocks.com/">wp7rocks.com</a>.<br />
</p><img src="https://si0.twimg.com/profile_images/1246801773/Headshot3.png" /><br />
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming Takes Double Effort]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/pair-programming-takes-double-effort.html"/>
    <updated>2012-11-23T19:12:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/pair-programming-takes-double-effort</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Pair programming is very known as efficient technique of writing code. Originally appeared as one of key XP practices, it got a lot of traction. You can find many publication about Pair Programming and seems everybody clearly understands it&#8217;s value. Being a XP trainer and visiting conferences related to engineering practices I usually see such situation: the question goes to the crowd &#8220;How many of you do practice Pair Programming?&#8221; and I can give a bet, only few hands will appear.. very few people are actually practicing Pair Programming. Why?<br />
    </p>    <p>        Because Pair Programming is damn hard!<br />
    </p>    <p>        There could be 2 situations with PP: first one, then both guys are completely different levels of skills - it turns to be that one (more experienced) is writing and thinking all the time, another one is almost watcher helping to find a grammar errors in code comments. At the end of the day you got 2 mans powers producing 1 mans power work. Easy journey.<br />
    </p>    <p>        Second one is different, is then 2 guys are same or equally same level. Working in such pair could be compared to wresting. You literally have to fight to move on. All the time you under pressure of another man&#8217;s opinion, usually strong one. You struggle much to get consensus on different topics. You are talking all the time and arguing all the time. Sure, you got shinny-working-super-cool results much more faster by working such pair. <br />
    </p>    <p>        But there is a problem - after 3-4 hours of working that way you will be completely exhausted. Believe me, you are absolutely useless after 4 hours session of true Pair Programming. Thinking, focusing, arguing, writing, testing, debugging over and over again. It takes a lot of energy. Working a 40 hours week in strong pair will let you feel like 80 hours week. There is also psychological side as well: 2 persons could not match each over, so working in pair would be like hell. <br />
    </p>    <p>        Pair programming takes double effort. You should not plan PP session for a whole day, half day as maximum. In my opinion it&#8217;s not valuable to do every task in pair, simply it&#8217;s not productive. Pick up most difficult ones, ones that requires cross-functional expertise or most risky ones. As problem well kick-started, rest of things might go in parallel. <br />
    </p>    <p>        I really like Pair Programming, but I would not use it as day-to-day practice as XP suggests. Most of the time, it&#8217;s more efficient to work alone.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Unit testing of models]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/baby-steps-to-backbonejs-unit-testing.html"/>
    <updated>2012-11-22T11:54:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/baby-steps-to-backbonejs-unit-testing</id>
    <content type="html"><![CDATA[<div class='post'>
<p>            Unit testing is important part of development process. If you care about the application state and code quality, sooner or later you start to automate the tests. My experience shows, sooner is better option. There are several approaches to unit testing, `test-first` and `test-after`. There are many holy wars appears on that topic. I would say, both options works - but `test-first` or test driven development, works better for me. <br />
        </p>        <p>            By the end of the day, it&#8217;s only important that tests exists and helping to catch regression bugs. Still, developing by `test-first` helps to see the problem before ahead and in general provides better code quality (that would conclude the holy war). <br />
        </p>        <p>            Today we going to write some tests, that would cover our existing model class <code>Feedback.js</code>. Since the code is already written, we will go `test-after` approach. Fortunately, the code is quite simple, so it would not make a problem to unit test that. But before, let&#8217;s setup our testing infrastructure.<br />
        </p>        <h2>Folders and files</h2>        <p>            We&#8217;ll have a new folder called `spec`. Inside the spec folder, I&#8217;ll have `models` and `views` folders that would contain tests for models and views.<br />
        </p>        <a href="https://lh3.googleusercontent.com/-Ey7odJOnLXM/UK3wux_CNDI/AAAAAAAAMIY/B0lXl2K_cDM/s620/image-1.png"><br />
            <img src="https://lh3.googleusercontent.com/-Ey7odJOnLXM/UK3wux_CNDI/AAAAAAAAMIY/B0lXl2K_cDM/s620/image-1.png"/><br />
        </a><br />
        <h2>Tests runner</h2>        <p>            I&#8217;ll be using <a href="http://pivotal.github.com/jasmine/">Jasmine</a> test framework. It&#8217;s very easy to setup it, what we need is <code>jasmine.js</code> and <code>jasmine.css</code> to be placed on proper folders and setup a test page. Test page is a simple html file, which will be entry point for our testing. If you download jasmine <a href="https://github.com/pivotal/jasmine/downloads">standalone bundle</a> you will see <code>SpecRunner.html</code> inside. It could be easily tailored for custom needs.<br />
        </p>        <p>            In the head part of <code>tests.html</code> we need to reference all required .css and .js files.<br />
        </p>        <pre class="brush: html">&lt;title&gt;Feedback form specs&lt;/title&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;content/jasmine.css&quot;&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/underscore.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/backbone.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/jasmine.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/jasmine-html.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/libs/mock-ajax.js&quot;&gt;&lt;/script&gt;

&lt;!-- Sources --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/src/models/Feedback.js&quot;&gt;&lt;/script&gt;

&lt;!-- Specs --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/spec/models/Feedback.spec.js&quot;&gt;&lt;/script&gt;
    </pre>        <h2>Jasmine tests in essence</h2>        <p>            Testing with Jasmine is fun and easy. Jasmine is BDD-style framework, so if you practiced TDD with another frameworks, the style might confuse initially. Let&#8217;s review the Jasmine test skeleton.<br />
        </p>        <pre class="brush: js">describe('Jasmine spec', function () {
    var value;

    beforeEach(function () {
        value = 1;
    });

    it ('should fail', function () {
        expect(value).toBe(0);
    });

    describe('when value is changed', function () {
        beforeEach(function () {
            value = 0;
        });

        it ('should pass', function () {
            expect(value).toBe(0);
        })
    });
});
</pre>        <p>            In this example, <code>value</code> is our SUT (System under test). <code>beforeEach()</code> function is `context-establish` function, where SUT is initialized (in TDD it&#8217;s both arrange/act). <code>it</code> function is assert part. Here, we set our expectations about which state should SUT be in to. Notice, that <code>beforeEach</code> are nested into <code>describe</code>, so you tweek SUT depending on case.<br />
        </p>        <h2>Writing some tests</h2>        <p>            The only one functionality that <code>Feedback.js</code> model contains currently is validation. Let&#8217;s test that.<br />
        </p>        <pre class="brush: js">describe('Feedback.js spec', function () {
    var model;

    beforeEach(function () {
        model = new Feedback();
    });

    describe('when model is validating', function () {
        var errors;
    });
});
</pre>        <p>            This is something to start with. It does not do any asserts, so now we&#8217;ll add some real cases. First case, is than both `email` and `feedback` attributes are absent.<br />
        </p>        <pre class="brush: js">describe('when email and feedback fields are absent', function () {
    beforeEach(function () {
        errors = model.validate({});
    });

    it ('should have 2 errors', function () {
        expect(errors.length).toBe(2);
    });

    it ('should have email fields as invalid', function () {
        expect(errors[0].name).toBe('email');
    });

    it ('should have feedback field as invalid', function () {
        expect(errors[1].name).toBe('feedback');
    });
});
</pre>        <p>            It&#8217;s is possible that user put email, but forgot about feedback.<br />
        </p>        <pre class="brush: js">describe('when email is set, but feedback is absent', function () {
    beforeEach(function () {
        errors = model.validate({ email: 'a@a.com'});
    });

    it ('should have 1 error', function () {
        expect(errors.length).toBe(1);
    });

    it ('should have feedback field as invalid', function () {
        expect(errors[0].name).toBe('feedback');
    });

    it ('should have error message', function () {
        expect(errors[0].message).toBeDefined();
    });
});
</pre>        <p>            Moving on, user might put feedback but forgot about email.<br />
        </p>        <pre class="brush: js">describe('when feedback is set, but email is absent', function () {
    beforeEach(function () {
        errors = model.validate({ feedback: 'TDD is awesome'});
    });

    it ('should have 1 error', function () {
        expect(errors.length).toBe(1);
    });

    it ('should have email field as invalid', function () {
        expect(errors[0].name).toBe('email');
    });

    it ('should have error message', function () {
        expect(errors[0].message).toBeDefined();
    });
});
</pre>        <h2>Tests report</h2>        <p>            If you now try to run <code>test.html</code> in browser, you will something like that.<br />
        </p>        <a href="https://lh4.googleusercontent.com/-K9NtZKm7pso/UK3wvG3mDxI/AAAAAAAAMIc/kQL0Ai1XX_A/s620/image-2.png"><br />
            <img src="https://lh4.googleusercontent.com/-K9NtZKm7pso/UK3wvG3mDxI/AAAAAAAAMIc/kQL0Ai1XX_A/s620/image-2.png"/><br />
        </a><br />
        <h2>Conclusions</h2>        <p>            Testing of Backbone.Model&#8217;s is pretty simple thing. It&#8217;s nothing more than testing some business logic, that might reside inside. Testing of views is a bit trickier thing, but we will see how to do that next time.<br />
        </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Object Creation by New Operator]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/javascript-object-creation-by-new.html"/>
    <updated>2012-11-12T15:50:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/javascript-object-creation-by-new</id>
    <content type="html"><![CDATA[<div class='post'>
<p>        There are different approaches of how to create object in JavaScript. C# and Java programmers are commonly starting with creation by new operator, since it very close to same practice they got used to.<br />
    </p>    <pre class="brush: js">function Person (name) {
    this.name = name;
}

var person = new Person('John Smith');
console.log(person.name);
    </pre>    <p>        If you try to run this code, you will see &#8216;John Smith&#8217; in console. Now, try to delete new operator.<br />
    </p>    <p>        Instead of &#8216;John Smith&#8217; you will see undefined. Why?<br />
    </p>    <p>        The difference is that without new operator it is just function call. During the call `this` points global namespace. If you running the code in browser, global namespace is bind to `window`.<br />
    </p>    <p>        It&#8217;s important to understand how new operator works. Internally, operator new is converted to NEW(Person, &#8216;John Smith&#8217;);. It does several things.<br />
    </p>    <ol>        <li>Creates new native object and initializes the __proto__ of object by function.prototype.</li>
        <li>Calls function, applying newly created object as value for <code>this</code>.</li>
        <li>Returns newly created object.</li>
    </ol>    <p>        It can be expressed in this kind of pseudo-code:<br />
    </p>    <pre class="brush: js">function NEW(f) {
    var obj = { '__proto__': f.prototype };
    f.apply(obj, arguments.slice(1));
    return obj;
}
</pre>    <p>        (It&#8217;s a bit more complex actually, for details check this <a href="http://stackoverflow.com/questions/6750880/javascript-how-does-new-work-internally">great answer</a> on SO).<br />
    </p>    <p>        It means that during function call with `new operator()`, <code>this</code> always points to a new object, created based on function prototype. You can initialize the properties of new object inside the function. It&#8217;s no longer a simple function, but it is constructing function, or more simply - constructor.<br />
    </p>    <p>        To distinguish between constructors (that are always supposed to be called with `new`) and simple function, there is a convention to name a constructors with capital first letter (not person(), but Person()), just to give you some tips while you writing the code.<br />
    </p>    <p>        Knowing NEW() details of work and following simple conventions for constructors will help you to understand language better and prevent many stupid errors.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH.MVC 2.0.2 is out]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/elmahmvc-202-is-out.html"/>
    <updated>2012-11-09T17:21:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/elmahmvc-202-is-out</id>
    <content type="html"><![CDATA[<div class='post'>
    <p><a href="http://nuget.org/packages/Elmah.MVC">ELMAH MVC 2.0.2</a> has been just pushed recently. This is a contribution by <a href="https://github.com/jamescrowley">James Crowley</a> which adds a special configuration key that prevents ELMAH.MVC to setup a global `HandleErrorAttribute()`. It&#8217;s in particular useful, than you already setup some configuration inside the app, so you don&#8217;t want default behavior.<br />
</p><p>Inside the <code>web.config</code> file you will find a configuration setting for that.<br />
</p><pre class="brush: plain">&lt;appSettings&gt;
 &lt;add key=&quot;elmah.mvc.disableHandler&quot; value=&quot;false&quot; /&gt;
 &lt;add key=&quot;elmah.mvc.disableHandleErrorFilter&quot; value=&quot;false&quot; /&gt;
 &lt;add key=&quot;elmah.mvc.requiresAuthentication&quot; value=&quot;false&quot; /&gt;
 &lt;add key=&quot;elmah.mvc.allowedRoles&quot; value=&quot;*&quot; /&gt;
 &lt;add key=&quot;elmah.mvc.route&quot; value=&quot;elmah&quot; /&gt;
&lt;/appSettings&gt;
    </pre><p>It is <code>elmah.mvc.disableHandleErrorFilter</code>. By default it&#8217;s `false`, meaning `HandleErrorAttribute()` from ELMAH.MVC is used. To disable it, just set <code>true</code> to this setting.<br />
</p><p>And btw, it&#8217;s already 30.000 downloads of NuGet package! Huge number, thanks a lot for all users and contributors.<br />
</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby steps to Backbone.js: Model Validation]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/11/baby-steps-to-backbonejs-model.html"/>
    <updated>2012-11-08T09:42:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/11/baby-steps-to-backbonejs-model</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Let&#8217;s go back for a moment for <a href="http://www.beletsky.net/2012/10/baby-steps-to-backbonejs-starting-up.html">previous</a> post where we started to bootstrap some basic Backbone.js application. It&#8217;s very simple now, just gathering all data and posting those data to server.<br />
    </p>    <p>        Any reliable system is almost impossible without validation. If some field is required or must conform to some particular rule, it should be validated as soon as possible and validation information should be displayed to user. User then applies corrections and re-submit data.<br />
    </p>    <p>        In case of `Feedback` model, we are interested that user always input her email and feedback message. Backbone.js provides very straight forward for models validation. If model requires validation, it should implement <a href="http://backbonejs.org/#Model-validate">validate</a> method.<br />
    </p>    <p>        So, let&#8217;s extend our model with validate method.<br />
    </p>    <pre class="brush: js">var Feedback = Backbone.Model.extend({
    url: '/feedback',

    defaults: {
        'email': '',
        'website': '',
        'feedback': ''
    },

    validate: function (attrs) {
        if (!attrs.email) {
            return 'Please fill email field.';
        }
        if (!attrs.feedback) {
            return 'Please fill feedback field.';
        }
    }
});
    </pre>    <p>        As you can see, in case of email or feedback is missing, we just simply return string with error message.<br />
    </p>    <p>        To better understand what&#8217;s going on, let&#8217;s look on some piece of the code from Backbone.js framework. Namely, to `_validate` method of `Backbone.Model`, which is actually responsible for validation.<br />
    </p>    <pre class="brush: js">_validate: function(attrs, options) {
    if (options.silent || !this.validate) return true;
    attrs = _.extend({}, this.attributes, attrs);
    var error = this.validate(attrs, options);
    if (!error) return true;
    if (options && options.error) {
       options.error(this, error, options);
    } else {
        this.trigger('error', this, error, options);
    }
    return false;
}
</pre>    <p>        You can see, if `validate` returns either undefined or null or false, `_validate` just returns true - meaning the model is valid. Otherwise, it would check if `options.error` function initialized and call it, if not model event `error` is triggered.<br />
    </p>    <p>        During the model saving, we typically provide both success and error callbacks. It means, that error callback will be called, if model does not pass validation requirements. Inside the callback, we might decided what to do with errors. Right now, let&#8217;s just do alert.<br />
    </p>    <pre class="brush: js">var options = {
    success: function () {
        alert('Thanks for the feedback!');
    },
    error: function (model, error) {
        alert(error);
    }
};

var feedback = {
    email: this.$('#email').val(),
    website:  this.$('#website').val(),
    feedback: this.$('#feedback').val()
};

this.model.save(feedback, options);
    </pre>    <p>        Notice that `error` callback receiving model itself as first argument and error object (one returned from `validate` method) as second argument. Let&#8217;s try this code: leave email and feedback fields empty and press submit button.<br />
    </p>    <a href="https://lh3.googleusercontent.com/-BtV9yCmh3T8/UJtgc5Nk4CI/AAAAAAAALnQ/d671woxZwrE/s621/image-1.png"><br />
        <img src="https://lh3.googleusercontent.com/-BtV9yCmh3T8/UJtgc5Nk4CI/AAAAAAAALnQ/d671woxZwrE/s621/image-1.png"/><br />
    </a><br />
    <p>        There are several drawback of such implementation, though. First of all, `alert` windows are awful, second if user corrects email, next time she presses the submit button next alert with another message appears. This is terrible UX, so let&#8217;s fix it.<br />
    </p>    <p>        So, we should basically do 2 things: aggregate all errors during validation and apply some nice styles to errors.<br />
    </p>    <p>        Instead of returning simple strings, we&#8217;ll return an array of objects, containing name of failed and field and message.<br />
    </p>    <pre class="brush: js">validate: function (attrs) {
    var errors = [];

    if (!attrs.email) {
        errors.push({name: 'email', message: 'Please fill email field.'});
    }
    if (!attrs.feedback) {
        errors.push({name: 'feedback', message: 'Please fill feedback field.'});
    }

    return errors.length > 0 ? errors : false;
}
</pre>    <p>        Change the `save` method options, to show errors if any error appeared and hide errors if save was successful. <br />
    </p>    <pre class="brush: js">var me = this;
var options = {
    success: function () {
        me.hideErrors();
    },
    error: function (model, errors) {
        me.showErrors(errors);
    }
};
</pre>    <p>        And implement 2 simple methods:<br />
    </p>    <pre class="brush: js">showErrors: function(errors) {
    _.each(errors, function (error) {
        var controlGroup = this.$('.' + error.name);
        controlGroup.addClass('error');
        controlGroup.find('.help-inline').text(error.message);
    }, this);
},

hideErrors: function () {
    this.$('.control-group').removeClass('error');
    this.$('.help-inline').text('');
}
</pre>    <p>        Let&#8217;s test the code. As all fields are left empty, it will look like,<br />
    </p>    <a href="https://lh3.googleusercontent.com/-qPbTz5Cl0N4/UJtgc8JU-1I/AAAAAAAALnU/ru1sJb6j6V4/s717/image-2.png"><br />
        <img src="https://lh3.googleusercontent.com/-qPbTz5Cl0N4/UJtgc8JU-1I/AAAAAAAALnU/ru1sJb6j6V4/s717/image-2.png"></img><br />
    </a><br />
    <p>        As fields are filled and form submitted, all errors are cleared from form.<br />
    </p>    <h2>Conclusions</h2>    <p>        That was very simple &#8220;baby-step&#8221; style of approaching model validation. I would could it, validation &#8220;from the box&#8221;. Even if it&#8217;s very useful there are a lot of different approaches of making even things better. The source code is availble on <a href="https://gist.github.com/4037415">github</a>.<br />
    </p>    <p>        Stay tuned for next Backbone.js baby steps soon.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run multiple AJAX requests]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/10/how-to-run-multiple-ajax-requests.html"/>
    <updated>2012-10-31T21:12:00+02:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/10/how-to-run-multiple-ajax-requests</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>        Suppose you have a list of resources that you would like to retrieve by means of AJAX. `$.ajax()` (or it&#8217;s short variants like `$.get()` or `$.post`) is usual way of making AJAX calls, it works great than you need to fetch one.<br />
    </p>    <pre class="brush: js">var url = '/api/resource/1';
$.get(url, function (r) {
    // use response
});
    </pre>    <p>        Even in case of several it might be still usable,<br />
    </p>    <pre class="brush: js">var url1 = '/api/resource/1';
var url2 = '/api/resource/2'
$.get(url1, function (r) {
    // use response from url1

    $.get(url1, function (r) {
        // use response from url2
    });
});
    </pre>    <p>        You can easily see, if you have more than 3 you are trapping into &#8220;callback hell&#8221;. Furthermore, if you have a list of url&#8217;s to fetch and the size of that list is dynamic, it&#8217;s not even possible to build structure like that.<br />
    </p>    <p>        Not long time a ago, I&#8217;ve been exactly into this situation. So, I have a list of resources to fetch, I need to issue them one-by-one and I want to have only one callback, that would pass all fetched resources in one object. Initially I thought it&#8217;s not even possible, at least with-out creation of some ugly code. But with great help of my colleagues the problem been solved. <br />
    </p>    <p>        jQuery <a href="http://api.jquery.com/category/deferred-object/">Deferred Object</a> is something I&#8217;ve head about, but never got a change to play with. It turn&#8217;s out to be very nice and simple idea. Deferred allows you to build chainable constructions. Actually, `$.ajax()` always returns deferred object, so you can apply `.done()`, `.fail()` functions on it.<br />
    </p>    <p>        Here is the code, that you could be re-usable in the same situation;<br />
    </p>    <pre class="brush: js">var pipedAjaxRequests = function (urls, callback) {
 var responses = {};

 var promise = $.Deferred().resolve();
 _.each(urls, function (url) {
  promise = promise.pipe(function () {
   return $.get(url);
  }).done(function (response) {
   responses[url] = response;
  });
 });

 promise.done(function () {
  callback(responses);
 }).fail(function (err) {
  callback(responses, err);
 });
};
</pre>    <p>        It does create the pipe of `$.get()` calls and place the responses in one response object. At the time then all resources are fetched, the callback is called. In case of errors, second parameter of callback will have error info.<br />
    </p>    <p>        Thanks a lot to <a href="http://twitter.com/antsamar">@antsamar</a> and <a href="http://twitter.com/alex_gonchar">@alex_gonchar</a> for helping me out.<br />
    </p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby Steps to Backbone.js: Starting up]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/10/baby-steps-to-backbonejs-starting-up.html"/>
    <updated>2012-10-25T22:40:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/10/baby-steps-to-backbonejs-starting-up</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>Many times then I speak to people regarding usage of any kind of MV* frameworks on front-end I hear common objection: &#8220;but we already have a lot of code written on jQuery/Dojo/Whatever, I think usage of additional framework would be impossible&#8221;. This is not actually true. Backbone is very lightweight and could fit into any existing application.<br />
</p><p>Baby steps strategy is the most efficient way of trying the things. You start with something really small, enhance it over the time and expand for other application areas. Now, let&#8217;s imagine you got an existing application, you wish to start using Backbone.js to improve that. I would like to show you, that it&#8217;s absolutely possible.<br />
</p><p>Suppose, you want to add a feedback form for your app. Let&#8217;s implement that with Backbone.js.<br />
</p><h2>Applications, Models, Views</h2><p>There are no such thing as `Controller` in Backbone.js. But you have to have some kind of entry point, some place with `main()` function inside. I got used to call this place - Application. Basically, the application is a module, which is responsible for initialization of model, instantiation of view, rendering the view.<br />
</p><p>The `Model` is object that holds the data. It could be fetched and persisted back to server.<br />
</p><p>And finally view is object that produces markup, hooking up events and updates View from data in Model and otherwise.<br />
</p><p>We are going to create all three things. It makes a lot of sense to breakdown the folder structure of to reflect logical meaning of each entity of Backbone application. So, we&#8217;ll create 3 folders for apps, models and views.<br />
</p><a href="https://lh5.googleusercontent.com/-aFNqz_2e_i4/UImU8WZaMEI/AAAAAAAAKZ0/-v-Jb5EttRY/s620/image-1.png"><br />
<img src="https://lh5.googleusercontent.com/-aFNqz_2e_i4/UImU8WZaMEI/AAAAAAAAKZ0/-v-Jb5EttRY/s620/image-1.png"/><br />
</a><br />
<h2>Setup Backbone.js</h2><p>On a target html page we should place 2 additional script tags.<br />
</p><pre class="brush: html">&lt;script src=&quot;/scripts/libs/underscore.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/scripts/libs/backbone.js&quot;&gt;&lt;/script&gt;
    </pre><p>Besides of that, let&#8217;s add one more div. The one that application will be using for rendering views.<br />
</p><pre class="brush: html">&lt;div id=&quot;app&quot; class=&quot;container&quot;&gt;&lt;/div&gt;
    </pre><h2>Application entry point</h2><p>Let&#8217;s create a new file in `apps` folder and call it `FeedbackFormApp.js`. It would be very simple.<br />
</p><pre class="brush: js">$(function () {
    var model = new Feedback();
    var view = new FeedbackFormView ({model: model});
    
    $('#app').html(view.render().el);
});
    </pre><p>Then DOM is ready, we instantiate new model object and view and render the form into DOM element with id - app.<br />
</p><h2>Feedback model</h2><p>Now, let&#8217;s define a model. Create a new file in models folder and call it `Feedback.js`.<br />
</p><p>The model refects the data we are collecting/displaying to user and it&#8217;s typically stored on server (sometimes on localstorage). Feedback model will include 3 attributes: email of user, his web site and the feedback text. In terms of Backbone.js that would mean.<br />
</p><pre class="brush: js">var Feedback = Backbone.Model.extend({

    url: '/feedback',

    defaults: {
        'email': '',
        'website': '',
        'feedback': ''
    }

});
    </pre><p>The <code>url</code> property of model object is used by Backbone for persisting object to server. The <code>default</code> are defaults values for model attributes.<br />
</p><h2>Rendering the view</h2><p>The most interesting things in Backbone.js app is happening in Views. Add new file to `views` folder - FeedbackView.js.<br />
</p><p>The skeleton of view would look like this:<br />
</p><pre class="brush: js">var FeedbackFormView = Backbone.View.extend({
   className: 'row',

    render: function () {
        return this;
    }
});
    </pre><p>This view, does do nothing. So, let make it render the template. The template would be very simple form.<br />
</p><p>There are different approaches, there to actually place the markup. It&#8217;s possible to place it in the same .html file where view starts and extract it by jQuery, it&#8217;s possible to place to separate file and load it asynchronously by $.get(). But, according to baby steps scenario - we&#8217;ll place it directly to .js file. So, inside the view we&#8217;ll add property called template.<br />
</p><pre class="brush: js">template: '\
 &lt;form&gt;\
  &lt;legend&gt;Share the feedback&lt;/legend&gt;\
  &lt;div class=&quot;control-group&quot;&gt;\
   &lt;label&gt;Email&lt;/label&gt;\
   &lt;input type=&quot;text&quot; id=&quot;email&quot; placeholder=&quot;Your email address...&quot;&gt;\
  &lt;/div&gt;\
  &lt;div class=&quot;control-group&quot;&gt;\
   &lt;label&gt;Web site&lt;/label&gt;\
   &lt;input type=&quot;text&quot; id=&quot;website&quot; placeholder=&quot;Your website...&quot;&gt;\
  &lt;/div&gt;\
  &lt;div class=&quot;control-group&quot;&gt;\
  &lt;label&gt;Feedback&lt;/label&gt;\
  &lt;textarea id=&quot;feedback&quot; class=&quot;input-xxlarge&quot; placeholder=&quot;Feedback text...&quot; rows=&quot;6&quot;&gt;&lt;/textarea&gt;\
  &lt;/div&gt;\
  &lt;button type=&quot;submit&quot; id=&quot;submit&quot; class=&quot;btn&quot;&gt;Submit&lt;/button&gt;\
 &lt;/form&gt;\
',
    </pre><p>And render method, would be:<br />
</p><pre class="brush: js">render: function () {
    this.$el.html(this.template);

    return this;
}
    </pre><h2>First test</h2><p>Basically, we are ready to see some results. Modify the target view by adding references to model and view.<br />
</p><pre class="brush: html">&lt;script src=&quot;/scripts/src/models/Feedback.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/scripts/src/views/FeedbackFormView.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/scripts/src/apps/FeedbackFormApp.js&quot;&gt;&lt;/script&gt;
    </pre><p>Fire up the application and go to target page. You should be able to see something like this (for styles I use <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> here).<br />
</p><a href="https://lh5.googleusercontent.com/-asgv034ZUyA/UImU8iURcEI/AAAAAAAAKZ4/9Yga2hCy9TQ/s620/image-2.png"><br />
<img src="https://lh5.googleusercontent.com/-asgv034ZUyA/UImU8iURcEI/AAAAAAAAKZ4/9Yga2hCy9TQ/s620/image-2.png"/><br />
</a><br />
<p>If you see the form on screen, it means application started properly.<br />
</p><h2>Submitting the form</h2><p>We enter the data into input fields and as soon as data is in-place we are ready to submit. It means we have to catch an event of `Submit` button click and store the model to server.<br />
</p><p>To explain to Backbone.js that you interested in particular DOM event, you need to add another property to view. It is called <code>events</code>.<br />
</p><pre class="brush: js">events: {
    'click #submit': 'submitClicked'
},
    </pre><p>You can read it as - if click happed to element with id `submit`, call function submitClicked.<br />
</p><pre class="brush: js">submitClicked: function (e) {
    e.preventDefault();

    var options = {
        success: function () {
            alert('Thanks for the feedback!');
        },
        error: function () {
            alert('Opps, your feedback has not been submitted, please try again.');
        }
    };

    var feedback = {
        email: this.$('#email').val(),
        website:  this.$('#website').val(),
        feedback: this.$('#feedback').val()
    };

    this.model.save(feedback, options);
}
</pre><p>What it does, is first of all prevent the default behavior of event. So, the form would not be actually posted to server. Second, it prepares the options object&#8217;s with success and error handlers. After we initialize all attributes with actual values from corresponding inputs/textbox. And finally we call model.save().<br />
</p><h2>Second test</h2><p>Fire up application again. Now, if have properly set-up server side to receive the HTTP post call to `/feedback` you actually post first feedback.<br />
</p><a href="https://lh5.googleusercontent.com/-xoKGopfbwlw/UImU8rspz_I/AAAAAAAAKZ8/8D3bgfnRpgE/s620/image-3.png"><br />
<img src="https://lh5.googleusercontent.com/-xoKGopfbwlw/UImU8rspz_I/AAAAAAAAKZ8/8D3bgfnRpgE/s620/image-3.png"/><br />
</a><br />
<p>From my server trace, I can see that new object is received.<br />
</p><a href="https://lh6.googleusercontent.com/-FPoQZTARH0g/UImU9HR4aHI/AAAAAAAAKaA/fhPj64h6cr8/s621/image-4.png"><br />
<img src="https://lh6.googleusercontent.com/-FPoQZTARH0g/UImU9HR4aHI/AAAAAAAAKaA/fhPj64h6cr8/s621/image-4.png"/><br />
</a><br />
<p>Now, it&#8217;s the server job to put to storage, allocate the id etc.<br />
</p><h2>Conclusions</h2><p>In this first baby step, I just showed how it&#8217;s possible to adopt Backbone.js for existing apps. It does not make a lot of sense to re-write your existing code with Backbone.js, but new widgets/elements/applications could be created with Backbone, having a benefit of it&#8217;s structural approach.<br />
</p><p>I&#8217;ll go on with baby steps, showing other features of Backbone.js.<br />
</p></div>
]]></content>
  </entry>
  
</feed>
