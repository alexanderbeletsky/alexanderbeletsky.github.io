<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/continuous/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2013-10-23T17:26:01+03:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speeches Hat-Trick For This Weekend]]></title>
    <link href="http://beletsky.net/2012/02/speeches-hat-trick-for-this-weekend.html"/>
    <updated>2012-02-27T10:30:00+02:00</updated>
    <id>http://beletsky.net/2012/02/speeches-hat-trick-for-this-weekend</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It's been great weekend. It started Friday evening with Kiev ALT.NET <a href="http://blog.kievalt.net/post/17767271242/ncrunch-nancyfx-fubumvc-event">meet-up</a> which been in idle for a while and everybody missed that. There was a three planned speeches: by <a href="http://twitter.com/_TLK">@_TKL</a> on Continuous Testing (NCrunch, MightyMoose), NancyFX framework by me and FubuMVC by <a href="http://twitter.com/skalinets">@skalinets</a>.<br />
</p><p>I would not say I got great experience on Nancy so far. But I'm pretty exited on frameworks features and super-dupper-happy-path. Almost all knowledge I gathered thought hacking of <a href="https://github.com/alexanderbeletsky/Ideastrike">IdeaStrike</a>, listening to Herding Code <a href="http://herdingcode.com/?p=350">episode</a> and reading <a href="https://github.com/NancyFx/Nancy/wiki/Documentation">documentation</a>. But anyway, I believe it turns out to be good introductory presentation.   <br />
</p><script src="http://speakerdeck.com/embed/4f47e42f8448db0022000bf4.js"></script><br />
<p>Right after my Nancy talk I moved to central train station, since I was about to visit <a href="http://www.ciklum.net/join/community/Ciklum-NET-Saturday-25-02/">Ciklum .NET Saturday</a> in Dnepropetrovsk. .NET Saturday's is just great initiative by Ciklum company. I's free event, everybody welcome, content is usually nice. I highly recommend to follow their events. <br />
</p><p>I had two talks there. First one about "Continuous Delivery" that I did on <a href="http://www.beletsky.net/2012/01/agile-base-camp-2012.html">Agile Base Camp 2012</a>. Besides of the talk I also did a quick and improvised demo of <a href="http://alexanderbeletsky.github.com/candidate/">Candidate</a> application. Even if I had some technical issues the demo went fine.<br />
</p><p>Another one is for logging and tracking unhandled exceptions in ASP.NET / ASP.NET MVC application based on ELMAH. I showed some basics features as well easiness of ELMAH integration to ASP.NET MVC with <a href="http://nuget.org/packages/Elmah.MVC">ELMAH.MVC</a> NuGet package. It was very light and funny talk, especially discussing Troy Hunt's <a href="http://www.troyhunt.com/2012/01/aspnet-session-hijacking-with-google.html">ELMAH attack</a>. <br />
<script src="http://speakerdeck.com/embed/4f49e9bd2270a2002200a29c.js"></script><br />
<p>I also really much enjoyed <a href="http://samarskyy.blogspot.com/">Anton Samarskyy</a> talk on jQuery deffered objects and Vitaly Koval did great hacking session of WinRT.<br />
</p><p>I some of you been listening to me on those speeches and still have any questions or concerns, feel free to contact me by comments or through <a href="http://twitter.com/alexbeletsky">twitter</a>. See you next time!<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Candidate v.0.0.1rc - Released]]></title>
    <link href="http://beletsky.net/2012/02/candidate-v001rc-released.html"/>
    <updated>2012-02-14T07:37:00+02:00</updated>
    <id>http://beletsky.net/2012/02/candidate-v001rc-released</id>
    <content type="html"><![CDATA[<div class='post'>
<p>  You may notice that I stick to original project name at the end of the day, even thought I wish to change it. That happened for 2 reasons: first, I really get used to candidate and it's good enough project name.. second, I spent some hours of brainstorming but found out nothing better that existing.<br />
 </p> <p>  This weekend I also finally concluded project web site and hosted it as github pages - <a href="http://alexanderbeletsky.github.com/candidate/">http://alexanderbeletsky.github.com/candidate/</a>. So, ladies and gentlemen - please welcome, <a href="https://github.com/downloads/alexanderbeletsky/candidate/candidate-v.0.0.1rc.zip">Candidate v0.0.1rc</a> is ready to be shown to the world. <br />
 </p> <a href="http://alexanderbeletsky.github.com/candidate/"><br />
  <img src="https://lh5.googleusercontent.com/-WIUMqyz3naI/TznyBp-dQbI/AAAAAAAAH4A/exqlfJUQr8o/s1024/screenshot-1.jpg" alt="candidate web site" style="width: 620px;" /><br />
 </a><br />
 <h2>  What's the goal?<br />
 </h2> <p>  Thinking about nearest "competitors" in this area I would re-call <a href="http://www.paulstovell.com/octopus/intro">Octopus</a> by <a href="https://twitter.com/#!/paulstovell">Paul Stovell</a>. Octopus uses Build Server / Tentacle (Agent) architecture principal, while Candidate is simple Agent architecture - you host it the same machine as your environment is (stage, production) providing both integration and deployment functionality.<br />
 </p> <p>  My goal is stabilize and improve Candidate through this year, so it fulfill different requirements including performance and scalability. I switched all my projects to use Candidate now, so it would give me some initial feedback.<br />
 </p> <p>  Nevertheless, Candidate may turn out to be a powerful deployment application I'm still thinking about "Deployement as Service" product like <a href="https://appharbor.com/">AppHabor</a> and <a href="http://www.heroku.com/">Heroku</a> or <a href="http://travis-ci.org/">Travis-CI</a> as it was <a href=
  "http://www.beletsky.net/2011/06/candidatenet-application-i-made-on.html">original</a> idea.<br />
 </p> <h2>  What's next?<br />
 </h2> <p>  Following the principle "Build product X to learn technology Y" I'm going to proceed with Candidate to shape following areas that I wish to improve now:<br />
 </p> <ul>  <li>Processes, threads, synchronization in .NET</li>
  <li>Async, Tasks library</li>
  <li>Robust applications architecture</li>
  <li>Different deployment scenarios for .NET platform</li>
 </ul> <p>  Technological stack is still ASP.NET MVC3 / C#/ jQuery. Currently application requires to be hosted on IIS, with application pool Process Identity equals to Admin. This does not suite all users. So, I'm looking forward to create self-hosted version using <a href="https://github.com/NancyFx/Nancy">NancyFX</a>. <br />
 </p> <p>  I also try to target UI / UX issues as much as possible.<br />
 </p> <h2>Wanna join?</h2> <p>  I would be happy to. I'll much encourage you to download application, install it, perform simple testing (scenario could be found <a href="https://github.com/alexanderbeletsky/candidate/wiki/Quick-start-instructions">here</a>). Let me know what you think, that would be great initial contribution. As for any github hosted project, you are absolutely free to fork, hack it out and send pull request.<br />
 </p> <p>  Thanks for you help.<br />
 </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Base Camp 2012]]></title>
    <link href="http://beletsky.net/2012/01/agile-base-camp-2012.html"/>
    <updated>2012-01-30T20:54:00+02:00</updated>
    <id>http://beletsky.net/2012/01/agile-base-camp-2012</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Past Saturday I was a part of big Ukrainian event <a href="http://agilebasecamp.org/">Agile Base Camp: From Idea to Product</a>. It's been organized by <a href="http://www.scrumguides.com/">ScrumGuides</a>, pioneers on Agile in Ukraine and organizers of famous <a href="http://www.beletsky.net/search/label/Agile">Agilee</a> series of conferences.<br />
</p><p>The conference named "From Idea to Product" and focused on product development issues. There was 3 stages there: Main, XP, UX. Main is for more or less common topics as budgeting, motivation etc.. XP is practical stage for developers and UX for user experience engineers. The program of conference was really interesting, but I spend all my day on XP stage (no surprise).<br />
</p><p>There were great speeches by <a href="http://twitter.com/dmytromindra">Dmytro Mindra</a>, <a href="http://twitter.com/skaninets">Sergey Kalinets</a>. Probably most valuable for me were ones by <a href="http://twitter.com/vitaliystakhov">Vitaliy Stakhov</a> and <a href="http://twitter.com/_TLK">Anatoly Kolesnik</a>, Vitaliy shared Hypermedia concepts of RESTfull systems and that looks very promising. Anatoly did great NoSQL introduction that is very actual at the moment. I also enjoyed <a href="https://twitter.com/defimenko">Dmitry Efimenko</a> speech about testing in product company. He did it in quite tough style, so crowd was a little shocked and kept silence till the last words. I got some interesting points for myself.     <br />
</p><p>I did a talk about - Continues Delivery / Deployment / Production. This practical field is very interesting to me not only because I'm trying to <a href="http://www.beletsky.net/2012/01/pre-announce-of-release-candidate.html">build a product</a> for that and I want to adapt for all project I work to.   <br />
</p><a href="https://lh3.googleusercontent.com/-pNWAtW5oWu8/TybgzFR4zWI/AAAAAAAAH3g/HxLkTCyvV1A/s720/395323_283771048348762_248481618544372_777581_1168321183_n.jpg"><br />
<img src="https://lh3.googleusercontent.com/-pNWAtW5oWu8/TybgzFR4zWI/AAAAAAAAH3g/HxLkTCyvV1A/s620/395323_283771048348762_248481618544372_777581_1168321183_n.jpg" alt="alexander beletsky" /><br />
</a><br />
<p>I've got very nice feedback and questions after my speech, totally collected 15 donuts (a special cards that listeners give to speaker if they like the speech), so I was quite happy about. If you interested, here is my <a href="http://speakerdeck.com/u/alexanderbeletsky/p/when">slides</a> on speaker deck.<br />
</p><script src="http://speakerdeck.com/embed/4f225b72a0a84d001f019c7b.js" type="text/javascript"></script><br />
<p>I really much enjoyed after party and evening we spent in Work'N'Roll, the co-working office of <a href="http://www.scrumguides.com/">ScrumGuides</a>. Appreciate organizers for that job and wish you good luck of all next events.<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery: Make it work]]></title>
    <link href="http://beletsky.net/2011/05/continuous-production-make-it-work.html"/>
    <updated>2011-05-11T10:27:00+03:00</updated>
    <id>http://beletsky.net/2011/05/continuous-production-make-it-work</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
As soon as we <a href="http://www.beletsky.net/2011/05/continues-production-setup-and-run.html">setup</a> project infrastructure in a way that build and deploy is done by one batch command, we are ready to run this process continuously. It is possible to take any CI server you want, I stopped on <a href="http://jenkins-ci.org/">Jenkins</a>.. basically it contains everything I need. But before start with Jenkins, let's one more time take a look current infrastructure and goals.
</p>
<h2>Git branching model</h2>
<p>
There is great <a href="http://nvie.com/posts/a-successful-git-branching-model">article</a> on that topic, I used main ideas from that. So, I have 2 branches in my <code>origin</code> that exists all the time. They are: <code>master</code> and <code>development</code>. All pushes I do during implementation are going to <code>development</code> branch. No direct pushes are made to <code>master</code> at all (there are some exceptions of cause, but I try to follow that rule). As soon as code in <code>development</code> is stabilized, I prepare special <code>release</code> branch (update version and small clean up there) and <code>release</code> is being merged to <code>master</code> as it tested and everything is fine.
</p>
<h2>Staging and Production environments</h2>
<p>
I define 2 types of environments: Staging and Production. Environment includes: binaries, markup, database, deploy scripts.
</p>
<p>Everything that is being developed are goes to staging environment immediately (and automatically). Production update is being run manually as soon as all testing on Staging are finished. Separation of environments is great idea. Even if we are trying hard to have potentially shippable software during each build, this is not true. It is usually a lot of problems in latest version that need to be fixed before production server update.
</p>
<p>
So, Staging is a result of build/deploy of <code>development</code>; Production is a result of build/deploy of <code>master</code>. 
</p>
<p>
In my case, everything you see <a href="http://stage.trackyt.net/">here</a> is a result of build of <a href="https://github.com/alexanderbeletsky/trackyt.net/tree/development">this</a>. Everything you see <a href="http://www.trackyt.net/">here</a> is a result of <a href="https://github.com/alexanderbeletsky/trackyt.net">this</a>.
</p>
<h2>What I want to get?</h2>
<p>
I want to have automatic system that would update my <a href="http://stage.trackyt.net/">Staging</a> with every push to <code>development</code> branch and I want automatic system that would update my <a href="http://www.trackyt.net/">Production</a> as soon as <code>master</code> branch is ready to. As it said in <a href="http://www.beletsky.net/2011/04/continues-production-overview-and.html">overview</a> having such system is great reduce of deployment overhead. Let's make this happen!
</p>
<p>
As I said earlier I would use <a href="http://jenkins-ci.org/">Jenkins</a>. Great stuff about this software that is very intuitive! Setup is easy and fun, I would put just a little guidance of process.
</p>
<h2>Local Jenkins server setup</h2>
<p>
As you download Jenkins WAR file, it is easy to start just with <code>java -jar jenkins.war</code>. Now, the dashboard is available at <code>http://localhost:8080/</code>.
</p>
<h3>Plugins</h3>
<p>
First, you should add all required plugins. It already contains some, but some are missing. I've add such to my default configuration:
</p>
<ul>
<li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin">Jenkins GIT plugin</a></li>
<li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Github+Plugin">Github plugin</a></li>
<li><a href="http://wiki.jenkins-ci.org/display/JENKINS/NUnit+Plugin">NUnit Plugin</a></li>
</ul>
<p>
Go to "Manage Jenkins" -> "Manage Plugins" and install missing one.
</p>
<p>
So, my configuration looks like this:
</p>
<!-- plugins.png -->
<img src="https://lh6.googleusercontent.com/_stL4bIIuRUs/Tco7BUnOiGI/AAAAAAAAHZk/XSxs5Y_zrR0/plugins.png" alt="plugins" />
<h3>Configure system</h3>
<p>
Now go to "Manage Jenkins" -> "Configure System" and find "Git" section there. You should provide with your user name and path to Git. I have git in my PATH variable (recommend you do the same). 
</p>
<h3>Create new job</h3>
<p>
After basic configuration is done, let's define new job. Go to "New job". In common section you should give your job name and provide with githib path to repository.
</p>
<img src="https://lh5.googleusercontent.com/_stL4bIIuRUs/Tco7A-XTqYI/AAAAAAAAHZg/0kLPsWXWj6k/common-section.png" alt="common section" />
<p>
In Source Control Management: URL to Git repository, Branch to build and Repository browser (optional).
</p>
<!-- SCM.png -->
<img src="https://lh6.googleusercontent.com/_stL4bIIuRUs/Tco7Bh2RuUI/AAAAAAAAHZs/p568dcfUStk/SCM.png" alt="SCM" />
<p>
Build triggers (explain a bit later).
</p>
<!-- build-triggers.png -->
<img src="https://lh4.googleusercontent.com/_stL4bIIuRUs/Tco7A6XC3ZI/AAAAAAAAHZY/X39bPBs9U3Q/build-triggers.png" alt="build-triggers" />
<p>
In Build section you specify commands to build/test/package and to deploy results. See my <a href="http://www.beletsky.net/2011/05/continues-production-setup-and-run.html">previous post</a> for details.
</p>
<!-- build.png -->
<img src="https://lh4.googleusercontent.com/_stL4bIIuRUs/Tco7A76md_I/AAAAAAAAHZc/5JPyCIL5Pek/build.png" alt="build" />
<p>
Finally in Post-build section, specify path to grab artifacts.
</p>
<!-- post-build.png -->
<h3>Test it locally</h3>
<p>
As soon as configuration is done, you can test your build locally. Just start your job and make sure that: build run, tests executed, new database deployed, new application deployed. Basically if everything done correctly in previous <a href="http://www.beletsky.net/2011/05/continues-production-setup-and-run.html">steps</a> you should not experience any troubles. If it is fine that means the configuration is simply ready to be put to production server.
</p>
<h2>Move it to production</h2>
<p>
As it defined, our goal is to update staging and production with out any manual work. The simplest scenario then CI server resides on the same machine as production server. 
</p>
<p>
Great thing about Jenkins is that it requires no installation. So, I packed all content of <code>~/User/Jenkins</code> folder and Git into one single package and FTP'ed to my production server. As you unpack, configure Git in PATH variable, setup up your private repository keys it is just simply ready to work. Now, test it remotely - staging and production should be able to update with one single click on Jenkins dashboard. 
</p>
<h3>Little adjustments for production server</h3>
<p>
My VPS has Windows auto-update enabled, so It is being rebooted from time to time. As it is being rebooted, you should start Jenkins manually. Fortunately it has really nice feature - Jenkins might be run as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service">Windows Service</a>. This is extremely useful, I recommend to do it from very beginning. 
</p>
<h3>Using Github hook to automate build run</h3>
<p>
I want my every commit to <code>development</code> to be tested and to be visible on Stage. As it said in <strong>Configure system</strong> part, you can setup build triggers. With build trigger you can run build just by requesting this URL <code>http://jenkins.server/jobname/build?token=TOKEN</code>.
</p>
<p>
In github repository go to Admin section and setup new hook in "Post Recieve URLs" section, like this:
</p>
<!-- gtihub -->
<img src="https://lh4.googleusercontent.com/_stL4bIIuRUs/TcpDr67qBpI/AAAAAAAAHZ4/bL1s9Lwhh7g/s912/github.png" alt="github" />
<p>
This concludes the setup.
</p>
<h2>Control your builds all the time</h2>
<p>
What we did is only very basic setup, but it already gives a lot of power. It is really easy to track all builds/artifacts/history of changes. Downtime of site is extreamly slow (comparing to manual changes). Dashboard is very convenient to control builds:
</p>
<!-- dashboard -->
<img src="https://lh6.googleusercontent.com/_stL4bIIuRUs/TcpEsDXvmmI/AAAAAAAAHZ8/c7ttFDLm_fA/s912/dashboard.png" alt="dashboard" /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery: Setup and run]]></title>
    <link href="http://beletsky.net/2011/05/continues-production-setup-and-run.html"/>
    <updated>2011-05-02T11:39:00+03:00</updated>
    <id>http://beletsky.net/2011/05/continues-production-setup-and-run</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
In my <a href="http://www.beletsky.net/2011/04/continuous-production-overview-and.html">previous post</a> I tried to make it clear that continuous production is for good. This post I'll show how to prepare environment for continuous production. The idea is that you should be able to configure and test it locally. All configurations have to be part of source code under SCM. It should not depend on machine and run any environment you like. Success criteria is: pick up clean machine, do checkout, run build.bat/deploy.bat and have installed web application.
</p>
<h2>Integration and database deployment</h2>
<p>
As I said, <a href="http://www.beletsky.net/2010/10/uppercut-your-builds.html">UppercuT</a> and <a href="http://www.beletsky.net/2010/10/roundhouse-your-database.html">RoundhousE</a> are really nice tools for that. As soon as you follow the instruction's you will have a <code>build.bat</code>, that would be able to build up all binaries, run tests against that and put all build artifacts to package. That is pretty good for start, but we still missing "deployment" part.
</p>
<p>
As you a little bit more familiar with UppercuT, it provides good facilities for deployment as well. Basically, there are folder <code>deployment\templates\</code> where you able to define your custom deployment scripts. Typical web application requires 2 scripts:
</p>
<ul>
<li>AppDeployment.bat - for web site deployment</li>
<li>DbDeployment.bat - for database deployment</li>
</ul>
<p>
There files are templates, from which script for particular <code>environment</code> is generated. The environment is defined in <code>settings</code> folder and include such information as deploy folder, web site name, database name, server name as number of variables. Example,
</p>
<pre class="brush: xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;project name=&quot;Settings&quot;&gt;
  &lt;!-- environment settings --&gt;
  &lt;property name=&quot;environment&quot; value=&quot;PRODUCTION&quot; /&gt;
  &lt;!-- servers --&gt;
  &lt;property name=&quot;server.database&quot; value=&quot;.\SQLEXPRESS&quot; /&gt;
  &lt;property name=&quot;web.deploy.folder&quot; value=&quot;c:\trackyt.net\web\&quot; /&gt;
  &lt;property name=&quot;web.site.name&quot; value=&quot;trackyt.net&quot; /&gt;

  &lt;property name=&quot;database.name&quot; value=&quot;trackytdb&quot; /&gt;
  &lt;property name=&quot;log.level&quot; value=&quot;DEBUG&quot; /&gt;
  &lt;property name=&quot;app.user.name&quot; value=&quot;alexander.beletsky&quot; /&gt;

  &lt;!-- base settings --&gt;
  &lt;property name=&quot;project.name&quot; value=&quot;trackyt.net&quot; overwrite=&quot;false&quot; /&gt;
  &lt;property name=&quot;repository.path&quot; value=&quot;git://github.com/alexanderbeletsky/trackyt.net&quot; /&gt;
  &lt;property name=&quot;folder.app.drop&quot; value=&quot;${project.name}&quot; overwrite=&quot;false&quot; /&gt;
  &lt;property name=&quot;folder.database&quot; value=&quot;db&quot; overwrite=&quot;false&quot; /&gt;

  &lt;!-- database deployment --&gt;
  &lt;property name=&quot;dirs.db&quot; value=&quot;..\${folder.database}&quot; /&gt;
  &lt;property name=&quot;file.version&quot; value=&quot;_BuildInfo.xml&quot; overwrite=&quot;false&quot; /&gt;
  &lt;property name=&quot;restore.from.path&quot; value=&quot;..\${database.name}.bak&quot; overwrite=&quot;false&quot; /&gt;
  
&lt;/project&gt;
</pre>
<p>
In template .bat file it is possible to refer, to some particular variable, so it is possible to make those quite generic. After build, template .bat files are post-processed and actual batch is generated. The name would be like <code>ENVIRONMENT.AppDeployment.bat</code>, where ENVIRONMENT is type of environment you defined.
</p>
<h2>Web site deployment script</h2>
<p>
If you do ASP.net (MVC) website in 99.9% cases you will be happy with simple <code>XCOPY</code> deployment type. Basically it means, simple copy of website to defined IIS folder. 
</p>
<p>
But, as soon it is continuous production deploy it means that Web Site is already running. It would not be possible to re-write some files, since they could be used by IIS. So, we need to stop the site before update. I found very good possibility for that with <code>%windir%\system32\inetsrv\appcmd</code> command. After site is stopped, we just copy full content of Web folder, remove some redundant files and run site again. In batch code it would look like,
</p>
<pre class="brush: plain">
@echo off

SET DIR=%~d0%~p0%

SET web.deploy.folder="${web.deploy.folder}"

echo stopping web site..
call %windir%\system32\inetsrv\appcmd stop site ${web.site.name}
if %ERRORLEVEL% NEQ 0 goto errors

echo copy application content
rmdir /s /q %web.deploy.folder%
xcopy /E /F /H /R ..\_PublishedWebSites\Web %web.deploy.folder%
xcopy ..\build_artifacts\_BuildInfo.xml %web.deploy.folder%
if %ERRORLEVEL% NEQ 0 goto errors

echo remove redudant files
del %web.deploy.folder%*Tests*.htm*
del %web.deploy.folder%Web.Debug.config  
del %web.deploy.folder%Web.Release.config 
del %web.deploy.folder%*packages* 
if %ERRORLEVEL% NEQ 0 goto errors

echo starting web site
%windir%\system32\inetsrv\appcmd start site ${web.site.name}
if %ERRORLEVEL% NEQ 0 goto errors

goto finish

:errors
EXIT /B %ERRORLEVEL%

:finish
</pre>
<h2>Database deployment script</h2>
<p>
<a href="http://www.beletsky.net/2010/10/roundhouse-your-database.html">RoundhousE</a> does all infrastructure work for us. All we need to create a batch file, that would be able to run during continuous production cycle. As well as <code>AppDeployment.bat</code> I defined <code>DbDeployment.bat</code> in <code>deployment\templates\</code> folder. But before any update of database it is always good to have a backup, to be able to restore from it if something went wrong. Actually, RoundhousE should have such ability, but unfortunately I didn't get how to use it. I've created my simple SQL script that is able to backup.
</p>
<pre class="brush: sql">
USE $(Database);
GO
BACKUP DATABASE $(Database)
TO DISK = 'C:\backup\$(Database).bak'
   WITH FORMAT,
      MEDIANAME = 'C_SQLServerBackups',
      NAME = 'Full Backup of $(Database)';
GO
</pre>
<p>
And corresponding batch file, that would run <code>backup.sql</code>.
</p>
<pre class="brush: plain">
@echo off

if '%1' == '' goto usage
if '%2' == '' goto usage

sqlcmd -S %1 -i .\scripts\backupdb.sql -v Database = %2 -e
if %ERRORLEVEL% NEQ 0 goto errors

goto finish

:usage
echo.
echo Usage: backup.bat [server] [database]
echo [server] - server eg. mymachine\SQLEXPRESS
echo [database] - name of database to backup
echo.
EXIT /B 1

:errors
EXIT /B %ERRORLEVEL%

:finish
</pre>
<p>
Both files are placed into <code>deployment\scripts</code> folder. So, the <code>DbDeployment.bat</code> template, would first run database backup and if it is successfull, run RoundhousE to update database.
</p>
<pre class="brush: plain">
@echo off

SET database.name="${database.name}"
SET sql.files.directory="${dirs.db}"
SET server.database="${server.database}"
SET repository.path="${repository.path}"
SET version.file="${file.version}"
SET version.xpath="//buildInfo/version"
SET environment="${environment}"

echo backup database
call .\scripts\backupdb.bat %server.database% %database.name%
if %ERRORLEVEL% NEQ 0 goto errors

echo update database
"%DIR%rh\rh.exe" /d=%database.name% /f=%sql.files.directory% /s=%server.database% /vf=%version.file% /vx=%version.xpath% /r=%repository.path% /env=%environment% --ni --simple
if %ERRORLEVEL% NEQ 0 goto errors

goto finish

:errors
EXIT /B %ERRORLEVEL%

:finish
</pre>
<h2>Putting it all together</h2>
<p>
We already have <code>build.bat</code> as part of UppercuT, now we need to define <code>deploy.bat</code> that would do deployment of product. It would be called immediately after build.bat finished, so binaries are ready, tests passed and <code>code_drop</code> folder contains all artifacts for deployment. The script is rather simple and utilize stuff we did previously.
</p>
<pre class="brush: plain">
@echo off

if '%1' == '' goto usage

SET ENV=%1

cd .\code_drop\deployment

echo Deploy database
call .\%ENV%.DbDeployment.bat
if %ERRORLEVEL% NEQ 0 goto errors

echo Deploy application
call .\%ENV%.AppDeployment.bat
if %ERRORLEVEL% NEQ 0 goto errors

goto finish

:usage
echo.
echo tracky.net deploy script
echo Usage: deploy.bat [environment]
echo [environment] - deployment environment could be STAGING or PRODUCTION
echo.
EXIT /B 1

:errors
echo Build FAILED
EXIT /B %ERRORLEVEL%

:finish
echo Build SUCCESS
</pre>
<p>
Notice, it receives the parameter <code>ENV</code>. It will contain type of environment for deployment. For staging environment, you should call <code>deploy.bar STAGING</code>, for production <code>deploy.bat PRODUCTION</code>.
</p>
<h2>Testing it out</h2>
<p>
That's basically it. Now, you should make sure everything works as expected. Run <code>build.bat/deploy.bat</code>, make sure build went with no errors, deploy.bat correctly does back up of database, updates database and update site content. 
</p>
<p>
As I said on top, it is very important that configuration is part of product, part of source code. If you follow this, it will be possible to deploy application but just getting sources from SCM. This is first step of setting up your Continuous Production server.
</p></div>

]]></content>
  </entry>
  
</feed>
