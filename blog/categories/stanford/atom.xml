<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Stanford | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/stanford/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-03-31T16:18:38+03:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CS101 Building a Search Engine: Week 1]]></title>
    <link href="http://beletsky.net/2012/04/cs101-building-search-engine-week-1.html"/>
    <updated>2012-04-21T20:54:00+03:00</updated>
    <id>http://beletsky.net/2012/04/cs101-building-search-engine-week-1</id>
    <content type="html"><![CDATA[<div class='post'>
<p><small><strong>Disclaimer:</strong> this blog post expresses some impressions and details of Udacity CS101 "Building a Search Engine" online course. If you are either currently participating it or plan to do so in nearest future, this blog post could be a spoiler. Even though, I'm trying to make it generic as possible and do not spoil important things.<br />
</small><br />
</p><p>CS101 is fundamental course that supposes you have no background in programming at all. That's why all lectures was very-very basic and sometimes I felt really bored. If you fell the same, that's probably ok, since the most interesting stuff is about to start from Unit 3. <br />
</p><p>In the same time, for guys who has no programming skill's that might be even a little tough. To be honest, I had really tough moment during my first homework, that should not be a problem for professional programmer, but I'll describe it later. <br />
</p><h2>Unit 1: Basics, Python, Numbers and Strings</h2><p>What I understood from my entire career is that: backing to basics is always great. The years of enterprise development makes you strong in technologies and frameworks, but I managed to lost almost everything I got during my university days. Restoring that knowledge is very good brain exercise, constant repetition of basic is the way to mastery.    <br />
</p><p>So, even that simple unit gave me a lot of things to remember, plus I learned some elementary of Python language.<br />
</p><h2>Backus Naur Form</h2><p>What was really interesting to me during Unit 1 is so called <a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">Backus-Naur Form</a>, for describing the computer language grammar. This is a method of formalizing any (probably) computer language syntaxes. It has been invented by <a href="http://en.wikipedia.org/wiki/John_W._Backus">John Backus</a> American scientist, how is famous as creator of FORTRAN and ALGOL computer languages, as well as his researches in <a href="http://en.wikipedia.org/wiki/Function-level_programming">functional programming</a>. <br />
</p><p>Backus-Naur form is really simple and really powerful. It is described by the set of <code>non-terminals</code> and <code>terminals</code>. Each language expression is derived from BN form. Let's take and example,<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= &lt;subject&gt; &lt;verb&gt; &lt;object&gt;
        &lt;subject&gt; ::= &lt;noun&gt;
        &lt;object&gt; ::= &lt;noun&gt;
    </pre><p>Here is the primitive BNF for English language. Each sentence in English should contain Subject, Verb, Object to be complete and have a meaning. Of course, BNF is not suppose to describe natural languages as English or Russian, since it much more complex.. but it works very fine with computer languages, which are strict. So, everything in brackets are so called <code>non-terminals</code>, it simply means that expression could not be terminated (completed) based on them. To complete we need <code>terminals</code>. Each <code>non-terminal</code> is replaced by <code>terminal</code> till it's done.<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= &lt;subject&gt; &lt;verb&gt; &lt;object&gt;
        &lt;subject&gt; ::= &lt;noun&gt;
        &lt;object&gt; ::= &lt;noun&gt;
        noun ::= I
        noun ::= Python
        noun ::= Cookies
        verb ::= Eat
        verb ::= Like
    </pre><p>Now, the form is completed, so we can try to derive expression out of it. Let's try that. So, we start from the top line<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= &lt;subject&gt; &lt;verb&gt; &lt;object&gt;
    </pre><p>Derive all non-terminals from expression<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= &lt;noun&gt; &lt;verb&gt; &lt;noun&gt;    
    </pre><p>First "noun" is still non-terminal, so we proceed. Due to form, noun could be any of three (I, Python, Cookies) - so I can pick up any.<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= I &lt;verb&gt; &lt;noun&gt;    
    </pre><p>"I" is the terminal, so we process next non terminal which is verb. Verb could be any of (Eat, Like). I'll take "Like".<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= I Like &lt;noun&gt;    
    </pre><p>The last non-terminal is noun again. The same three options (I, Python, Cookies). Let's pick "Python".<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= I Like Python    
    </pre><p>All non-terminals are replaced with terminals, that means we derieved the expression completely. Based on that simple algorithm I can derive other expressions that would be valid for that form.<br />
</p><pre class="brush: plain">&lt;sentence&gt; ::= I Like Cookies    
        &lt;sentence&gt; ::= I Like I    
        &lt;sentence&gt; ::= I Eat Python    
        &lt;sentence&gt; ::= Python Like Cookies
        &lt;sentence&gt; ::= Python Eat I
    </pre><p>As you can see, some of them are completely non-sense, but still they are totally valid expressions. If you are curious, you can find BNF's for many know languages <a href="http://goldparser.org/grammars/index.htm">here</a>. <br />
</p><h2>Starting up Python</h2><p>Start with Python programming language was one of my goals, dusted for quite long time on goals shelf. Hope that CS101 and further courses would be motivating enough to finally learn it. So, if you are like me - .NET, no Python background - don't worry, that's easy enough. Basically, all you need is Python interpreter and some text editor.  <br />
</p><p>I really like <a href="http://chocolatey.org/">Chocolatey</a> for installing that stuff. Chocolatey is like NuGet package manager, but for software. I encourage you to try. So, instead of going to site, looking for latest version etc. I just opened my Power Shell command like and put:<br />
</p><pre class="brush: plain">cinst python
    </pre><p>In 3 minutes, Python was on my machine. <br />
</p><p>The editor, you can pick up any you like. I prefer <a href="http://www.sublimetext.com/2">Sublime Text 2</a>, it's really cool. Again, you can install it by Chocolatey.<br />
</p><pre class="brush: plain">cinst sublimetext2
    </pre><p>After that you are almost Python developer. Just need to learn the language.<br />
</p><h2>Strings, Find in strings<br />
</h2><p>The rest of Unit 1, was mostly string operations in Python. And I was surprised how easy Python syntax is. First, you don't need to 'mark' varible declaration anyhow.. No types, no 'var' just the name and value.<br />
</p><pre class="brush: python">s = "Hello World"
    </pre><p>You can access each char inside the string just with [] operator.<br />
</p><pre class="brush: python">s = "Hello World"
        print s[0]
    </pre><p>It would print "H" char into console. It's not really cool, what cool is - substrings by index and negative indexes.<br />
</p><pre class="brush: python">print s[0:5] # -> Hello
        print s[:5]  # -> Hello
        print s[6:]  # -> World
        print s[:]   # -> Hello World
        print s[-1]  # -> d
        print s[:-5] # -> Hello     
    </pre><p>The find operation is very similar to what we have in C++ and C#. It, tried to find substring in string if it's find, position returned or -1.<br />
</p><pre class="brush: python">print s.find('World') # -> 6
        print s.find('o')  # -> 4
        print s.find('o', 5) # -> 7
    </pre><p>The last thing in the unit was <code>str()</code> method, that able convert any number (integer or float) into string representation.<br />
</p><pre class="brush: python">print str(3.14)  # -> 3.14
        print str(100)  # -> 100
    </pre><p>That's it. Based on that knowledge I suppose to complete my homework.<br />
</p><h2>Homework</h2><p>Again, as whole unit - there was really simple problems. The 'real' tough guy to me was very simple problem - "Rounding numbers". So, you are given with float number and you have to return it's integer representation. If numbers fraction is greater than 0.5, it should go ceil otherwise it goes floor. Not big deal I thought to my self and start to write code..<br />
</p><p>I spend around 10 minutes to create code like that:<br />
</p><pre class="brush: python">number_as_string = str(x)
        dot_position = number_as_string.find('.')
        if dot_position != -1:
         integer_part = int(number_as_string[0:dot_position])
         decimal_part = int(number_as_string[dot_position + 1:])
         decimal_length = len(number_as_string[dot_position + 1:]) 
         dividor = pow(10, decimal_length - 1) * 5 

         if decimal_part >= dividor :
          integer_part += 1

         print integer_part
    </pre><p>While writing that I had a bad feeling, that I'm using something that I'm not supposed to know, actually. The code worked and I submitted the solution. I received a response, that it actually giving right answer.. but, I was asked to create solution without <code>if</code>, <code>int()</code> or <code>round()</code>.<br />
</p><p>Believe me or not, but I really frustrated on that task. I just didn't understood how it's possible to do not use any <code>if</code> here, but I have a condition inside the problem. I spend additional 10 minutes, starting to think it's just impossible. It's really funny, but indeed I thought it's something strange and had a great temptation to go and check for correct answer. Fortunately, I got this this online <a href="http://forums.udacity.com/cs101-april2012/questions/345/rounding-without-an-if-statement?page=1&focusedAnswerId=386#386">discussion</a> (each course has it's discussion board, where student's can share the info). It turns out I'm not alone, some professional programmers did the look like I did with if's and calls to other functions.<br />
</p><p>Finally, I just tried to concentrate and really pretend to be a person how is just listen to that material first time, using the only knowledge I got in Unit 1. And solution came up to my mind! It was sooo easy, so I felt really ashamed for the code I wrote above. It's 3 lines of code, using just <code>str()</code> and <code>find()</code> method, so simple.<br />
</p><p>That was definitely facepalm situation. But, it really encourage me to continue!<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Enrolled to Udacity 'Build Search Engine' Online Course]]></title>
    <link href="http://beletsky.net/2012/04/i-enrolled-to-udacity-build-search.html"/>
    <updated>2012-04-17T18:55:00+03:00</updated>
    <id>http://beletsky.net/2012/04/i-enrolled-to-udacity-build-search</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I'm astonished how many opportunities we have now to learn and self-improve there days. One of the greatest things was announcement of online courses by Stanford. Stanford is the world class university with best professors and highest reputation. Then I first time heard that some of Stanford courses are online with videos, quizzes and materials - I thought to my self, - I would not miss the thing. <br />
</p><p>With a great support of <a href="http://www.coursera.org/">Coursera</a> and <a href="http://www.udacity.com/">Udacity</a> now we have great list of interesting <a href="http://www.class-central.com/">courses</a>, including programming, artificial intelligence, cryptography etc. Lead by well known specialists those courses are just price-less, nevertheless they are available for free.  <br />
</p><p>I have enrolled for new course by <a href="http://www.udacity.com/">Udacity</a> - <a href="http://www.udacity.com/overview/Course/cs101/CourseRev/apr2012">CS101: Building a Search Engine</a> that has been started 16 Apr 2012, by David Evans and Sebastian Thrun. This should be interesting journey inside the web crawling, data mining, ranking etc. What is good for me it would not evolve hardcode-math and also does some good introduction into Python programming language. By the way, CS101 does not assume you know any computer language before or any special math knowledge. So, my assumptions that this course should not take hours of digging into the difference between <code>o(n)</code> and <code>O(n)</code> but rather has more practical aspects. <br />
</p><p>So, why I'm writing that?.. Millions of people are joining them, a lot of people already got successful records for several courses already. OK, let's look in eyes of truth. I enrolled for several ones already (ml-class and saas). But neither I successfully completed. Due to my business (read as laziness) I quickly went out of schedule and it was to difficult to line up again. I don't want it happen again.<br />
</p><p>I have some small goals for a next 7 weeks:<br />
</p><ul><li><br />
Start up learning new language<br />
</li>
<li><br />
Lean something new in data mining and data processing<br />
</li>
<li><br />
Improve my self learning discipline<br />
</li>
<li><br />
Encourage myself for next online courses<br />
</li>
</ul><p>I think <a href="http://www.udacity.com/overview/Course/cs101/CourseRev/apr2012">CS101: Building a Search Engine</a> is vey nice candidate, because: <br />
</p><ul><li><br />
As I said it should not include very complex math (that I already manage to forgot)<br />
</li>
<li><br />
It has no strict deadlines for units <br />
</li>
<li><br />
It is interesting enough to do not be bored in a middle (at least I hope so)<br />
</li>
</ul><p>Moreover, I'll be doing a weekly blog post (Saturday) about highlighting the things I learned through week. If you are interested, please jump in since that train is still not gone. I'm sure it will be great experience.<br />
</p><p>Let's do that together!<br />
</p></div>

]]></content>
  </entry>
  
</feed>
