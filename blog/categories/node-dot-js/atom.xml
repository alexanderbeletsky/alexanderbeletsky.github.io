<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Alexander Beletsky's development blog]]></title>
  <link href="http://alexanderbeletsky.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://alexanderbeletsky.github.io/"/>
  <updated>2013-06-15T08:57:43+03:00</updated>
  <id>http://alexanderbeletsky.github.io/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Single Page Applications with Backbone.js and Express.js]]></title>
    <link href="http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with.html"/>
    <updated>2013-04-24T06:11:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2013/04/building-single-page-applications-with</id>
    <content type="html"><![CDATA[<div class='post'>
    <p>This Saturday I was doing my first Backbone.js class. It went really fine, except one fact.<br />
</p><p>I wanted to show the aspects of creating Single Pages Application running on Backbone. Started the application from scratch, we had to spend a lot of time writing some infrastructure code before we even jump to Backbone. So, after the class I decided to create some boilerplate project, so next time we would just clone it from github and start to work.<br />
<!-- more -->
</p><p>That's how the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> born.<br />
</p><h2>Backbone.js + Express.js SPA boilerplate</h2><p>The project is a <a href="http://expressjs.com/">Express.js</a> application using <a href="http://backbonejs.org/">Backbone.js</a> as front-end framework. The idea is you just simply clone it, remove non needed routes and application and build something on your own.<br />
</p><p>I won't put to much details in a blog post, since <a href="https://github.com/alexanderbeletsky/backbone-express-spa">repo</a> neat readme section. Just several facts:<br />
</p><ul><li><strong>Minimal and simple</strong> - pure Backbone code, no plugins. For some real needs plugins are required anyway and you are free to include whatever you want.</li>
<li><strong>AMD modules with RequireJS</strong> - modularity is key factor for large-scale apps, <a href="http://requirejs.org/">RequireJS</a></li>
<li><strong>Concept of Application</strong> - to group all view, models, collection related to one application unit in one place.</li>
<li><strong>Handlebars template</strong> - using <a href="http://handlebarsjs.com/">Handlebars</a> as template engine.</li>
</ul><h2>Further work</h2><p>It's not yet completely done. I want to create more meaningful app, show some layouts principles + prepare readme section of building application for production.<br />
</p><p>I'm also thinking of putting some examples of unit tests both for Express.js and Backbone.js.<br />
</p><h2>Conclusions</h2><p>Check the <a href="https://github.com/alexanderbeletsky/backbone-express-spa">backbone-express-spa</a> out. If you like it, please give some stars or shout in twitter. I would be really happy to see some pull requests for improving applications or infrastructure. So, if you want to join - you are welcome!<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three month without .NET code]]></title>
    <link href="http://alexanderbeletsky.github.io/2012/07/three-month-without-net-code.html"/>
    <updated>2012-07-11T13:29:00+03:00</updated>
    <id>http://alexanderbeletsky.github.io/2012/07/three-month-without-net-code</id>
    <content type="html"><![CDATA[<div class='post'>
<p>    It's not farewell letter in style of "Goodbye .NET". But, I just realized that I haven't created any .NET code in about three month. That is pretty much. Mostly all the stuff I currently do, both at work and for fun projects, I do in JavaScript.<br />
</p><p>    I love .NET and love C# language. C# is probably one of the best language I ever programmed with. I think that .NET is my comfort zone. Web technologies as ASP.NET MVC, Web API, NancyFX are great. But, as I <a href="http://www.beletsky.net/2011/03/aspnet-developers-disease.html">said</a> long time ago server side development is not enough to create cool web apps.<br />
</p><h2>Front-end development</h2><p>    For modern web application, the front-end part became as equally important as back-end. In <a href="http://www.e-conomic.com/">e-conomic</a> we are doing large scale JavaScript applications. According to <a href="http://addyosmani.com/">Addy Osmani's</a> definition, the large scale JavaScript applications are:<br />
</p><blockquote>non-trivial applications requiring significant developer effort to maintain, where most heavy lifting of data manipulation and display falls to the browser.<br />
</blockquote><p>    This is exactly definition of application we released just few days ago, <a href="https://www.debitoor.de/">debitoor.de</a>. And if you are doing front-end, the JavaScript is your friend. Actually, you don't even have a choice.. It's either JavaScript or some another language that could be compiled down to JavaScript as <a href="http://coffeescript.org/">CoffeeScript</a>, <a href="https://github.com/clojure/clojurescript/">ClojureScript</a> or <a href="http://www.dartlang.org/">Dart</a> languages. The importance of JavaScript, it's common adoption, growing of community knowledge base made Scott Hanselman call JavaScript <a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">assembly language for web</a>. <br />
</p><p>    We've chosen <a href="http://backbonejs.org/">Backbone</a> as front end development framework. With a backbone JavaScript code became to have structure. Having a proper code structure is vital for any project. I've started to learn Backbone and even I still thinking it's too minimalistic and non-complete, I believe that was a huge step forward.<br />
</p><p>    Having implemented and stabilized HTTP API for application, almost all new features implementation was at front end. That means, new features for product were actually born in JavaScript code.<br />
</p><h2>Back-end development</h2><p>    As might know from my earlier <a href="http://www.beletsky.net/2011/12/why-new-technologies-move-your-product.html">post</a> we've chosen ASP.NET MVC to build our HTTP API on. That worked well at the beginning, but later decision were taken to move out the API to Node.js platform. So, another team started to work on new API project, basically implementing existing API interfaces from ASP.NET MVC in Node.js.<br />
</p><p>    Being wisely architected, our front-end did not have major ASP.NET MVC dependencies. We did not use any specific features (like Razor) or anything else just in sake of minification of efforts during switching back-end platform. And I would say it worked really well.<br />
</p><p>    Node.js based API built on <a href="http://expressjs.com/">Express.js</a> framework, that suites nice for such kind of work. There is a great blog post about <a href="http://nodeguide.com/convincing_the_boss.html">convincing</a> you boss to use <a href="http://nodejs.org/">Node.js</a>. Node.js + <a href="http://www.mongodb.org/">MondoDB</a> is very suitable for JSON API applications, for several reasons. First of all is performance, Node.js is known for it's async I/O operations that is so perfect for web. Second is simplicity (relational simplicity, of course). Serving JSON objects inside JavaScript, storing/restoring them as MongoDB documents makes the platform and approaches very solid.<br />
</p><p>    So, the new stuff from HTTP API also got born of JavaScript code. Check out nice post of <a href="https://plus.google.com/107092994415731288478/posts">Allan Ebdrup</a> (one of the Node.js inspiration guys inside e-conomic) about our experience with <a href="http://techtalk.e-conomic.com/developing-with-node-js-and-mongodb-part-i/">Node.js and MongoDB</a>.<br />
</p><h2>How does it feel like?</h2><p>    So, I've started to work almost all the time for front-end having Sublime Text 2 + Chrome Developers Tools as IDE. It was a really unusual at the beginning, after many years in Visual Studio. <br />
</p><p>    I feel myself more productive with JavaScript now. I write the code with JavaScript construction and sometimes thinking myself "how would I do in C#?" and it feels like in C# it would be much harder. I like dynamic nature of language.<br />
</p><p>    Besides the coding I have pleasure of new infrastructure. Setting up .NET solution, containing ~80 projects, long build process, setup of MS SQL and re-staring of IIS.. All of that made a lot of idle time, read wasted time. I'm in idle, during waiting till build is finished.. or waiting 30 sec while IIS update AppDomain if I rebuild and press F5. It easily can take up to 2 hours per working day just wasted. <br />
</p><p>    Node.js + MongoBD environment is extremely easy to setup, amazingly fast to work with. I'm restaring the application in 1 sec, just by stopping node process and running it again. With a tools like <a href="https://github.com/remy/nodemon/">nodemon</a>, you don't even need to do that. Just save the code and after a sec, press F5 in browser to test it. All of that are increases general developers happiness.<br />
</p><p>    JavaScript is difficult language and Node.js is new platform that requires respect and time to learn. Node.js is probably one of the best <a href="http://nodejs.org/api/">documented</a> projects I ever worked with. Besides, it's open source. It means you can learn from sources. I haven't dig inside Node.js code itself, but I did look inside the Express.js then I had an issue and I found the answer as I see how particular method works.<br />
</p><p>    Even though, Backbone.js code and Node.js code are completely different stuff, having the same language both front-end and back-end is great thing. In particular it minimizes the language context-switching then you do coding. It's possible to apply similar patterns and practices both ends.<br />
</p><h2>Conclusions</h2><p>    Being a JavaScript developer works good for me so far. I opened just entire new world and would like to explore it more. I hope JavaScript would be my comfort zone some day.<br />
</p></div>

]]></content>
  </entry>
  
</feed>
