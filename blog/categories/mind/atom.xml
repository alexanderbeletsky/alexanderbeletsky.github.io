<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mind | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/mind/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-01-18T14:17:49+02:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Source]]></title>
    <link href="http://beletsky.net/2013/12/open-source.html"/>
    <updated>2013-12-31T12:00:00+02:00</updated>
    <id>http://beletsky.net/2013/12/open-source</id>
    <content type="html"><![CDATA[<p>I heard about open source probably the first year I started programming. I liked the idea of software to be not only presented as a final product, but with ability to see how things are done and change something if you want. For me, open source was really related to operational systems and drivers, Linux as great example.</p>

<p>A bit later I realised that open source is also about contribution. If you have a certain skills, you can join the project you interested in and try to help. I&rsquo;ve seen some nice open source examples &ndash; tiny operational systems, drivers, music players. Almost everything was C++. The problem with C++, it&rsquo;s hard to build something from sources. You typically missing some binaries, headers or SDK&rsquo;s you don&rsquo;t have on your machine.</p>

<!-- More -->


<p>When, I saw the change after Java and .NET after appeared. A lot of great things just became available in open source. Not only operation systems or drivers.. But rather tools. Like NUnit, Ninject, Moq etc. That you are using more as developer. Both .NET and Java unifies build process, so it&rsquo;s easy to deal with projects. Like compile version with debug info inside and play around with a debbuger.</p>

<p>Being involved to .NET development, I definitely saw the affect of open source. Community had informal competition between official Microsoft&rsquo;s frameworks and open source analogs. I would not say those analogs were perfectly good, but they were good enough to use it in real projects. But more important, you can join the project by submitting bug reports, fixing docs or send a patch.</p>

<p>The situation changed when first Git and GitHub after appeared. Git solved major open source problem, being easy to contribute back (distributed system and forks) and GitHub implemented pull request idea, that simplified code contribution a lot.</p>

<p>There are different opinions, but as for me GitHub really influenced open source world in a good way. Apparently, if you have GitHub account, you are a closer to open source as possible. First, you create you own repositories and trying to show the world something that you think matters, second you see a lot of other people project and could join anytime you want.</p>

<p>A lot of great examples of open source products appeared &ndash; MongoDB, Nginx, Docker, Redis, Node.js, NPM etc. That was my huge impression after I switched from .NET to JavaScript development.</p>

<p>Not only as a developer, but also as entrepreneur I see open source is great. The full stack for your product, could be open source.. from top to down. For <a href="https://likeastore.com/">Likeastore</a> we use something like: Ubuntu, Docker, Dokku, Git, Node.js, MondoDB, Express.js and hundreds others open source libraries. The costs of running on open source stack, significatly lower then licensed software. You still paying the money, but amount are really affordable for small companies.</p>

<p>Open Source is awesome.</p>

<p>I wish next year I can participate more open source projects, I&rsquo;ll create some useful projects and open source will became a culture of <a href="https://likeastore.com/">Likeastore</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Were Wrong 10 Years Ago]]></title>
    <link href="http://beletsky.net/2013/06/we-were-wrong-10-years-ago.html"/>
    <updated>2013-06-20T23:43:00+03:00</updated>
    <id>http://beletsky.net/2013/06/we-were-wrong-10-years-ago</id>
    <content type="html"><![CDATA[<p>The way we build distributed systems and platforms is changing through the the last 10 years. Recently, I was thinking myself about different technological options I used so far and came for some conclusions.</p>

<p>Early 2000&rsquo;s I was programming C/C++ and the best way of passing some data from one machine to another, was &ndash; <em>socket</em>. The time took understanding of sockets, I clearly saw it&rsquo;s the best solution for that task.</p>

<!-- more -->


<p>Sending and receiving strings and binary structures was very nice comparing to using C or assembler to directly talk to network driver. Sockets allowed to build server-client architectures, in theory allowing application written in different languages to communicate each other.</p>

<p>But time passed and COM / DCOM technologies appeared. Data transport operations was completely hidden, a lot of abstraction put above objects and marshaling. Again, that technology was massively adopted by developers, many projects were created based on COM / DCOM (or similar technology called CORBA).</p>

<p>Marshaling, IDL, ATL and other stuff was very difficult to understand and to use. But still there was much better than implement something similar on raw sockets.</p>

<p>Era of Web Services has begun. Web Services indeed allowed build highly distributed systems based on reliable HTTP protocol. Data transport mechanisms appeared to be transparent and very clear. Data transfered back and forth as XML payloads. Almost all web service technologies were build in concept on <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a>.</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> was primary payload format, formalized XML with metadata inside. Again, previous DCOM / COBRA things looked very ugly, Web services looked very promising.</p>

<p>Web Services, definitely affected the way we architecture distributed systems now. It formalized a lot, <code>WS-*</code> set of standards came out. Many vendors like Microsoft or Sun created bunch of frameworks to support it. Many books, many blog posts and speaks issued on that topic.</p>

<p>Nowadays, <code>RPC-based</code> services completely substituted with <code>REST-style</code>. XML as payload, seems to be awful, cause its verbose, requires more bandwidth comparing to <code>JSON</code>. <code>JSON</code> in conjunction with dynamic languages gives great framework of building distributed systems. We are currently in era of <em>API oriented</em> systems and as soon as you adopted that, SOAP and RPC makes no sense to you.</p>

<p>What I&rsquo;m telling is, technologies are improving very fast. What was great today, will appear awful tomorrow.</p>

<p>We were wrong 10 years ago that some particular technology is cool. So now, than I see some new and shinny thing I&rsquo;m no longer blindly excited about that. It will gone&hellip; and substituted with something better.</p>

<p>Developers ultimate goal remains to <em>influence</em> that process. And make influence is easy &ndash; share your thoughts, implement prototypes, talk to people.</p>

<p>Make things simpler, make things better.</p>
]]></content>
  </entry>
  
</feed>
