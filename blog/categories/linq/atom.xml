<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linq | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/linq/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-01-18T14:17:49+02:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing database and Test database]]></title>
    <link href="http://beletsky.net/2010/11/testing-database-and-test-database.html"/>
    <updated>2010-11-05T08:43:00+02:00</updated>
    <id>http://beletsky.net/2010/11/testing-database-and-test-database</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
Testing the database is important. It is absolutely required then your DAL is simply a bunch of methods that do SQL against the DB. It still required to be done then you rely on some ORM (like Linq to SQL, NHibernate etc).
</p>
<h2>Testing database</h2>
<p>
By testing the database I mean unit tests that runs database operation tasks (create, update, delete, stored procedures calls) and test asserts that operation is being completed successfully.  
</p>
<p>
Even the SQL is simple enough (like a <code>SELECT</code> or <code>UPDATE</code>) it have to be tested. More complex stuff, like <code>JOIN</code>, <code>UNION</code> etc. have to tested with much more care (meaning different scenarios, different input set etc.). As more complex query you have, as more complex test you should do. I personally trying to avoid complex SQL queries, because they difficult to read and support, but in many cases is the only way you can do.
</p>
<p>
Example of test case of DAL methods that runs <code>SELECT</code> statement:
</p>
<a href="https://gist.github.com/662906">https://gist.github.com/662906</a>
<script src="https://gist.github.com/662906.js?file=gistfile1.cs"></script>
<p>
Using ORM simplifies life a bit. You are working with objects, creation of new record in DB is just creation of new object and call <code>InsertOnSubmit()</code> method. In many cases you have to trust that framework does its job correctly and do not write the tests for framework, that is simple waste of time. But what usually happens is that you have a wrappers against ORM <code>DataContext</code>, like a <code>Repository</code> and the behavior of <code>Repository</code> have to be validated with tests (check out about repositories <a href="http://www.beletsky.net/2010/06/ddd-implementation-of-repository.html">here</a>). Typically repositories interface looks like that:
</p>
<a href="https://gist.github.com/662918">https://gist.github.com/662918</a>
<script src="https://gist.github.com/662918.js?file=gistfile1.cs"></script>
<p>
All interface methods and properties are covered by tests. Moreover, if you have repositories <a href="https://github.com/alexanderbeletsky/Trackyourtasks.net/blob/master/src/Trackyourtasks.Core/DAL/Extensions/BlogPostsExtensions.cs">extensions</a> that helps you to select record by Id, or do paging they are also part of testing. Please check how this <code>IBlogPostsRepostitory</code> is tested by this example - <a href="https://github.com/alexanderbeletsky/Trackyourtasks.net/blob/master/src/Trackyourtasks.Database.Tests/Tests/DAL/BlogPostsRepositoryTests.cs">example</a>.
</p>
<p>
What else about testing database you should know?
</p>
<p>
First of all, database tests might required some initial data to be put in database before each test start. It could be easily solved by using <code>[TestSetup]</code> and <code>[TestTearDown]</code> methods of Fixture. Bad side of this that you could not customize the data for particular test, because Setup/TearDown runs the same code that you could not parameterize. I prefer to use a static method (or methods) that is placed in <code>TestFixture</code> and called at the beginning of unit test. Please see <code>SubmitTenBlogpostsToRepository</code> from previous example.
</p>
<p>
Second at all, you have to care about test isolation some how. It means that previous tests results should not affect next test cases, each tests case have to leave the database in the same state as it enters it. There are different approaches how to do that, I like something like this. I'm having <code>FixtureInit</code> that does kind of initialization for any test case and it contains <code>DbSetup</code> instance in it. <code>DbSetup</code> itself holds <code>DataContext</code> as well as <code>TransactionScope</code> object. <code>TransactionScope</code> is a very nice way of handling <a href="http://msdn.microsoft.com/en-us/library/ms172152(VS.90).aspx">implicit transactions</a>. Inside <code>DbSetup</code> constructor we also could put some test data initialization, as it would be shared thought all tests. <code>Dispose</code> methods of the <code>DbSetup</code> disposes a transaction without committing it. Each test case body is placed in <code>using (var fixture = new FixtureInit("http://localhost"))</code>, 
    so any data that is placed (or deleted) from database during the tests would not 
    affect the database then test is finished. It is simple and works good, please 
    check out for implementation <a href="https://github.com/alexanderbeletsky/Trackyourtasks.net/tree/master/src/Trackyourtasks.Database.Tests/Framework">here</a>.
</p>
<p>
The last thing - layout and naming of database tests. Database tests have to be separated from application unit tests. It a good way of doing the testing. Database tests are usually too slow and you do not need to re-run them after minor changes (except changes in DAL). That's why it is better to place DB tests to separate assembly. The name of assembly should contain <code>*Database.Tests</code>. It gives a clear understanding of assembly goal, as well as it will not be re-runned every time as you do <code>build.bat</code> by <a href="http://www.beletsky.net/2010/10/uppercut-your-builds.html">UppercuT</a>
</p>
<h2>Test database</h2>
<p>
Test database is database against that database tests are running.. and typically <code>Test Database == Developer Database</code>, meaning the same database as developer tests the application is used for database unit tests. 
</p>
<p>
It it bad in several reasons. 
</p>
<p>
By doing developers testing you make database really "dirty". Putting new records in DB or deleting existing ones, doesn't matter. I usually do a small test that if I put new object(s) I check the count of objects in table after, like <code>Assert.That(foundTasks.Count(), Is.EqualTo(2));</code>. But if I <code>Tasks</code> table will have some data before, I'm not guaranteed that count will be 2, but <code>Assert.That(foundTasks.Count(), Is.EqualTo(countOfObjectBeforeInsert + 2));</code> will be running OK. It works, but I don't really like it, because it mess up test with some not required details.
</p>
<p>
It is possible that some complex database tests, could leave database in inconsistency state 
    during its failure (that is actually bad and you have to design the tests to prevent this happening.. but it is happening especially with no-ORM, no-Transactions DAL). Also, one bad surpise could be if database tests deletes some data required for development testing.
</p>
<p>
So, it should be <code>Test Database != Developer Database</code>, test database and developer database are different instances actually. Test database must be restored with save version of developers database, but in general it is empty and its state is not changed after testing complete.
</p>
<p>
I'm using <a href="http://www.beletsky.net/2010/10/roundhouse-your-database.html">RoundhousE</a> to deploy database. As I was describing in previous post I use <code>initdb.bat</code> and <code>resetdb.bat</code> to initialize and reset developer database. I've just created 2 others that do exactly the same but for <code>trackytest</code> database, <a href="https://github.com/alexanderbeletsky/Trackyourtasks.net/blob/master/inittestdb.bat">inittestdb.bat</a>, <a href="https://github.com/alexanderbeletsky/Trackyourtasks.net/blob/master/resettestdb.bat">resettestdb.bat</a>. In the same time, <code>app.confing</code> of test project is pointed to <code>trackytest</code> (instead of <code>trackydb</code> before). So now tests are running on <code>trackytest</code>, but the application itself on <code>trackydb</code>.
</p>
<p>
It is very convenient to work like that.
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crawling a web sites with HtmlAgilityPack]]></title>
    <link href="http://beletsky.net/2010/09/crawling-web-sites-with-htmlagilitypack.html"/>
    <updated>2010-09-16T15:46:00+03:00</updated>
    <id>http://beletsky.net/2010/09/crawling-web-sites-with-htmlagilitypack</id>
    <content type="html"><![CDATA[<div class='post'>
<h1>Introduction</h1><p>This is a first post of small series that I'm going to describe implementation and design of Crawler, that I&#39;ve      done recently for <a href="http://www.beletsky.net/2010/09/is-tdd-skill-actually-required-by.html">TDD demand analisys</a>. I would split it up into several parts, covering its major architectural parts. </p><ul><li> Part 1 - Crawling a web sites with HtmlAgilityPack </li>
<li> Part 2 - Regex to match a words in dictionary on page body </il><br />
<li> Part 3 - EF4 Code First approach to store data </li><br />
<br />
</ul><p>For references, you could use a source code - <a href="http://github.com/alexanderbeletsky/tdd.demand">http://github.com/alexanderbeletsky/tdd.demand</a> </p><p><small><em>Warning</em> it's quite long post, cause contain code examples, if you understand basic ideas I put here, best way it to go directly to repository and see the code, as best explanation material</small> </p><h1>Using HtmlAgilityPack</h1><p><a href="http://htmlagilitypack.codeplex.com/">HtmlAgilityPack</a> is one of the great open sources projects I ever worked with. It is a HTML parser for .NET applications, works with great performance, supports malformed HTML. I successfully used in one of the projects and really liked it. It contains very few documentation, but it designed so well that you can get basic understanding just by looking to Visual Studio Object Browser. </p><p>So, then you need to deal with HTML in .NET - <a href="http://htmlagilitypack.codeplex.com/">HtmlAgilityPack</a> is a definitely framework of choice.  </p><p>I've downloaded latest version and were very pleased that now it supports Linq to Objects. That makes usage of HtmlAgilityPack more simple and fun. I'll give you just a simple idea how it works. Task of every crawler is to extract some information from particular html page. Say, we need to get inner text from div element with class "required". We have a 2 options here, classical one, using <a href="http://www.w3.org/TR/xpath/">XPATH</a> and brand new, using <a href="http://msdn.microsoft.com/en-us/library/bb397919.aspx">Linq to Objects</a>. </p><h3>XPATH approach</h3><p><blockquote><code><font size="2" face="Courier New" color="black"><font color="#0000ff">public</font> <font color="#0000ff">string</font> GetInnerTestWithXpath() { &nbsp;&nbsp;<font color="#0000ff">var</font> document = <font color="#0000ff">new</font> HtmlDocument(); &nbsp;&nbsp;document.Load(<font color="#0000ff">new</font> <font color="#2B91AF">FileStream</font>(<font color="#A31515">"test.html"</font>, <font color="#2B91AF">FileMode</font>.Open));  &nbsp;&nbsp;<font color="#0000ff">var</font> node = document.DocumentNode.SelectSingleNode(<font color="#A31515">@"//div[@class="</font><font color="#A31515">"required"</font><font color="#A31515">"]"</font>); &nbsp;&nbsp;<font color="#0000ff">return</font> node.InnerText; } </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code>
</blockquote></p><h3>Linq to Objects approach</h3><p><blockquote><code><font size="2" face="Courier New" color="black"><font color="#0000ff">public</font> <font color="#0000ff">string</font> GetInnerTextWithLinq() { &nbsp;&nbsp;<font color="#0000ff">var</font> document = <font color="#0000ff">new</font> HtmlDocument(); &nbsp;&nbsp;document.Load(<font color="#0000ff">new</font> <font color="#2B91AF">FileStream</font>(<font color="#A31515">"test.html"</font>, <font color="#2B91AF">FileMode</font>.Open));  &nbsp;&nbsp;<font color="#0000ff">var</font> node = document.DocumentNode.Descendants(<font color="#A31515">"div"</font>).Where( &nbsp;&nbsp;&nbsp;&nbsp;d =&#62; d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"required"</font>)).SingleOrDefault(); &nbsp;&nbsp;<font color="#0000ff">return</font> node.InnerText; } </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote></p><p>As I personally like Linq to Objects approach, sometimes XPATH is more convenient and elegant (especially in cases you refer to page elements with out ids or special attributes). </p><h1>Loading pages using WebRequest</h1><p>In previous example I loaded page content from file, located on disk. Now, our goal is to load pages by URL using HTTP. .NET framework has a special <a href="http://msdn.microsoft.com/en-us/library/system.net.webrequest.aspx">WebRequest</a>. I've created a separate class <em>HtmlDocumentLoader</em> (that implements IHtmlDocumentLoader interface) that all the details inside.  </p><blockquote><code><font size="2" face="Courier New" color="black"><font color="#0000ff">using</font> System; <font color="#0000ff">using</font> System.Collections.<font color="#2B91AF">Generic</font>; <font color="#0000ff">using</font> System.Linq; <font color="#0000ff">using</font> System.Text; <font color="#0000ff">using</font> System.Net; <font color="#0000ff">using</font> System.Threading;  <font color="#0000ff">namespace</font> Crawler.Core.Model { &nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">class</font> HtmlDocumentLoader : IHtmlDocumentLoader &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> WebRequest CreateRequest(<font color="#0000ff">string</font> url) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> request = (HttpWebRequest)WebRequest.Create(url); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.Timeout = 5000;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.UserAgent = <font color="#A31515">@"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5"</font>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> request; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> HtmlAgilityPack.HtmlDocument LoadDocument(<font color="#0000ff">string</font> url) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> document = <font color="#0000ff">new</font> HtmlAgilityPack.HtmlDocument();  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">try</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">using</font> (<font color="#0000ff">var</font> responseStream = CreateRequest(url).GetResponse().GetResponseStream()) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.Load(responseStream, <font color="#2B91AF">Encoding</font>.UTF8); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">catch</font>(Exception )  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//just do a second try</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.Sleep(1000); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">using</font> (<font color="#0000ff">var</font> responseStream = CreateRequest(url).GetResponse().GetResponseStream()) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.Load(responseStream, <font color="#2B91AF">Encoding</font>.UTF8); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> document; &nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;} } </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote><p>Several comments here. First, You can see that we load UserAgent property of WebRequest. We are making our request look that same as it would be a Firefox web browser. Some web servers could prevent web requests from "unknown&quot;      agents, so this is kind of preventive action. Second, is how document object is being intialized.. as you might see we have a try/catch block here and just repeat the same initialization steps in catch block. It might happen that web server fails to process requirest (due to different reasons), so WebRequest object will throw and exception. We just wait for one second and retry it. I've noticed that such simple approach could really improve robustness of crawler.   </p><h1>Generic Crawler</h1><p>So, now we know how to load HTML documents by using of WebRequest, specifying document URL, also we know how to use HtmlAgilityPack to extract data from a document. Now, we have to create an engine, that would automatically go through the document, extract the links for next portion of data, process data and store it. That is something that is called crawler. </p><p>As I implemented and tested several crawlers, I've seen that all off them have the same structure and operations and differs only in particular details of how data is extracted from pages. So, I came up with a generic crawler, implemented as abstract class. If you need to build next crawler you just inherit generic crawler and implement all abstract operations. Let's see the heart of crawler, StartCrawling() method.  </p><blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">virtual</font> <font color="#0000ff">void</font> StartCrawling() &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(BaseUrl + <font color="#A31515">" crawler started..."</font>);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CleanUp();  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">for</font> (<font color="#0000ff">var</font> nextPage = 1; ; nextPage++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> url = CreateNextUrl(nextPage); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> document = Loader.LoadDocument(url);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"processing page: ["</font> + nextPage.ToString() + <font color="#A31515">"] with url: "</font> + url);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> rows = GetJobRows(document); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> rowsCount = rows.Count();  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"extracted "</font> + rowsCount + <font color="#A31515">" vacations on page"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> (rowsCount == 0) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"no more vacancies to process, breaking main loop"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">break</font>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"starting to process all vacancies"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">foreach</font> (<font color="#0000ff">var</font> row <font color="#0000ff">in</font> rows) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"starting processing div, extracting vacancy href..."</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> vacancyUrl = GetVacancyUrl(row); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> (vacancyUrl == <font color="#0000ff">null</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"FAILED to extract vacancy href, not stopped, proceed with next one"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">continue</font>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"started to process vacancy with url: "</font> + vacancyUrl); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> vacancyBody = GetVacancyBody(Loader.LoadDocument(vacancyUrl)); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> (vacancyBody == <font color="#0000ff">null</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"FAILED to extract vacancy body, not stopped, proceed with next one"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">continue</font>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> position = GetPosition(row); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> company = GetCompany(row); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> technology = GetTechnology(position, vacancyBody); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> demand = GetDemand(vacancyBody);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> record = <font color="#0000ff">new</font> TddDemandRecord() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Site = BaseUrl, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Company = company, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Position = position, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Technology = technology, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Demand = demand, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Url = vacancyUrl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"new record has been created and initialized"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repository.Add(record); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repository.SaveChanges(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"record has been successfully stored to database."</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"finished to process vacancy"</font>);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(<font color="#A31515">"finished to process page"</font>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.Log(BaseUrl + <font color="#A31515">" crawler has successfully finished"</font>); &nbsp;&nbsp;&nbsp;&nbsp;} </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote><p>It uses abstract fields of Loader, Logger and Repository. We have already reviewed Loader functionality, Logger is simple interface with Log method (I've created one implementaion to put log messages to console, that is enough to me) and Repository that we will review next time. </p><p>GetTechnology, GetDemand methods are the same for all crawlers, so they are part of generic crawler, rest of operations are "site-dependent", so each crawler overrides its behavior. </p><blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#2B91AF">IEnumerable</font>&#60;HtmlAgilityPack.HtmlNode&#62; GetJobRows(HtmlAgilityPack.HtmlDocument document); &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#0000ff">string</font> CreateNextUrl(<font color="#0000ff">int</font> nextPage); &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#0000ff">string</font> GetVacancyUrl(HtmlAgilityPack.HtmlNode row); &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#0000ff">string</font> GetVacancyBody(HtmlAgilityPack.HtmlDocument htmlDocument); &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#0000ff">string</font> GetPosition(HtmlAgilityPack.HtmlNode row); &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">abstract</font> <font color="#0000ff">string</font> GetCompany(HtmlAgilityPack.HtmlNode row); </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote><p>Here, we'll review one of the crawlers and how it implements all methods required by CrawlerImpl class. </p><blockquote><code><font size="2" face="Courier New" color="black"> <font color="#0000ff">namespace</font> Crawler.Core.Crawlers { &nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">class</font> RabotaUaCrawler : CrawlerImpl, ICrawler &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">string</font> _baseUrl = <font color="#A31515">@"http://rabota.ua"</font>; &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">string</font> _searchBaseUrl = <font color="#A31515">@"http://rabota.ua/jobsearch/vacancy_list?rubricIds=8,9&#38;keyWords=&#38;parentId=1"</font>;  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> RabotaUaCrawler(ILogger logger) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger = logger; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> Crawle(IHtmlDocumentLoader loader, ICrawlerRepository context) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Loader = loader; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repository = context;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartCrawling(); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> BaseUrl &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">get</font> { <font color="#0000ff">return</font> _baseUrl; } &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> SearchBaseUrl &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">get</font> { <font color="#0000ff">return</font> _searchBaseUrl; } &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#2B91AF">IEnumerable</font>&#60;HtmlAgilityPack.HtmlNode&#62; GetJobRows(HtmlAgilityPack.HtmlDocument document) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> vacancyDivs = document.DocumentNode.Descendants(<font color="#A31515">"div"</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(d =&#62; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"vacancyitem"</font>)); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> vacancyDivs; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> GetVacancyUrl(HtmlAgilityPack.HtmlNode div) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> vacancyHref = div.Descendants(<font color="#A31515">"a"</font>).Where( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d =&#62; d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"vacancyDescription"</font>)) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(d =&#62; d.Attributes[<font color="#A31515">"href"</font>].Value).SingleOrDefault(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> BaseUrl + vacancyHref; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">static</font> <font color="#0000ff">string</font> GetVacancyHref(HtmlAgilityPack.HtmlNode div) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> vacancyHref = div.Descendants(<font color="#A31515">"a"</font>).Where( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d =&#62; d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"vacancyDescription"</font>)) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(d =&#62; d.Attributes[<font color="#A31515">"href"</font>].Value).SingleOrDefault(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> vacancyHref; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> CreateNextUrl(<font color="#0000ff">int</font> nextPage) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> SearchBaseUrl + <font color="#A31515">"&#38;pg="</font> + nextPage; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> GetVacancyBody(HtmlAgilityPack.HtmlDocument vacancyPage) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> (vacancyPage == <font color="#0000ff">null</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//TODO: log event here and skip this page</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> <font color="#0000ff">null</font>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> description = vacancyPage.DocumentNode.Descendants(<font color="#A31515">"div"</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d =&#62; d.Attributes.Contains(<font color="#A31515">"id"</font>) &#38;&#38; d.Attributes[<font color="#A31515">"id"</font>].Value.Contains(<font color="#A31515">"ctl00_centerZone_vcVwPopup_pnlBody"</font>)) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(d =&#62; d.InnerHtml).SingleOrDefault(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> description; &nbsp;&nbsp;&nbsp;&nbsp;}   &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> GetPosition(HtmlAgilityPack.HtmlNode div) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> div.Descendants(<font color="#A31515">"a"</font>).Where( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d =&#62; d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"vacancyName"</font>) || d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"jqKeywordHighlight"</font>) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ).Select(d =&#62; d.InnerText).First(); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">override</font> <font color="#0000ff">string</font> GetCompany(HtmlAgilityPack.HtmlNode div) &nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> div.Descendants(<font color="#A31515">"div"</font>).Where( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d =&#62; d.Attributes.Contains(<font color="#A31515">"class"</font>) &#38;&#38; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Attributes[<font color="#A31515">"class"</font>].Value.Contains(<font color="#A31515">"companyName"</font>)).Select(d =&#62; d.FirstChild.InnerText).First(); &nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;} } </font> <font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote><p>To make a picture complete, just review implementation of the rest of crawlers- <a href="http://github.com/alexanderbeletsky/tdd.demand/tree/master/src/Crawler/Core/Crawlers/">http://github.com/alexanderbeletsky/tdd.demand/tree/master/src/Crawler/Core/Crawlers/</a> </p><h2>Conclusions</h2><p>You might see that implementation of simple crawler as a simple thing as soon as you got good tools for that. Of cause, the functionality of it as very specific and limited, but I hope it could give you ideas for your own crawlers. </p><p>In next blog post I'll cover a topic of usage Regex in .NET and brand-new-cool-looking Entity Framework 4 Code First approach to work with databases.  </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD, Implementation of Repository pattern with Linq to SQL]]></title>
    <link href="http://beletsky.net/2010/06/ddd-implementation-of-repository.html"/>
    <updated>2010-06-30T19:06:00+03:00</updated>
    <id>http://beletsky.net/2010/06/ddd-implementation-of-repository</id>
    <content type="html"><![CDATA[<div class='post'>
Lets review first and one of major DDD pattern - Repository. Repository is something that provides access to an entities objects (domain objects). Here what DDD patterns guide says on Repositories:
<br />
<br />
<i>
For each type of object that needs global access, create an object that can provide the illusion of an in-memory collection of all objects of that type. Set up access through a well-known global interface. Provide methods to add and remove objects, which will encapsulate the actual insertion or removal of data in the data store. Provide methods that select objects based on some criteria and return fully instantiated objects or collections of objects whose attribute values meet the criteria, thereby encapsulating the actual storage and query technology. Provide repositories only for aggregate roots that actually need direct access. Keep the client focused on the model, delegating all object storage and access to the repositories.
</i>
<br />
<br />
<h2>Preparation</h2>
<br />
Suppose we are having a database with table Users in it. First of all we have to create a Data Model class. To do that you can add "New item" to you class library (or application) and select Linq to Classes.
<br />
<br />
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_stL4bIIuRUs/TCtrtiIPoMI/AAAAAAAAG1o/gFWf5MBbwMo/s1600/LinqToClasses.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 247px;" src="http://3.bp.blogspot.com/_stL4bIIuRUs/TCtrtiIPoMI/AAAAAAAAG1o/gFWf5MBbwMo/s400/LinqToClasses.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5488599000880750786" /></a>
<br />
<br />
This will add new .dbml file your project. There are 2 ways of addition new entities to model. Either by designer (easy to use) or manually by coding .dbml file (harder to user by more flexibility). We will just use first way as more quick one. Just open you db in Server explorer and drag-and-drop Users table to .dbml designer. You will see something like that,
<br />
<br />
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_stL4bIIuRUs/TCtr2X9znlI/AAAAAAAAG1w/fTqMklm0_WM/s1600/UsersInDesigner.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 216px;" src="http://2.bp.blogspot.com/_stL4bIIuRUs/TCtr2X9znlI/AAAAAAAAG1w/fTqMklm0_WM/s400/UsersInDesigner.png" border="0" alt=""id="Img1" /></a>
<br />
<br />
Now if you open corresponding .cs file of Data Model you can easily see what code is actually generated by Linq to SQL. Let's quickly review it. So, most improtant class is DataContext.
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;[global::System.Data.Linq.Mapping.DatabaseAttribute(Name=<font color="#A31515">"trackyourtasksdb"</font>)]<br>&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">partial</font> <font color="#0000ff">class</font> TrackYourTasksDataContext : System.Data.Linq.DataContext<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">static</font> System.Data.Linq.Mapping.MappingSource mappingSource = <font color="#0000ff">new</font> AttributeMappingSource();<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
<a href="http://msdn.microsoft.com/en-us/library/system.data.linq.datacontext.aspx">DataContext</a> is something that suppose provide access to tables and objects and track the state of these objects. It uses SubmitChanges() method to flush the data to database. It is lightweight object and you should instantiate in in method of class scope, there are no reasons to keep a single copy of object for whole application. It is not only possible to work with tables within DataContext, but stored procedures as well.  
<br />
<br />
Besides of that the object represenation of table record is generated. The class is called User (please not that Linq to SQL is removing plural -s suffix by itself). 
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;[global::System.Data.Linq.Mapping.TableAttribute(Name=<font color="#A31515">"dbo.Users"</font>)]<br>&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">partial</font> <font color="#0000ff">class</font> User : INotifyPropertyChanging, INotifyPropertyChanged<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">static</font> PropertyChangingEventArgs emptyChangingEventArgs = <font color="#0000ff">new</font> PropertyChangingEventArgs(<font color="#2B91AF">String</font>.Empty);<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">int</font> _Id;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">string</font> _Email;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">string</font> _SecretPhrase;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> <font color="#0000ff">string</font> _Password;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">private</font> System.Data.Linq.Binary _Timestamp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//...</font><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> User()<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnCreated();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[global::System.Data.Linq.Mapping.ColumnAttribute(Storage=<font color="#A31515">"_Id"</font>, AutoSync=AutoSync.OnInsert, DbType=<font color="#A31515">"Int NOT NULL IDENTITY"</font>, IsPrimaryKey=<font color="#0000ff">true</font>, IsDbGenerated=<font color="#0000ff">true</font>, UpdateCheck=UpdateCheck.Never)]<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">protected</font> <font color="#0000ff">int</font> Id<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">get</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> <font color="#0000ff">this</font>._Id;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">set</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ((<font color="#0000ff">this</font>._Id != <font color="#0000ff">value</font>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.OnIdChanging(<font color="#0000ff">value</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.SendPropertyChanging();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>._Id = <font color="#0000ff">value</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.SendPropertyChanged(<font color="#A31515">"Id"</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.OnIdChanged();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[global::System.Data.Linq.Mapping.ColumnAttribute(Storage=<font color="#A31515">"_Email"</font>, DbType=<font color="#A31515">"NVarChar(MAX) NOT NULL"</font>, CanBeNull=<font color="#0000ff">false</font>, IsPrimaryKey=<font color="#0000ff">true</font>, UpdateCheck=UpdateCheck.Never)]<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">string</font> Email<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">get</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> <font color="#0000ff">this</font>._Email;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">set</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ((<font color="#0000ff">this</font>._Email != <font color="#0000ff">value</font>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.OnEmailChanging(<font color="#0000ff">value</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.SendPropertyChanging();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>._Email = <font color="#0000ff">value</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.SendPropertyChanged(<font color="#A31515">"Email"</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">this</font>.OnEmailChanged();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//...</font><br><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote><br />
<br />
<br />
So as you see it incapsulates fields of table as corresponding properties of object. 
<br />
<br />
<h2>Interface</h2>
<br />
As it said above Repository have to add, remove as well as search and update objects. Note, that we work work with db record (entities classes) as we just work with in-memory objects. 
<br />
<br />
It is always good idea to work with such structures as Repositories, Factories, Services etc. throught interface. First of all, because it conforms to common object oriented design guidlines and make us possibility to have different implementation classes that would provide different behavior. Second, that with interfaces you can substitute real object with mock object during testing. Moreover with interfaces it is easy to use <a href="http://martinfowler.com/articles/injection.html">Dependency Injection</a> pattern, that improves application flexability and testability.
<br />
<br />
User repository interface looks like,
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black"><font color="#0000ff">using</font> System;<br><font color="#0000ff">using</font> System.Linq;<br><font color="#0000ff">using</font> System.Text;<br><font color="#0000ff">using</font> Trackyourtasks.Core.DAL.DataModel;<br><br><font color="#0000ff">namespace</font> Trackyourtasks.Core.DAL<br>{<br>&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">interface</font> IUsersRepository<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;User FindUserById(<font color="#0000ff">int</font> id);<br>&nbsp;&nbsp;&nbsp;&nbsp;User FindUserByEmail(<font color="#0000ff">string</font> email);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">void</font> SaveUser(User user);<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">void</font> DeleteUser(User user);<br>&nbsp;&nbsp;}<br>}<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
Now let's implement this repository with Linq to SQL tools. We would review all methods, one by one.
<br />
<br />
<u>Construction of Repository:</u>
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black"><font color="#0000ff">using</font> System;<br><font color="#0000ff">using</font> System.Collections.<font color="#2B91AF">Generic</font>;<br><font color="#0000ff">using</font> System.Linq;<br><font color="#0000ff">using</font> System.Text;<br><font color="#0000ff">using</font> Trackyourtasks.Core.DAL.DataModel;<br><br><font color="#0000ff">namespace</font> Trackyourtasks.Core.DAL<br>{<br>&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">class</font> UsersRepository : IUsersRepository<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;TrackYourTasksDataContext _context = <font color="#0000ff">new</font> TrackYourTasksDataContext();<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
As you see I instantiate DataContext object as a member of UsersRepository class. So, it will be alive and tracking objects since UserRepository class is alive. 
<br />
<br />
<u>Find methods:</u>
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> User FindUserById(<font color="#0000ff">int</font> id)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> (<font color="#0000ff">from</font> user <font color="#0000ff">in</font> _context.Users <font color="#0000ff">where</font> user.Id == id <font color="#0000ff">select</font> user).SingleOrDefault();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> User FindUserByEmail(<font color="#0000ff">string</font> email)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> (<font color="#0000ff">from</font> user <font color="#0000ff">in</font> _context.Users <font color="#0000ff">where</font> user.Email == email <font color="#0000ff">select</font> user).SingleOrDefault();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
Impelementation is just a simple Linq query that selects object either by Id or Email. I use <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.singleordefault.aspx">SingleOrDefault()</a> that returns object if found and default if not (null in my case). 
<br />
<br />
<u>Save and Update methods:</u>
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> SaveUser(User user)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> (user.Id == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_context.Users.InsertOnSubmit(user);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_context.SubmitChanges();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
So, if are created user entiry by new operator it will contain Id == 0 (meaning no Id, yet), as we passing it to Save method it will check is this object persistant or not and if not it will be add it to storage. Since context object is not disposed after, it still continue track object changes, so if we decieded to change some object fields and store it all we need to do is call <a href="http://msdn.microsoft.com/en-us/library/system.data.linq.datacontext.submitchanges.aspx">SubmitChanges()</a> method and corrsponding record will be updated. I'll put some tests here to see how it works:
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;[Test]<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> InsertUser()<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//INIT</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> register = <font color="#0000ff">new</font> UsersRepository();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//ACT</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> user = <font color="#0000ff">new</font> User()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = <font color="#A31515">"email"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretPhrase = <font color="#A31515">"sec"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password = <font color="#A31515">"pass"</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register.SaveUser(user);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//POST</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> actual = register.FindUserByEmail(<font color="#A31515">"email"</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(actual, Is.Not.Null);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[Test]<br>&nbsp;&nbsp;&nbsp;&nbsp;[ExpectedException(<font color="#0000ff">typeof</font>(DuplicateKeyException))]<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> InsertUserTwice()<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//INIT</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> register = <font color="#0000ff">new</font> UsersRepository();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//ACT / POST</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> user = <font color="#0000ff">new</font> User()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = <font color="#A31515">"email"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretPhrase = <font color="#A31515">"sec"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password = <font color="#A31515">"pass"</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register.SaveUser(user);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> newUser = <font color="#0000ff">new</font> User()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = <font color="#A31515">"email"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretPhrase = <font color="#A31515">"sec"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password = <font color="#A31515">"pass"</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register.SaveUser(newUser);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[Test]<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> UpdateUser()<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//INIT</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> register = <font color="#0000ff">new</font> UsersRepository();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> user = <font color="#0000ff">new</font> User()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = <font color="#A31515">"email"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretPhrase = <font color="#A31515">"sec"</font>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password = <font color="#A31515">"pass"</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register.SaveUser(user);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//ACT</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.SecretPhrase = <font color="#A31515">"newsec"</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register.SaveUser(user);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//POST</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">var</font> foundUser = register.FindUserById(user.Id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(foundUser, Is.Not.Null);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(foundUser.SecretPhrase, Is.EqualTo(<font color="#A31515">"newsec"</font>));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
<u>Delete Methods:</u>
<br />
<br />
<blockquote><code><font size="2" face="Courier New" color="black">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">public</font> <font color="#0000ff">void</font> DeleteUser(User user)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_context.Users.DeleteOnSubmit(user);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_context.SubmitChanges();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></font><br><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>
<br />
<br />
So object is marked as to be deleted by calling <a href="http://msdn.microsoft.com/en-us/library/bb763473.aspx">DeleteOnSubmit()</a> and it will be actually deleted on SubmitChanges() call. 
<br />
<br />
<h2>Conclusions</h2>
<br />
<br />
<p>
It is really easy to start up with Repositories keeping its implementation as simple as possible. Of cause, typicaly data structure in databases are bit more complex than plain table. But it is still possible to work with this pattern, combining with Repositories, Aggregates, Entities and Values.
</p></div>

]]></content>
  </entry>
  
</feed>
