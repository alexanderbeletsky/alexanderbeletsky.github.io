<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opensource | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2015-01-30T16:49:05+01:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Email, SMS and Push Notifications Server]]></title>
    <link href="http://beletsky.net/2014/08/notifier-email-sms-push-notifications.html"/>
    <updated>2014-08-22T15:38:00+02:00</updated>
    <id>http://beletsky.net/2014/08/notifier-email-sms-push-notifications</id>
    <content type="html"><![CDATA[<p>I recently came up with very convenient component &ndash; <a href="https://github.com/likeastore/notifier">likeastore/notifier</a>. Notifier is easy to setup Email, SMS and Push Notifications Server. It&rsquo;s been open sourced few month, very specific to <a href="https://likeastore.com">Likeastore</a> needs, but due to great <a href="https://github.com/likeastore/notifier/graphs/contributors">contributions</a> it became very generic and can be used in your projects as well.</p>

<p>Once you need to setup infrastructure for notifications in your application, it will be really easy to do. It provides transport of <a href="https://github.com/jimrubenstein/node-mandrill">Mandrill</a>, <a href="https://github.com/twilio/twilio-node">Twilio</a>, <a href="https://github.com/ToothlessGear/node-gcm">Android</a> and <a href="https://github.com/argon/node-apn">iOS</a> push notifications.</p>

<!-- MORE -->


<h2>Starting up</h2>

<p>The project already has comprehensive <a href="https://github.com/likeastore/notifier/blob/master/README.md">README</a> that explains initial steps. At the moment, the server is available as github repository that you need to clone and prepare entry point for it. I&rsquo;m thinking to pack the things into one <code>npm</code> module. If you see it makes sense, please let me know.</p>

<p>To start, you need to clone the repo,</p>

<p><code>bash
$ git clone https://github.com/likeastore/notifier.git
</code></p>

<p>And then create <code>app.js</code> file, there all setup of <code>notifer</code> taking place.</p>

<p>```js
var notifier = require(&lsquo;./source/notifier&rsquo;);</p>

<p>// TODO: configuration</p>

<p>// start the server
notifier.start(process.env.PORT || 7000);
```</p>

<p>Let&rsquo;s go straight to <code>configuration</code> part.</p>

<h2>Events, Actions and Executors</h2>

<p>The <code>notifier</code> is HTTP server, that receives <code>event</code> and turns that event into corresponding <code>action</code>. One event could create as many actions as needed. Actions is something that later is going to be <code>executed</code>.</p>

<p>The basic setup consits of 3 parts: receive event, resolve event and execute it.</p>

<p>```js
notifier</p>

<pre><code>.receive('incoming-event', function (event, actions, callback) { /* ... */ })
.resolve('created-action', function (action, actions, callback) { /* ... */ })
.execute('created-action', function (action, transport, callback) { /* ... */ });
</code></pre>

<p>```</p>

<p>Say, we have <code>user-registered</code> event which we need to send a welcome email,</p>

<p>```js
notifier</p>

<pre><code>.receive('user-registered', function (e, actions, callback) {
    actions.create('send-welcome', {user: e.user}, callback);
})
.resolve('send-welcome', function (action, actions, callback) {
    db.users.findOne({email: action.user}, function (err, user) {
        if (err) {
            return callback(err);
        }

        if (!user) {
            return callback({message: 'user not found', email: action.email});
        }

        var data = {
            email: action.user,
            user: _.pick(user, userPick)
        };

        actions.resolved(action, data, callback);
    });
})
.execute('send-welcome', function (action, transport, callback) {
    var vars = [
        {name: 'USERID', content: action.data.user._id},
        {name: 'USER_NAME', content: action.data.user.displayName || action.data.user.name}
    ];

    transport.mandrill('/messages/send-template', {
        template_name: 'welcome-email',
        template_content: [],
        message: {
            auto_html: null,
            to: [{email: action.data.email}],
            global_merge_vars: vars,
            preserve_recipients: false
        }
    }, callback);
});
</code></pre>

<p>```</p>

<ul>
<li><code>recieve</code> &ndash; receives event from outside and turns the event into corresponding action.</li>
<li><code>resolve</code> &ndash; step to extend action with additional data, email, name of user etc.</li>
<li><code>execute</code> &ndash; uses the transport to transmit the event</li>
</ul>


<h2>Transports</h2>

<p>Mandrill provides support from emails notifications,</p>

<p>```js
.execute(&lsquo;send-welcome&rsquo;, function (action, transport, callback) {</p>

<pre><code>var vars = [
    {name: 'USERID', content: action.data.user._id},
    {name: 'USER_NAME', content: action.data.user.displayName || action.data.user.name}
];

transport.mandrill('/messages/send-template', {
    template_name: 'welcome-email',
    template_content: [],
    message: {
        auto_html: null,
        to: [{email: action.data.email}],
        global_merge_vars: vars,
        preserve_recipients: false
    }
}, callback);
</code></pre>

<p>});
```</p>

<p>Twilio is used for sms,</p>

<p>```js
.execute(&lsquo;send-verify-sms&rsquo;, function (a, transport, callback) {</p>

<pre><code>    transport.twilio.messages.create({
        to: a.data.phone,
        from: '+12282201270',
        body: 'Verification code: 1111',
    }, callback);
});
</code></pre>

<p>```</p>

<p>For Android push notifications,</p>

<p>```js
.execute(&lsquo;send-android-push-notification&rsquo;, function (a, transport, callback) {</p>

<pre><code>var tokens = [];
tokens.push(a.data.token);

transport.android.push({
    message: {key1: 'value1', key2: 'value2'},
    tokens: tokens,
    retries: 3
}, callback);
</code></pre>

<p>});
```</p>

<p>For Apple push notifications,</p>

<p>```js
.execute(&lsquo;send-ios-push-notification&rsquo;, function (a, transport, callback) {</p>

<pre><code>var tokens = [];
tokens.push(a.data.token);

transport.ios.push({
    production: false, // use specific gateway based on 'production' property.
    passphrase: 'secretPhrase',
    alert: { "body" : "Your turn!", "action-loc-key" : "Play" , "launch-image" : "mysplash.png"},
    badge: 1,
    tokens: tokens
}, callback);
</code></pre>

<p>});
```</p>

<h2>Configuration</h2>

<p>Before the run, you need to make sure the <code>notifier</code> is configured properly. Security tokens and connections strings to MongoDB. If you use Logentries, you can provide token and all logs will be submitted there.</p>

<p>The <code>accessToken</code> is a shared secret between server and client, to prevent unauthorized access.</p>

<p>The <a href="https://github.com/likeastore/notifier/blob/master/config/production.config.js">config</a> is using ENV variables on production and hardcoded values for development and staging.</p>

<h2>Clients</h2>

<p><code>notifier</code> can be used by any HTTP client, in most simple case <code>curl</code>,</p>

<p><code>bash
$ echo '{"event": "incoming-event"}' | curl -H "Content-Type:application/json" -d @- http://notifier.likeastore.com/api/events?access_token=ACCESS_TOKEN
</code></p>

<p>We already have Node.js client <a href="https://github.com/DemocracyOS/notifier-client">DemocracyOS/notifier-client</a> and plan to have browser client as well. But in essence it&rsquo;s just HTTP post with <code>event</code> payload and <code>access_token</code> in query string, so basically it can be used from any language and platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source]]></title>
    <link href="http://beletsky.net/2013/12/open-source.html"/>
    <updated>2013-12-31T12:00:00+01:00</updated>
    <id>http://beletsky.net/2013/12/open-source</id>
    <content type="html"><![CDATA[<p>I heard about open source probably the first year I started programming. I liked the idea of software to be not only presented as a final product, but with ability to see how things are done and change something if you want. For me, open source was really related to operational systems and drivers, Linux as great example.</p>

<p>A bit later I realised that open source is also about contribution. If you have a certain skills, you can join the project you interested in and try to help. I&rsquo;ve seen some nice open source examples &ndash; tiny operational systems, drivers, music players. Almost everything was C++. The problem with C++, it&rsquo;s hard to build something from sources. You typically missing some binaries, headers or SDK&rsquo;s you don&rsquo;t have on your machine.</p>

<!-- More -->


<p>When, I saw the change after Java and .NET after appeared. A lot of great things just became available in open source. Not only operation systems or drivers.. But rather tools. Like NUnit, Ninject, Moq etc. That you are using more as developer. Both .NET and Java unifies build process, so it&rsquo;s easy to deal with projects. Like compile version with debug info inside and play around with a debbuger.</p>

<p>Being involved to .NET development, I definitely saw the affect of open source. Community had informal competition between official Microsoft&rsquo;s frameworks and open source analogs. I would not say those analogs were perfectly good, but they were good enough to use it in real projects. But more important, you can join the project by submitting bug reports, fixing docs or send a patch.</p>

<p>The situation changed when first Git and GitHub after appeared. Git solved major open source problem, being easy to contribute back (distributed system and forks) and GitHub implemented pull request idea, that simplified code contribution a lot.</p>

<p>There are different opinions, but as for me GitHub really influenced open source world in a good way. Apparently, if you have GitHub account, you are a closer to open source as possible. First, you create you own repositories and trying to show the world something that you think matters, second you see a lot of other people project and could join anytime you want.</p>

<p>A lot of great examples of open source products appeared &ndash; MongoDB, Nginx, Docker, Redis, Node.js, NPM etc. That was my huge impression after I switched from .NET to JavaScript development.</p>

<p>Not only as a developer, but also as entrepreneur I see open source is great. The full stack for your product, could be open source.. from top to down. For <a href="https://likeastore.com/">Likeastore</a> we use something like: Ubuntu, Docker, Dokku, Git, Node.js, MondoDB, Express.js and hundreds others open source libraries. The costs of running on open source stack, significatly lower then licensed software. You still paying the money, but amount are really affordable for small companies.</p>

<p>Open Source is awesome.</p>

<p>I wish next year I can participate more open source projects, I&rsquo;ll create some useful projects and open source will became a culture of <a href="https://likeastore.com/">Likeastore</a> as well.</p>
]]></content>
  </entry>
  
</feed>
