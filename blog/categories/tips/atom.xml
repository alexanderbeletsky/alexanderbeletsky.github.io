<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2015-01-30T16:49:05+01:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Object Creation by New Operator]]></title>
    <link href="http://beletsky.net/2012/11/javascript-object-creation-by-new.html"/>
    <updated>2012-11-12T14:50:00+01:00</updated>
    <id>http://beletsky.net/2012/11/javascript-object-creation-by-new</id>
    <content type="html"><![CDATA[<div class='post'>
<p>        There are different approaches of how to create object in JavaScript. C# and Java programmers are commonly starting with creation by new operator, since it very close to same practice they got used to.<br />
    </p>    <pre class="brush: js">function Person (name) {
    this.name = name;
}

var person = new Person('John Smith');
console.log(person.name);
    </pre>    <p>        If you try to run this code, you will see 'John Smith' in console. Now, try to delete new operator.<br />
    </p>    <p>        Instead of 'John Smith' you will see undefined. Why?<br />
    </p>    <p>        The difference is that without new operator it is just function call. During the call `this` points global namespace. If you running the code in browser, global namespace is bind to `window`.<br />
    </p>    <p>        It's important to understand how new operator works. Internally, operator new is converted to NEW(Person, 'John Smith');. It does several things.<br />
    </p>    <ol>        <li>Creates new native object and initializes the __proto__ of object by function.prototype.</li>
        <li>Calls function, applying newly created object as value for <code>this</code>.</li>
        <li>Returns newly created object.</li>
    </ol>    <p>        It can be expressed in this kind of pseudo-code:<br />
    </p>    <pre class="brush: js">function NEW(f) {
    var obj = { '__proto__': f.prototype };
    f.apply(obj, arguments.slice(1));
    return obj;
}
</pre>    <p>        (It's a bit more complex actually, for details check this <a href="http://stackoverflow.com/questions/6750880/javascript-how-does-new-work-internally">great answer</a> on SO).<br />
    </p>    <p>        It means that during function call with `new operator()`, <code>this</code> always points to a new object, created based on function prototype. You can initialize the properties of new object inside the function. It's no longer a simple function, but it is constructing function, or more simply - constructor.<br />
    </p>    <p>        To distinguish between constructors (that are always supposed to be called with `new`) and simple function, there is a convention to name a constructors with capital first letter (not person(), but Person()), just to give you some tips while you writing the code.<br />
    </p>    <p>        Knowing NEW() details of work and following simple conventions for constructors will help you to understand language better and prevent many stupid errors.<br />
    </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing Web Applications Faster]]></title>
    <link href="http://beletsky.net/2012/08/developing-web-applications-faster.html"/>
    <updated>2012-08-20T11:20:00+02:00</updated>
    <id>http://beletsky.net/2012/08/developing-web-applications-faster</id>
    <content type="html"><![CDATA[<div class='post'>
<p>    If you haven't seen Bret Victor's <a href="http://vimeo.com/36579366">talk</a>, please find 54 minutes and do it. This video is giving many interesting ideas, inspiring people to create new things. The main idea of his talk (at least as I understood it), is whatever you do, you have to see the result of your work as soon as possible. This short feedback cycle is important, cause it leads to better ideas and good productivity.<br />
</p><p>    As a developers, we do code. Applying Victor's principle, ideally we should have this code immediately running and showing it's results of execution. Some experimental IDE's like <a href="http://www.chris-granger.com/2012/04/12/light-table---a-new-ide-concept/">Light Table</a> is trying to adopt this principle now. <br />
</p><p>    If you develop web applications, you spend much time working with HTML/CSS/JS, which being executed by browser. The typical workflow, is to open your text editor, correct some mark-up or javascript code, then switch to browser, press F5 and see the results. It doesn't sound like a big job, but believe me, it's getting annoying and boring in very short time.<br />
</p><h2>LiveReload comes to help</h2><p>    Ideal workflow is something like, you apply changes to JS, press Ctrl + S in your text editor and browser get's immediately reloaded, showing the results of execution. That's sounds really cool and fortunately there is great solution for that. It's called <a href="https://github.com/mockko/livereload">LiveReload</a> from <a href="https://github.com/andreyvit">Andrey Tarantsov</a>.<br />
</p><p>    It can be installed as either a <code>&lt;script type=&quot;javascript&quot; scr=&quot;/libs/livereload.js&quot;&gt;&lt;/script&gt;</code> tag in your app, or as a browser plug-in. I prefer the plug-in way, since it could work with any app and requires no code modifications. There plugins for <a href="https://www.google.com.ua/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CFYQFjAA&url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fjnihajbhpnppcggbcgedagnkighmdlei&ei=Ld8xUOzuD8bhtQaThIGYAw&usg=AFQjCNGfX_zDQVCEb-jaq2-TSiR7TqxQWw&sig2=039AdwBtqrpgzbt-irnUcQ">Chrome</a>, <a href="https://www.google.com.ua/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&sqi=2&ved=0CEMQFjAA&url=https%3A%2F%2Faddons.mozilla.org%2Fen-us%2Ffirefox%2Faddon%2Flivereload%2F&ei=f98xUMPVM4rTtAbVioHgAg&usg=AFQjCNGsE_l-orw8MwyGW9mcQ2-y8H2F5Q&sig2=lYx9rMgyuI2384_1y2MZ8w">FireFox</a> and <a href="http://download.livereload.com/2.0.8/LiveReload-2.0.8.safariextz">Safari</a>.<br />
</p><p>    How does it work? Take a look on a diagram.<br />
</p><a href="https://lh4.googleusercontent.com/-F9itf6E8NAA/UDIAFm3zrsI/AAAAAAAAJAE/3LEaKfedmls/s776/image-1.png"><br />
    <img src="https://lh4.googleusercontent.com/-F9itf6E8NAA/UDIAFm3zrsI/AAAAAAAAJAE/3LEaKfedmls/s776/image-1.png" style="width: 620px"/><br />
</a><br />
<p>    The LiveReload plug-in (or livereload.js script) expect's that there is Web Socket Server, where it connects to and start to listen for changes. Web Socket Server is responsible for tracking changes and if changes occurred, it send the package of data with information about the changes, back to the web socket. LiveReload receives the data and reloads the browser.<br />
</p><p>    As you installed plug-in and pressed "LR" button, it's gonna light green if connection to server is successful, otherwise it will pop-up the message, that server is not available.<br />
</p><a href="https://lh5.googleusercontent.com/-R7b4Vtvid0g/UDIAFn5cdxI/AAAAAAAAJAA/MUpTAS2pizU/s535/image-3.png"><br />
    <img src="https://lh5.googleusercontent.com/-R7b4Vtvid0g/UDIAFn5cdxI/AAAAAAAAJAA/MUpTAS2pizU/s535/image-3.png" style="width: 620px"/><br />
</a><br />
<p>    So, to make LiveReload work properly we have to provide an Web Socket Server, that conforms to LiveReload interface. <br />
</p><h2>LiveReload + Sublime Text 2</h2><p>    There is a great plug-in for Sublime Text 2, from <a href="https://github.com/dz0ny">Janez Troha</a> called, <a href="https://github.com/dz0ny/LiveReload-sublimetext2">LiveReload-sublimetext2</a>. It's get easily installed through standard ST2 package installer (package name is "LiveReload"). Basically, it instantiate Web Socket Server inside the sublime, listening to editors event's and push data to socket.<br />
</p><p>    As soon as it's installed, and browser connected to it, you can now modify any HTML/JS/CSS file. As file get changed and saved, you will see LiveReload-sublimetext2 will immediately send the command and browser got refreshed.<br />
</p><a href="https://lh3.googleusercontent.com/-N21_9n_1At0/UDIAGA6k7II/AAAAAAAAJAM/7pWtPo9sKm4/s620/image-4.png"><br />
    <img src="https://lh3.googleusercontent.com/-N21_9n_1At0/UDIAGA6k7II/AAAAAAAAJAM/7pWtPo9sKm4/s620/image-4.png" style="width: 620px"/><br />
</a><br />
<p>    When I first time tried that, I could not believe how smooth it was. Can't even believe how I lived with-out it before. Nothing to add here, just nice and easy.<br />
</p><h2>LiveReload + any IDE</h2><p>    "Any IDE" in my case means Visual Studio, where I spent some time if I'm not Sublime. Unfortunately, there are no dedicated plugin for VS (as seems there are no for JIdea and Eclipse, so good opportunity for developers). Even so, you have a chance to get benefits of LiveReload. All you need to have is <a href="http://nodejs.org/">Node.js</a> or <a href="http://www.ruby-lang.org/en/">Ruby</a> installed on your machine.<br />
</p><p>    Originally, LiveReload comes with Ruby-based <a href="https://github.com/mockko/livereload/tree/master/server">server</a>, that you can install and used from gems. I'm not much that comfortable with Ruby, so I went Node.js way.<br />
</p><p>    There is Node-base LiveReload web socket <a href="https://github.com/josh/node-livereload">server</a> from <a href="https://github.com/josh">Joshua Peek</a>. It's written in coffee-script and actually really easy to adopt. Here is an <a href="https://github.com/alexbeletsky/candidate/tree/master/tools/livereload">example</a>, how I used that for my project. With a simple .cmd, I start up livereload, specifying which folder to observe.<br />
</p><pre class="brush: plain">    @echo off
    node ./tools/livereload/server.js ./src/Candidate.Nancy.Selfhosted/Client/
</pre><p>    It will start up the server, wait till browser connects and watch all files in folder for changes.<br />
</p><a href="https://lh3.googleusercontent.com/-Clurp7tbGjA/UDIAGXCTBGI/AAAAAAAAJAQ/ghdC6eHVSQc/s620/image-5.png"><br />
    <img src="https://lh3.googleusercontent.com/-Clurp7tbGjA/UDIAGXCTBGI/AAAAAAAAJAQ/ghdC6eHVSQc/s620/image-5.png" style="width: 620px"/><br />
</a><br />
<p>    Not everything so perfect with that approach, though. There are 2 reasons, why I did not finally like that:<br />
</p><ol>    <li>It is slow. Internally node-livereload uses <code>fs.watchFile</code>, which is quite slow (at least on Windows). That mean's if you save the file, it takes 1-1.5 seconds for browser to refresh.<br />
    </li>
    <li>Does not catch up new files. You have to restart server, to make it watch newly created files.<br />
    </li>
</ol><h2>Mixing things up</h2><p>    There reasons above prevent me to go on with <a href="https://github.com/josh/node-livereload">node-livereload</a>. So, even if I work on .NET-based application, I do C# in Visual Studio, but HTML/CSS/JS in Sublime, having the all it's benefits. So, I basically have 2 things opened side-by-side.<br />
</p><a href="https://lh4.googleusercontent.com/--1QZU1dRym0/UDIAGZjoJQI/AAAAAAAAJAY/Nkb7uhE66wA/s570/image-6.png"><br />
    <img src="https://lh4.googleusercontent.com/--1QZU1dRym0/UDIAGZjoJQI/AAAAAAAAJAY/Nkb7uhE66wA/s570/image-6.png" style="width: 620px"/><br />
</a><br />
<h2>Conclusions</h2><p>    I felt much productivity boost with LiveReload. I have Sublime opened on one monitor and Chrome + WebKit Tools on another. As soon I change something, I see the results immediately, catching up errors in console as early as possible. It works so great then you TDD'ing your JavaScript code, as you write tests and implementation and it's been re-run with each save (like a continues testing with AutoTest, NCrunch etc.).<br />
</p><p>    That works very fine to me, I don't want to press F5 anymore. Do you?<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing Folders Layout for NancyFX Application]]></title>
    <link href="http://beletsky.net/2012/08/customizing-folders-layout-for-nancyfx.html"/>
    <updated>2012-08-14T19:05:00+02:00</updated>
    <id>http://beletsky.net/2012/08/customizing-folders-layout-for-nancyfx</id>
    <content type="html"><![CDATA[<div class='post'>
<p>    <a href="https://github.com/NancyFx">NancyFX</a> applications are full of conventions. The default conventions are good enough, especially if you use ASP.NET hosting, where you probably don't even care. If you plan to do self-hosting application, you typically want to change some bits.<br />
</p><p>    In my case, during <a href="https://github.com/alexbeletsky/candidate/tree/nancy">Candidate</a> application re-writing, I wanted to have some custom folder layout, that would be clean and not confuse application users with so many details. In fact, I wanted something that in deployed state looks like this:<br />
</p><a href="https://lh3.googleusercontent.com/-wQqqT_kUXpY/UCqEGGRQBRI/AAAAAAAAI_w/erBVjE9lhiw/s620/image-1.png"><br />
    <img src="https://lh3.googleusercontent.com/-wQqqT_kUXpY/UCqEGGRQBRI/AAAAAAAAI_w/erBVjE9lhiw/s620/image-1.png" alt="folder layout" /><br />
</a><br />
<p>    'Bin' folder would contain the application itself, as well as all referenced assemblies. 'Client' folder would contain all client side code - HTML/CSS/Javascript. Initially I thought to make all of those as embedded resources, but firstly <a href="http://stackoverflow.com/questions/11888813/nancyfx-using-embedded-views">did not worked</a> on Nancy v.0.11.0, secondly having those files placed separately make it possible to easy application updates (patching).<br />
</p><p>    Fortunately, it is easy to apply any folder layout you want. There are 2 types of recourses that Nancy is looking from outside, they are - views and static content. Both of them are resolved by default conventions and those conventions applied against the application root.<br />
</p><h2>Changing the application root</h2><p>    In my case, executables are places in Bin folder, but resources are placed one level above. By default, the application root is <code>Environment.CurrentDirectory</code> and I need to changed that. In order to make this happen, you have to implement <code>IRootProvider</code> instance.<br />
</p><pre class="brush: csharp">namespace Candidate.Nancy.Selfhosted.App
{
    public class PathProvider : IRootPathProvider
    {
        public string GetRootPath()
        {
            return Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\"));
        }
    }
}
</pre><p>    There is a little pitfall, that I got into. Please, make sure that root folder is <strong>absolute</strong> path (<code>Path.GetFullPath</code> - returns absolute path). If you didn't do that, some part of application could not work right. I've sent a <a href="https://github.com/NancyFx/Nancy/pull/706">pull request</a> for <code>StaticContentConventionBuilder</code> class, but more appropriate fix is actually having it rooted. <br />
</p><p>    After, just place the type of path provider instance into Nancy bootstrapper class, as overridable property:<br />
</p><pre class="brush: csharp">protected override Type RootPathProvider
{
    get
    {
        return typeof(PathProvider);
    }
}
</pre><h2>Changing the default conventions</h2><p>    Now, we have to teach Nancy to look for view and static resources right.<br />
</p><p>    The bootstapper contains corresponding virtual method, called <code>ConfigureConventions</code>. There I'll overrider the default ones, like that:<br />
</p><pre class="brush: csharp">protected override void ConfigureConventions(NancyConventions nancyConventions)
{
    // static content
    nancyConventions.StaticContentsConventions.Clear();
    nancyConventions.StaticContentsConventions.Add(StaticContentConventionBuilder.AddDirectory("scripts",
                                                                                                "Client/scripts"));
    nancyConventions.StaticContentsConventions.Add(StaticContentConventionBuilder.AddDirectory("content",
                                                                                                "Client/content"));
    // view location
    nancyConventions.ViewLocationConventions.Clear();
    nancyConventions.ViewLocationConventions.Add((viewName, model, context) => string.Concat("Client/views/", viewName));
    nancyConventions.ViewLocationConventions.Add((viewName, model, context) => string.Concat("Client/views/", context.ModuleName, "/", viewName));
}
</pre><p>    For view location conventions you just need to provider the folder (relative to rootfolder), where the view are located. I used only 2 simple conventions: 1) view is just placed under /views folder 2) view is placed under /view/moduleName folder. <br />
</p><p>    For static resources, it a little bit trickier. You have to return the *response* object, for corresponding request. Fortunately, <a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Conventions/StaticContentConventionBuilder.cs">StaticContentConventionBuilder</a> class, has some helper methods that make it simpler. <br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convention based IoC configuration]]></title>
    <link href="http://beletsky.net/2012/01/convention-based-ioc-configuration.html"/>
    <updated>2012-01-24T15:54:00+01:00</updated>
    <id>http://beletsky.net/2012/01/convention-based-ioc-configuration</id>
    <content type="html"><![CDATA[<div class='post'>
<p>What's your favorite IoC container framework? For quite long time I stick to <a href="">Ninject</a>. First time I read about it in Steve Sanders ASP.NET MVC2 book and it's my favorite container since then. But this blog post does not aim particular IoC framework, rather approach you can use. For code examples I'll still be using Ninject, through.<br />
</p><h2>What's are conventions?<br />
</h2><p><a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a> is very popular trend nowadays. Many frameworks trying to adopt it, including ASP.NET MVC. In short, that means you are relying on some front-know conventions, like names of files, folder or classes and system does something meaningful, based on those conventions. Like, all controllers in ASP.NET MVC should have "Controller" postfix, so the framework is able to find and <a href="http://www.beletsky.net/2011/12/inside-aspnet-mvc-instantiation-of.html">instantiate</a> it. <br />
</p><p>Conventions make a developer's life a little easier, you are no longer spending efforts on configuration, instead following some simple rules. <br />
</p><h2>What we have for IoC?<br />
</h2><p>My <a href="http://en.wikipedia.org/wiki/Shuhari">"Shu"</a> level of IoC containers learning was configuration based. This is something you learn at very beginning. So, in case of Ninject, sooner of later you have huge file with dependencies configuration: <br />
</p><pre class="brush: csharp">/// &lt;summary&gt;
/// Load your modules or register your services here!
/// &lt;/summary&gt;
/// &lt;param name=&quot;kernel&quot;&gt;The kernel.&lt;/param&gt;
private static void RegisterServices(IKernel kernel)
{
 kernel.Bind&lt;ISettingsManager&gt;().To&lt;SettingsManager&gt;();
 kernel.Bind&lt;IDirectoryProvider&gt;().To&lt;DirectoryProvider&gt;().InSingletonScope();
 kernel.Bind&lt;ISetupFactory&gt;().To&lt;SetupFactory&gt;();
 kernel.Bind&lt;ITargetsObjectBuilder&gt;().To&lt;DefaultTargetsObjectBuilder&gt;();
 kernel.Bind&lt;ITargetsBuilder&gt;().To&lt;TargetsBuilder&gt;();
 kernel.Bind&lt;IBounceFactory&gt;().To&lt;BounceFactory&gt;();
 kernel.Bind&lt;ITargetsRetriever&gt;().To&lt;TargetsRetriever&gt;();
 kernel.Bind&lt;IConfigObjectBuilder&gt;().To&lt;ConfigObjectBuilder&gt;();
 kernel.Bind&lt;ILoggerFactory&gt;().To&lt;LoggerFactory&gt;();
 kernel.Bind&lt;IHashService&gt;().To&lt;HashService&gt;();
 kernel.Bind&lt;IAuthentication&gt;().To&lt;Authentication&gt;();
 kernel.Bind&lt;IConfigurationsFactory&gt;().To&lt;ConfigurationsFactory&gt;();
 
 // More, more, more...
}
</pre><p>As more your application grows, as more services, repositories, factories you have. As long <code>RegisterServices</code> method becomes longer, as more you forgot to correct correct it after some new dependency added, so you see YSOD during application run.<br />
</p><p>But please, put your attention to interface and class names. What we have here - <code>ISettingsManager</code> and <code>SettingsManager</code>; <code>IDirectoryProvider</code> and <code>DirectoryProvider</code>.. <code>ILoggerFactory</code> and <code>LoggerFactory</code>. Do you see pattern here? Exactly, it is ["I" + entity name] for interfaces and [entity name] for implementation.<br />
</p><p>Here we go for <a href="http://en.wikipedia.org/wiki/Shuhari">"Ha"</a> level of IoC and apply convention based configuration.<br />
</p><h2>Convention over configuration</h2><p>Let's take an advance of the fact above and shrink our configuration code. First of all, you need to get great extension for Ninject, called <a href="http://nuget.org/packages/ninject.extensions.conventions/2.2.0.5">ninject.extensions.conventions</a>.<br />
</p><p>After the package is installed, the simples Ninject start-up code ever would be:<br />
</p><pre class="brush: csharp">/// &lt;summary&gt;
/// Load your modules or register your services here!
/// &lt;/summary&gt;
/// &lt;param name=&quot;kernel&quot;&gt;The kernel.&lt;/param&gt;
private static void RegisterServices(IKernel kernel)
{
 kernel.Scan(scanner =&gt;
     {
      scanner.FromCallingAssembly();
      scanner.BindWithDefaultConventions();
     }
  );
}
</pre><p>What it does? It has an abstraction called "scanner". You instruct scanner what to do. In this example, I said - take calling assembly and bind all interfaces to implementation class having Default conventions. The default conventions are ones that I shown above. <br />
</p><p>That's it, all those lines of code are simply gone away, since we rely on conventions and Ninject is aware how to deal with those conventions. If you added new dependency and followed convention, nothing you should do manually any more.<br />
</p><h2>I have some questions!?</h2><p>Ok, typically you have something little more complex. I'll try to predict some questions you might have.<br />
</p><h3>I have a lot of assemblies in my application, but want only particular ones to be scanned?</h3><p>You can easily use only assemblies that matches particular patterns, like:<br />
</p><pre class="brush: csharp">private static void RegisterServices(IKernel kernel)
{
 kernel.Scan(scanner =&gt;
     {
      scanner.FromAssembliesMatching("Candidate.*");
      scanner.BindWithDefaultConventions();
     }
  );
}
</pre><h3>Is it only default conventions I can use?</h3><p>No, you can specify your own rules. Scanner has <code>BindWith</code> method, that receives <code>IBindingGenerator</code> type. You can implement your own binding generator for custom conventions.<br />
</p><pre class="brush: csharp">private static void RegisterServices(IKernel kernel)
{
 kernel.Scan(scanner =&gt;
     {
      scanner.FromAssembliesMatching("Candidate.*");
      scanner.BindWith&lt;MyCustomConventionsGenerator&gt;();
     }
  );
}
</pre><h3>What if I have several cases of convention violations?</h3><p>You are still able to bind in exactly same way as before:<br />
</p><pre class="brush: csharp">private static void RegisterServices(IKernel kernel)
{
 kernel.Scan(scanner =&gt;
     {
      scanner.FromAssembliesMatching("Candidate.*");
      scanner.BindWith&lt;MyCustomConventionsGenerator&gt;();
     }
  );

    // classes that violates conventions
    kernel.Bind&lt;IMyInterface&gt;().To&lt;MyImpl&gt;();
}
</pre><h3>What is I have dependencies in different assemblies?</h3><p>Best thing is to go with Ninject modules. First, correct the scanner:<br />
</p><pre class="brush: csharp">private static void RegisterServices(IKernel kernel)
{
 kernel.Scan(scanner =&gt;
     {
      scanner.FromAssembliesMatching("Candidate.*");
                        scanner.AutoLoadModules();
      scanner.BindWith&lt;MyCustomConventionsGenerator&gt;();
     }
  );
}
</pre><p>Now, each assembly should include module instance:<br />
</p><pre class="brush: csharp">namespace Candidate.Core
{
    public class CoreModule : NinjectModule
    {
        public override void Load()
        {
            // place convention-violation classes here
   // Bind&amp;lt;IMyInterface&amp;gt;().To&amp;lt;MyImpl&amp;gt;();
        }
    }
}
</pre><p>Another one good feature of Convention based IoC is - "Config and forget". Once done, use always and forget about manual binding once and for all.<br />
</p><p>I've heard about this on <a href="http://www.beletsky.net/2011/12/xp-days-ukraine-2011.html">XP Days 2011</a> conference, by <a href="https://twitter.com/#!/ploeh">Mark Seemann</a>. I think it's nice approach.. I adopt it and going to use in my projects.<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ASP.NET MVC Validation Mechanism without ASP.NET MVC]]></title>
    <link href="http://beletsky.net/2012/01/using-aspnet-mvc-validation-mechanism.html"/>
    <updated>2012-01-10T20:30:00+01:00</updated>
    <id>http://beletsky.net/2012/01/using-aspnet-mvc-validation-mechanism</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I get used to <code>DataAnnotations</code> for model validation very quickly. Indeed, it is great approach. You attribute you model with corresponding attributes, rest is done by framework. It is only <code>ModelState.IsValid</code>, all you have to do before starting working with model.<br />
</p><p>During implementation of some feature for <a href="https://github.com/alexbeletsky/candidate">candidate</a> I thought to myself, that I need need exactly same validation for my model class, but out of MVC framework. Namely, for some model class, like <a href="https://github.com/alexbeletsky/candidate/blob/master/Candidate.Core/Configurations/Parts/Github.cs">Github.cs</a> I just want to know, is it "configured" or not. And configured == valid in my context. Instead of writing custom code with checking all required properties to have some values I wished to do the same as ASP.NET MVC does, through DataAnnotations. It turned out to be possible and really easy.<br />
</p><h2>Basic start</h2><p>Assume you have such model:<br />
</p><pre class="brush: csharp">public class SimpleModel
{
 [Required]
 public string SomeProperty { get; set; }

 [Range(0,50)]
 public int SomeAnotherProperty { get; set; }
}
    </pre><p>If your goal is just to get answer "yes or no", you can create such function:<br />
</p><pre class="brush: csharp">public bool ValidateSimpleModel(SimpleModel validate)
{
 return Validator.TryValidateObject(validate, new ValidationContext(validate, null, null), null);
}
    </pre><p><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validator.aspx">Validator</a> is a static class in DataAnnotations namespace. It takes target object, validation context and validation results collection. But due, to it just "tries" to perform validation, most of all parameters could be null.<br />
</p><h2>Use validation results</h2><p>If you need more specific information, like which field is exactly invalid you need to have <code>ICollection&lt;ValidationResult&gt;</code><br />
</p><pre class="brush: csharp">public ICollection&lt;ValidationResult&gt; ValidateSimpleModel(SimpleModel validate)
{
 var validationResults = new List&lt;ValidationResult&gt;();
 Validator.TryValidateObject(validate, new ValidationContext(validate, null, null), validationResults);

 return validationResults;
}
    </pre><p>In case of invalid object it would return non-empy collection of <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validationresult.aspx">ValidationResult</a>, that would contain all relevant information.<br />
</p><h2>Wrapping up to extension method</h2><p>Finally, you can create simple extension extension method and apply DataAnnotations validation to any kind of object:<br />
</p><pre class="brush: csharp">public static class ValidatorExtensions
{
    public static bool TryValidateObject(this object validate)
    {
        return Validator.TryValidateObject(validate, new ValidationContext(validate, null, null), null);
    }
}
    </pre><p>So, the model could just have IsValid() method, like:<br />
</p><pre class="brush: csharp">public bool IsValid()
{
 return this.TryValidateObject();
}
    </pre><p>It works great for such simple task I need to accomplish.<br />
</p></div>

]]></content>
  </entry>
  
</feed>
