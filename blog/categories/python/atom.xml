<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2015-01-30T17:16:39+01:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[7 Weeks With Python]]></title>
    <link href="http://beletsky.net/2012/06/7-weeks-with-python.html"/>
    <updated>2012-06-02T19:15:00+02:00</updated>
    <id>http://beletsky.net/2012/06/7-weeks-with-python</id>
    <content type="html"><![CDATA[<div class='post'>
<p>            During my <a href="http://www.beletsky.net/search/label/CS101">CS101</a> class I first time meet Python. That's not completely true, since I played a bit Python before, but I had a chance to see Python in action only during this course. In short, that was really pleasant meet up and I hope it will grown up to prolonged and mutual relationships. I will share some 'likes' and 'dislikes' about Python, which I would think you find interesting.<br />
        </p>        <h2>What I liked in Python...</h2>        <p>            Python is very well known language with great reputation and community around it. Big companies, including Google, using python to build enterprise level applications. Hackers love Python cause it combines both simplicity and power. You can do any kind of application development including desktop and web applications. All the time is being compared to Ruby, which is for me ends up to something like <a href="http://grokcode.com/746/dear-python-why-are-you-so-ugly/">this</a> only.<br />
        </p>        <h3>No IDE development</h3>        <p>            You don't need any kind of fancy IDE to start up with Python. Sure, IDE is something that makes development more efficient, so if you going to do a lot of programming with Python including debugging you should probably pick one. But for now, I'm totally happy with Sublime Text 2 as IDE.  <br />
        </p>        <a href="https://lh6.googleusercontent.com/-rjt33byD0RU/T8pJrIcP5fI/AAAAAAAAI0k/SDaO2hXb2JI/s800/image-1.png"><img src="https://lh6.googleusercontent.com/-rjt33byD0RU/T8pJrIcP5fI/AAAAAAAAI0k/SDaO2hXb2JI/s800/image-1.png" alt="Sublime Text 2 for Python" style="width: 620px"/></a><br />
        <h3>Easy to learn</h3>        <p>            If you know some OO language like C++ or Java, it will be quick jump to Python. Python is object-oriented language but with support of different paradigms as procedural and even functional programming. The basic concepts of variables, conditions and control flow are the same as you get used to. Of course, you spend sometime to know the fundaments - like, how to compare things, how to calculate length of string or list, how to put element into dictionary. Sometimes, I still refer to documentation, but in general all that things are easy to remember with practice.<br />
        </p>        <h3>Interpretation and dynamic typing</h3>        <p>            Python is interpretator. You never mention the type of object as you declare it or use it. You might apply different operations on object, it would be evaluated on runtime. There are different opinions (holy wars) on Static vs. Dynamic, but as for me with Dynamic languages the overall development velocity is higher. First of all, you don't spend any time for compilation, which in case of big solutions could be really high. Second, as you are only to able to check results as code executed (even if you just misspell variable name you will know about it only if this code section is evaluated), you are more focused on unit tests and TDD to catch up obvious issues, which in general makes development faster.  <br />
        </p>        <h3>Built in types</h3>        <p>            Python has complete built-in types system. For numbers you can use different types, as <code>int</code>, <code>float</code>, <code>long</code>, <code>complex</code>. The type is evaluated on runtime,<br />
        </p>        <pre class="brush: python">            i = 0               # integer
            j = 1.0             # float
            x = complex(1, -1)  # complex
        </pre>        <p>            Strings are everything inside the '' quotes,<br />
        </p>        <pre class="brush: python">            str = "I'm string"
        </pre>        <p>            Btw, during the course I got conclusion that list is the most flexible data structure. Everything you need, you can build upon lists. Lists are nicely handled with Python,<br />
        </p>        <pre class="brush: python">            l = [ 1, 2, 'three', [4, 5], [[6, 7], 8]   
        </pre>        <p>            Lists are non-optimal for searches, so if you do a lot of searches you might consider using dictionary,<br />
        </p>        <pre class="brush: python">            d = { 'one': 1, 'two': 2, 'three': [3] }
        </pre>        <p>            Each type has it's own set of methods. Strings including common operations as concatenation, trimming, substring found etc. For list and dictionaries there are bunch of useful stuff as getting iterators, pushing and poping of elements.<br />
        </p>        <h3>Syntax and Code styles</h3>        <p>            Syntax and Code styles are commonly another topic of holy war. Fortunately, Python leaves very few room for that. First of all - no semicolons. Second, Python uses indentation as part of language syntax. So, poorly indented code would simply won't work.  <br />
        </p>        <pre class="brush: python">            def my_method_name(arg1, arg2):
                return arg1 < arg2              # right
                
            def my_method_name(arg1, arg2):
            return arg1 < arg                   # won't work!
            
            def my_method(arg1, arg2):
                if arg1 < arg2:
                    return arg1 + arg2          # right
            
                if arg1 == arg2:
                print arg2                      # won't work!
        </pre>
        <p>            Basically, everything that is after ":" have to be indented. This is for <code>if</code>, <code>while</code>, <code>for</code> etc. Using tab instead of curvy braces (or any other symbol or term) is really nice idea, allowing to keep code in the same format and 'forcing' one and solid code guidelines along the projects and teams.
        </p>        <h2>What I disliked in Python...</h2>        <p>            There are no perfect things, moreover perfect languages. Developers have their own habits and opinions on different things. In Python I see several things that makes me little uncomfortable about.
        </p>        <h2>Naming consistency</h2>        <p>            It sounds like Python adopts C code styles for naming of methods and variables, like <code>longes_cycle</code> or <code>def make_it_work()</code>. But in reality a lot of methods are violating those rules. For instance some methods of dictionary type: <code>fromkeys()</code>, <code>iteritems()</code>, <code>setdefault()</code>. In the same time dict contains the method: <code>has_key()</code>.
        </p>        <p>            That's very annoying. Especially if you don't have any IDE with names suggesting, it makes it really hard to remember.
        </p>        <h2>Booleans and None</h2>        <p>            Almost the same as in topic above. Having the C-style (with a lower first symbol) language designers decided to have a special cases. 
        </p>        <pre class="brush: python">            a = True        # why not true ?
            b = False       # why not false ?
            x = None        # none ?
        </pre>        <p>            So, in code which is in general lower case, those True/False/None looking really strange.
        </p>        <pre class="brush: python">            def proc3(input_list):
                if len(input_list) == 0:
                    return None

                for i in range(0, len(input_list)):
                    for j in range(0, len(input_list)):
                        if input_list[i] == input_list[j] and i != j:
                            return False
                return True
        </pre>        <h3>OO but not OO</h3>        <p>            Being OO language, Python still relies on some procedural concepts. The good example is calculation of string length. I would expect, that string corresponding method <code>len()</code> or something, but instead we are having 'global' function that does that. 
        </p>        <pre class="brush: python">            s = "I'm string"
            print len(s)        # why not s.len() ?
        </pre>        <p>            <code>len()</code> is overloaded for other types, it would work for list and dictionaries as well,
        </p>        <pre class="brush: python">            l = [1, 2, 3]
            d = { 1: 1, 2: 2, 3: 3 }
            
            print len(l)
            print len(d)
        </pre>        <p>            In the same manner, if you what to get reverse iterator for collection, I would assume there corresponding method that returns that iterator. Bad guess,
        </p>        <pre class="brush: python">            l = [1, 2, 3]
            for e in reverse(l):    # why l.reverse()
                print e
        </pre>        <h3>__init__() method</h3>        <p>            Trying out classes in Python first you need to understand is how to construct an object. Python has constructor, that look like that, 
        </p>        <pre class="brush: python">            class MyClass:
                def __init__(self, a, b):
                    self.a = a
                    self.b = b
        </pre>        <p>            I could understand it would be <code>init</code> or <code>_init</code> or <code>constructor</code>, but I will probably never understand <code>__init__</code> with 2 underscores before and after. It's ugly.
        </p>        <h2>Conclusions</h2>        <p>            I'm about to enroll to next Udactity courses, so my Python journey continues. I hope to get more in language and standard library.
        </p></div>

]]></content>
  </entry>
  
</feed>
