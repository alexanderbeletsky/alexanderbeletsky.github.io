<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontend | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2020-02-26T11:31:59+01:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NPM for Everything]]></title>
    <link href="http://beletsky.net/2015/04/npm-for-everything.html"/>
    <updated>2015-04-02T15:26:00+02:00</updated>
    <id>http://beletsky.net/2015/04/npm-for-everything</id>
    <content type="html"><![CDATA[<p>JS ecosystem is famous for it&rsquo;s wide range of packages and tools. Besides the default package manager, which comes with Node.js &ndash; NPM (node package manager), there are Bower.js, Jam.js and many more.</p>

<p>For a quite long period, my default setup was like &ndash; NPM for all server-side components and Bower.js for client-side stuff. It worked quite good together, especially in conjunction with Require.js.</p>

<p>But recently, I switched to <em>NPM only</em> setup. That allowed me to use CommonJS style both front and back ends and got rid of task runners as Grunt and Gulp.</p>

<!-- MORE -->


<h1>CommonJS</h1>

<p>Doing a lot of back-end coding I really get used to <code>CommonJS</code> style, which is simple, practical and powerful. CommonJS modularization is plain as,</p>

<p>```js
var module = {
};</p>

<p>// export the module
module.exports = module;
```</p>

<p>and</p>

<p><code>js
// use the module
var module = require('./module');
</code></p>

<p>Node.js highly popularized Common.js approach. And NPM appeared to be one of the best package managers ever developed.</p>

<p>But for front-end, NPM was not that suitable. First of all, because of browsers do not understand Common.js style of modules. Second, <code>npm</code> modules are being placed to <code>./node_modules</code> folder, with is typically the root of project, that made things complicated to refer those scripts from <code>index.html</code> and configure server to server static resources from <code>./node_modules</code> folder.</p>

<p>Browserify came to change this.</p>

<h1>Browserify</h1>

<p>Browserify is JavaScript transpiling tool, with allows to:</p>

<ol>
<li>Use Common.js style for front-end applications.</li>
<li>Allowed to use various <code>npm</code> packages directly in a browser.</li>
</ol>


<p>A lot of pure front-end frameworks and libraries were published to <code>npm</code>. In fact, it&rsquo;s more and more used for front-end libraries as <a href="http://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging">according to</a> NPM developers.</p>

<p>Of cause, nothing comes for free. The cost of Browserify is a <em>build step</em>. You have to introduce to transform Common.js application into a <em>bundle</em> which is loaded and executed by a browser.</p>

<p>Moreover, some packages are still being hosted on Bower. Even, it&rsquo;s possible to use Bower packages together with NPM packages (by means of debowerify transformation) I quickly realized, that this approach is very unpractical.</p>

<p>So, during the last few months my main <a href="https://github.com/pulls?q=is%3Apr+author%3Aalexbeletsky+is%3Aclosed">contributions</a> on GitHub was adopting of some front-end packages, to be conformant to Common.js and publishing them on NPM after.</p>

<h1>The setup</h1>

<p>The NPM now is the only one package manager to use, both for front-end and backend.</p>

<p>All dependencies are mentioned on one file <code>package.json</code> instead of several files.. and you will never forget to run <code>bower install</code>, since <code>npm install</code> will do install everything.</p>

<p>```js
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"async": "^0.9.0",
"babelify": "^5.0.4",
"body-parser": "^1.9.0",
"colors": "^1.0.2",
"cors": "^2.4.2",
"envify": "^3.4.0",
"express": "^4.9.5",
"method-override": "^2.2.0",
"moment": "^2.8.3",
"morgan": "^1.3.2",
"node-logentries": "^0.1.4",
"react": "^0.13.1",
"respawn": "^1.0.1"
</code></pre>

<p>  }
```</p>

<p>The server side code,</p>

<p>```js
var express = require(&lsquo;express&rsquo;);</p>

<p>// configurations&hellip;</p>

<p>app.listen(port, function () {</p>

<pre><code>logger.info('editor-app listening on port ' + port + ' ' + env);
</code></pre>

<p>});
```</p>

<p>The client side code,</p>

<p>```js
var React = require(&lsquo;react&rsquo;);</p>

<p>var Component = React.create({</p>

<p>});</p>

<p>module.exports  = Component;
```</p>

<p>The same style, feels nice and clean.</p>

<h1>No task runners</h1>

<p>NPM is not only package manager. It&rsquo;s also very simple task runner (or scripts runner). There is a special section, called <code>scripts</code> responsible for that. Originally it&rsquo;s been used to run some package related tasks (run tests, perform pre/post install configurations).</p>

<p>Traditionally Grunt.js and Gulp.js are ones that used dealing with compiling static assests. But CLI interface of many tools and stream piping could replace them.</p>

<p>As example, I&rsquo;ll show pretty typical setup:</p>

<ul>
<li>build JavaScript with <code>browserify</code> and apply minification</li>
<li>build Sass with <code>node-sass</code> and apply minification</li>
<li>run watcher and rebuild changed assets</li>
</ul>


<h2>Building JavaScript</h2>

<p>The <code>browserify</code> need to be installed globally,</p>

<p><code>bash
$ npm install -g browserify
</code></p>

<p>In <code>package.json</code>, in <code>scripts</code> section, will add such script,</p>

<p>```js
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build-js": "browserify public/js/app.js -o public/build/app.js",
</code></pre>

<p>```</p>

<p>Since I also use several transformations in my applications, the Browserify have to properly configured for that. It check&rsquo;s if <code>package.json</code> contains <code>browserify</code> section, and if it does &ndash; will use it contents as own options.</p>

<p>```js
  &ldquo;browserify&rdquo;: {</p>

<pre><code>"transform": [
  "babelify",
  "envify"
]
</code></pre>

<p>  },
```</p>

<h2>Building Sass</h2>

<p>As with Browserify, <code>node-sass</code> need to be installed globally,</p>

<p><code>bash
$ npm install -g node-sass
</code></p>

<p>Then <code>package.json</code> changes,</p>

<p>```js
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build-js": "browserify public/js/app.js -o public/build/app.js",
"build-sass": "node-sass public/sass/main.scss public/build/main.css",
</code></pre>

<p>```</p>

<h2>Minification</h2>

<p>Now, let&rsquo;s minify both assets using one of the best concepts ever &ndash; Unix pipes.</p>

<p>We need two packages additionally, <code>uglifyjs</code> and <code>cleancss</code>.</p>

<p><code>bash
$ npm install -g uglifyjs clean-css
</code>
And corresponding scripts,</p>

<p>```js
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build-js": "browserify public/js/app.js -o public/build/app.js",
"build-sass": "node-sass public/sass/main.scss public/build/main.css",
// minifying
"build-min-js": "browserify public/js/app.js | uglifyjs -o public/build/app.min.js",
"build-min-sass": "node-sass public/sass/main.scss | cleancss -o public/build/main.min.css",
</code></pre>

<p>```</p>

<h2>Watching</h2>

<p>Now, let&rsquo;s apply watching. One of the watchers I use for several years already, that works best for me is <code>nodemon</code>.</p>

<p><code>nodemon</code> is not only able to watch file changes and restart node processes if necessary, but also running custom commands.</p>

<p>```js
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build-js": "browserify public/js/app.js -o public/build/app.js",
"build-sass": "node-sass public/sass/main.scss public/build/main.css",
"build-min-js": "browserify public/js/app.js | uglifyjs -o public/build/app.min.js",
"build-min-sass": "node-sass public/sass/main.scss | cleancss -o public/build/main.min.css",
// watching
"watch-js": "nodemon -e js -w public/js -x 'npm run build-js'",
"watch-sass": "nodemon -e scss -w public/sass -x 'npm run build-sass'",
</code></pre>

<p>```</p>

<h2>Complex tasks</h2>

<p>Typically, you need to run few tasks simultaneously, e.g. build all scripts or watch all application. We can combine commands, by running background tasks,</p>

<p>```js</p>

<pre><code>"build": "npm run build-js &amp; npm run build-sass",
"watch": "npm run watch-js &amp; npm run watch-sass",
</code></pre>

<p>```</p>

<p>To build full app,</p>

<p><code>bash
$ npm run build
</code></p>

<p>or to <em>watch</em> it,</p>

<p><code>bash
$ npm run watch
</code></p>

<h2>Using dev-dependencies</h2>

<p>Global packages are not cool, cause they might be missing on developers box there application is cloned. Moreover, dependency management becomes a bit more complex, if you need to work on different projects depending on different tools versions. As <a href="https://github.com/bcomnes">@bcomnes</a> very correctly noticed, all tools as <code>browserify</code>, <code>uglify</code> etc. can be installed as local <code>dev-dependency</code>, which are fetched during <code>npm install</code> and will be available to call inside project folder as global commands,</p>

<p><code>bash
$ npm install --save-dev browserify uglifyjs node-sass clean-css
</code></p>

<p>So, the <code>package.json</code> got such update,</p>

<p>```json
&ldquo;devDependencies&rdquo;: {
  &ldquo;browserify&rdquo;: &ldquo;^9.0.7&rdquo;,
  &ldquo;clean-css&rdquo;: &ldquo;^3.1.9&rdquo;,
  &ldquo;node-sass&rdquo;: &ldquo;^2.1.1&rdquo;,
  &ldquo;uglifyjs&rdquo;: &ldquo;^2.4.10&rdquo;
},</p>

<p>```</p>

<h1>Takeaways</h1>

<ul>
<li>Once you implement front end library, consider <a href="https://github.com/umdjs/umd">UMD</a> so your modules are reusable in any environment.</li>
<li>Embrace CommonJS, use Browserify/Webpack/Whatever to use CommonJS (or ES6) on client.</li>
<li>For many cases, you really don&rsquo;t need Grunt or Gulp, all is easily doable with NPM scripts.</li>
</ul>


<p>As example, please refer to <a href="https://github.com/alexbeletsky/brick">brick</a>, the project I currently use as boilerplate for new applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Front-End Applications]]></title>
    <link href="http://beletsky.net/2015/01/configuring-front-end-applications.html"/>
    <updated>2015-01-29T19:42:00+01:00</updated>
    <id>http://beletsky.net/2015/01/configuring-front-end-applications</id>
    <content type="html"><![CDATA[<p>Typically front-end applications have particular configuration, depending on environment. It could be access tokens, API URL&rsquo;s, applications settings etc. For quite long period of time I solved that problem by exposing <code>window.env</code> variable, populated either by server rendering or by plugins as <code>html-build</code> .. or just directly referencing <code>&lt;script src="config/my.env.js"&gt;</code>, where <code>my.env.js</code> needed to be updated before actual deployment.</p>

<p>Spending much time on backend and working with Node.js/CommonJS I liked simplicity of <code>config</code> pattern and wanted to reuse that pattern on frontend. It&rsquo;s really straightforward and framework-agnostic approach.</p>

<!--MORE-->


<h2>Config pattern</h2>

<p>Config pattern is something I <a href="https://github.com/likeastore/notifier/blob/master/config">frequently</a> <a href="https://github.com/likeastore/jobber/tree/master/config">use</a> for Node.js apps. It simply the folder with <code>index.js</code> file, containing such code:</p>

<p>```js
var env = process.env.APP_ENV || &lsquo;development&rsquo;;</p>

<p>var config = {</p>

<pre><code>development: require('./development.config'),
production: require('./production.config'),
staging: require('./staging.config')
</code></pre>

<p>};</p>

<p>module.exports = config[env];
```</p>

<p>The folder contains such files, <code>development.config.js</code>, <code>staging.config.js</code>, <code>production.config.js</code> etc.</p>

<p>The config files, simply export the object with configuration,</p>

<p>```js
var config = {</p>

<pre><code>connection: 'mongodb://localhost:27017/notifierdb',
accessToken: '1234',

hook: {
    url: 'http://localhost:5000/api/notify/',
    token: 'fake-hook-token'
},

logentries: {
    token: null
},

transport: {
    // ...
}

// ...
</code></pre>

<p>};</p>

<p>module.exports = config;
```</p>

<p>The module actually needed in configuration would <code>require</code> the <code>config</code> folder, for instance:</p>

<p>```js
var request = require(&lsquo;request&rsquo;);
var config = require(&lsquo;../config&rsquo;);</p>

<p>function fetchActions(user, callback) {</p>

<pre><code>var apiUrl = config.api.url;
var token = config.api.token;

request({url: apiUrl + '/actions/' + user, headers: {token: token}, callback);
</code></pre>

<p>}</p>

<p>module.exports = fetchActions;
```</p>

<h2>Browserify</h2>

<p><a href="http://browserify.org/">Browserify</a> is a pre-processor (or call it transpiler) for javascript. It embraces CommonJS style of modularity and brings popular <code>npm</code> modules on client site. It&rsquo;s simply awesome project (many thx to <a href="https://twitter.com/substack">substack</a> for it) that makes a lot of sense to me.</p>

<p>With Browserify you can write browser javascript in the same way you do on backend with Node.js. It implements <code>require()</code> call and bundles the application consists on different modules into one, executable in browser.</p>

<p>Usually, <code>browserify</code> is not run manually, but rather by means of JS build tools as <code>grunt</code> or <code>gulp</code>.</p>

<p>I&rsquo;m going to adopt Node.js <code>config</code> pattern for frontend with browserify.</p>

<h2>Prepare the configuration</h2>

<p>By analogy of node applications, let&rsquo;s create a <code>config</code> folder inside our <code>js</code> folder.</p>

<p><img src="https://lh6.googleusercontent.com/-tO5KVRhVjM8/VMqJVRGXiFI/AAAAAAAAi4o/2aWT3zOkNhk/w2236-h1132-no/Screenshot%2B2015-01-29%2B20.21.58.png" alt="config structure" /></p>

<p><code>index.js</code> file is exactly the same as mentioned above, config files contains application dependent settings.</p>

<p>With example of Angular.js application, here is the <code>service</code> that used as data provider,</p>

<p>```js
var config = require(&lsquo;../config&rsquo;);</p>

<p>function drivers ($http) {</p>

<pre><code>var apiUrl = config.api.url;

return {
    fetch: function () {
        var url = apiUrl + '/api/drivers';

        return $http.get(url);
    }
};
</code></pre>

<p>}</p>

<p>module.exports = drivers;
```</p>

<p>If you just try that, it would work as charm.. but only for <code>development</code> environment.</p>

<h2>Setting up NODE_ENV</h2>

<p>The problem though, <code>browserify</code> have no idea what to put into <code>process.env.NODE_ENV</code> variable, since it is <code>undefined</code> &ndash; <code>development</code> configuration is always selected.</p>

<p>Fortunately, <code>browserify</code> architecture supports, so called <code>transforms</code>, middleware components capable to customize browserify behaviour. One of handly transform function is <a href="https://github.com/hughsk/envify">envify</a> by <a href="https://github.com/hughsk">Hugh Kennedy</a>.</p>

<p>What <code>envify</code> allows to do is basically replacement of <code>process.env.NODE_ENV</code> to particular value, eg.</p>

<p><code>js
if (process.env.NODE_ENV === "development") {
  console.log('development only')
}
</code></p>

<p>with <code>NODE_ENV</code> set to &ldquo;production&rdquo;, will appear as</p>

<p><code>js
if ("production" === "development") {
  console.log('development only')
}
</code></p>

<p>This is exactly what we need, to make <code>config/index.js</code> work properly.</p>

<p>Since I use <code>grunt</code>, I&rsquo;ll show how to integrate <code>envify</code> in the workflow (approach for <code>gulp</code> would be similar),</p>

<p>```js
var envify = require(&lsquo;envify/custom&rsquo;);</p>

<p>module.exports = function (grunt) {</p>

<pre><code>grunt.initConfig({
    browserify: {
        dev: {
            files: {
                'source/build/app.js': ['source/js/app.js']
            },
            options: {
                browserifyOptions: {
                    debug: true
                },
                transform: [envify({
                    NODE_ENV: 'development'
                })]
            },
        },
        stage: {
            files: {
                'source/build/app.js': ['source/js/app.js']
            },
            options: {
                transform: [envify({
                    NODE_ENV: 'staging'
                })]
            }
        },
        prod: {
            files: {
                'source/build/app.js': ['source/js/app.js']
            },
            options: {
                transform: [envify({
                    NODE_ENV: 'production'
                })]
            }
        }
    },
// ...
</code></pre>

<p>}
```</p>

<p>Now, once the <code>grunt build:dev</code> or <code>grunt build:prod</code> is run, it will populate correct <code>NODE_ENV</code> value and the rest of transpiled application would work as expected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Authentication for Angular.js App]]></title>
    <link href="http://beletsky.net/2013/11/simple-authentication-in-angular-dot-js-app.html"/>
    <updated>2013-11-22T13:51:00+01:00</updated>
    <id>http://beletsky.net/2013/11/simple-authentication-in-angular-dot-js-app</id>
    <content type="html"><![CDATA[<p>So, you are building pure client side application that works against REST API. The client and server are completely decoupled and typically deployed separately of each other.</p>

<p>API&rsquo;s have one or another way of authenticating it&rsquo;s users. It could be some simple flows, like basic authorization or more complex ones as OAuth/OAuth2. But at the very end you have <code>token</code> that placed either as cookie value or HTTP request header parameter. API is then responsible to check the token for validity and if it&rsquo;s not valid respond with 401.</p>

<!-- More -->


<h2>Configure the Routes</h2>

<p>First we need to have <code>/login</code> router where user is redirected in case of unauthorized access.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>var app = angular.module(&lsquo;dashboardApp&rsquo;, [</p>

<pre><code>'ngCookies',
'ngResource',
'ngSanitize'
</code></pre>

<p>]);</p>

<p>app.config(function ($routeProvider, $locationProvider, $httpProvider) {</p>

<pre><code>$httpProvider.responseInterceptors.push('httpInterceptor');

$routeProvider
    .when('/', { templateUrl: 'views/dashboard.html', controller: 'dashboard' })
    .when('/login', { templateUrl: 'views/auth.html', controller: 'auth' })
    .otherwise({ redirectTo: '/' });

$locationProvider.html5Mode(true);
</code></pre>

<p>});</p>

<p>app.run(function (api) {</p>

<pre><code>api.init();
</code></pre>

<p>});
```</p>

<h2>Authentication Controller and View</h2>

<p>The authentication controller is simple module. It&rsquo;s responsible for sending user credentials to server and handle the response. If server authenticates user, it would return the value of access token in <code>.token</code> attribute. Otherwise, user have to be notified that something went wrong.</p>

<p>Btw, in <a href="https://github.com/likeastore/seismo-dashboard">likeastore/seismo-dashboard</a> I&rsquo;ve tried to use the model based on <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">GitHub personal tokens</a> instead of passwords, that simplifies server a bit allowing it to do not store and sessions, hashed passwords etc. If you interested, take a look at <a href="https://github.com/likeastore/seismo/blob/master/source/server.js#L40">likeastore/seismo/source/server.js</a>.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).controller(&lsquo;auth&rsquo;, function ($scope, $location, $cookieStore, authorization, api) {</p>

<pre><code>$scope.title = 'Likeastore. Analytics';

$scope.login = function () {
    var credentials = {
        username: this.username,
        token: this.token
    };

    var success = function (data) {
        var token = data.token;

        api.init(token);

        $cookieStore.put('token', token);
        $location.path('/');
    };

    var error = function () {
        // TODO: apply user notification here..
    };

    authorization.login(credentials).success(success).error(error);
};
</code></pre>

<p>});
```</p>

<p>As you can see, it just delegates the call to <code>authorizationn</code> service, which is very simple wrap of <code>$http</code>.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;authorization&rsquo;, function ($http, config) {</p>

<pre><code>var url = config.analytics.url;

return {
    login: function (credentials) {
        return $http.post(url + '/auth', credentials);
    }
};
</code></pre>

<p>});</p>

<p>```</p>

<p>Ones server responds with success, controller will place the token to cookie.</p>

<p>The view is just a <code>form</code> with binded <code>ng-submit</code> event to call <code>auth.login()</code> function of controller.</p>

<p>```html</p>

<div class="login-panel">
    <h1>Welcome to Analytics.</h1>
    <p>We are using GitHub for authorization. Please obtain your personal token and use it to sign in.</p>
    <form class="pure-form" ng-submit="login()">
        <input type="password" class="pure-input-1-3" placeholder="Personal Token..." name="token" ng-model="token" required/>

        <button type="submit" class="pure-button pure-button-primary">Sign in</button>
    </form>
</div>


<p>```</p>

<h2>HTTP Interceptor</h2>

<p>In case of any API call returns <code>401</code> we have to redirect user to login page. Angular&rsquo;s HTTP interceptor is great for that job. As you can see from <code>app.js</code> above, it&rsquo;s been pushed to pipe here:</p>

<p><code>js
$httpProvider.responseInterceptors.push('httpInterceptor');
</code></p>

<p>The interceptor implementation itself,</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;httpInterceptor&rsquo;, function httpInterceptor ($q, $window, $location) {</p>

<pre><code>return function (promise) {
    var success = function (response) {
        return response;
    };

    var error = function (response) {
        if (response.status === 401) {
            $location.url('/login');
        }

        return $q.reject(response);
    };

    return promise.then(success, error);
};
</code></pre>

<p>});
```</p>

<h2>Placing Token to HTTP Headers</h2>

<p>Finally, we need to supply that token as HTTP header parameter to all API calls that client issues. Again, you might notice in <code>app.js</code> there is an API initialization call.</p>

<p>```js
app.run(function (api) {</p>

<pre><code>api.init();
</code></pre>

<p>});
```</p>

<p>API initialization services looks like that,</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;api&rsquo;, function ($http, $cookies) {</p>

<pre><code>return {
    init: function (token) {
        $http.defaults.headers.common['X-Access-Token'] = token || $cookies.token;
    }
};
</code></pre>

<p>});</p>

<p>```</p>

<p>This authentication model is very easy to integrate into any existing apps and just keep in mind while creating new ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Angular.js with Require.js]]></title>
    <link href="http://beletsky.net/2013/11/using-angular-dot-js-with-require-dot-js.html"/>
    <updated>2013-11-01T11:36:00+01:00</updated>
    <id>http://beletsky.net/2013/11/using-angular-dot-js-with-require-dot-js</id>
    <content type="html"><![CDATA[<p>I got used to idea of AMD quite long time ago. That time Require.js was best (and probably only one) good implementation that supports it. It worked great for me while I was involved into Backbone.js development. So, once I jumped in to Angular.js my first wish was reuse the same experience as previously.</p>

<p>There was a few difficulties with that.</p>

<!-- More -->


<h2>Why to use Require.js with Angular.js?</h2>

<p>Some people argue about rationality of using Require and Angular together. Indeed, Angular has it&rsquo;s own module system, dependency resolve system etc. I agree with that, but still my point is: Require.js comes with very handy add-on, called <code>r.js</code> &ndash; it&rsquo;s code minimizer and optimizer.</p>

<p>Having <code>grunt</code> build system (which is de-facto standard for JS applications) you can easily integrate with your deployment scenarios.</p>

<h2>Project organization</h2>

<p>Before deep dive, I want to share you some simple ideas of client side code organization that I think makes sense:</p>

<p>```plain</p>

<pre><code>    /
    + - build
    |
    + - components
    |
    + - js
        |
        + - controllers
        |
        + - directives
        |
        + - services
        |
        + - app.js
            |
            main.js
            |
            config.js
</code></pre>

<p>```</p>

<ul>
<li><strong>build</strong> &ndash; results of build .js and .css is placed here (these files are used in production).</li>
<li><strong>components</strong> &ndash; bower components are configured to be placed in this folder.</li>
<li><strong>js</strong> &ndash; source code of application, divided to <code>contollers</code>, <code>directives</code> and <code>services</code>.</li>
</ul>


<h3>main.js</h3>

<p>Require.js main file, that contains configuration and main entry.</p>

<p>```js
require.config({</p>

<pre><code>paths: {
    'angular' : '../components/angular/angular',
    'ngResource': '../components/angular-resource/angular-resource',
    'ngCookies': '../components/angular-cookies/angular-cookies',
    'ngProgressLite': '../components/ngprogress-lite/ngprogress-lite'
},
shim: {
    ngResource: {
        deps: ['angular'],
        exports: 'angular'
    },
    ngCookies: {
        deps: ['angular'],
        exports: 'angular'
    },
    ngProgress: {
        deps: ['angular'],
        exports: 'angular'
    },
    angular: {
        exports : 'angular'
    }
},
baseUrl: '/js'
</code></pre>

<p>});</p>

<p>require([&lsquo;app&rsquo;], function (app) {</p>

<pre><code>app.init();
</code></pre>

<p>});
```</p>

<h3>app.js</h3>

<p>Instance of application, where all Angular.js bootstraping taking place.</p>

<p>```js
define(function (require) {</p>

<pre><code>'use strict';

var angular = require('angular');
var services = require('./services/services');
var controllers = require('./controllers/controllers');
var directives = require('./directives/directives');

var app = angular.module('likeastore', ['services', 'controllers', 'directives']);

app.init = function () {
    angular.bootstrap(document, ['likeastore']);
};

app.config(['$routeProvider', '$locationProvider', '$httpProvider',
    function ($routeProvider, $locationProvider, $httpProvider) {
        $httpProvider.responseInterceptors.push('httpInterceptor');

        $routeProvider
            .when('/', { templateUrl: 'partials/dashboard', controller: 'dashboardController' })
            .when('/inbox', { templateUrl: 'partials/dashboard', controller: 'dashboardController' })
            .when('/facebook', { templateUrl: 'partials/dashboard', controller: 'facebookController' })
            .when('/github', { templateUrl: 'partials/dashboard', controller: 'githubController' })
            .when('/twitter', { templateUrl: 'partials/dashboard', controller: 'twitterController' })
            .when('/stackoverflow', { templateUrl: 'partials/dashboard', controller: 'stackoverflowController' })
            .when('/search', { templateUrl: 'partials/dashboard', controller: 'searchController' })
            .when('/settings', { templateUrl: 'partials/settings', controller: 'settingsController' })
            .when('/ooops', { templateUrl: 'partials/dashboard', controller: 'errorController' })
            .otherwise({ redirectTo: '/' });

        $locationProvider.html5Mode(true);
    }
]);

app.run(function ($window, auth, user) {
    auth.setAuthorizationHeaders();
    user.initialize();
});

return app;
</code></pre>

<p>});
```</p>

<h3>config.js</h3>

<p>Configuration object that contains application settings, like <code>itemsPerPage</code>, <code>logoutTimeout</code> etc.</p>

<p>```js
define(function (require) {</p>

<pre><code>'use strict';

return {
    dashboard: {
        limit: 30
    }
};
</code></pre>

<p>});
```</p>

<h2>Master HTML</h2>

<p>The first noticable difference is the way master HTML file is organized. You are no longer define application with directive <code>&lt;html lang="en" ng-app&gt;</code>, but instead using manual <em>booting</em> of application.</p>

<p>```html
&lt;!doctype html>
<html>
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div class="main-viewer" ng-view&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://beletsky.net/components/requirejs/require.js" data-main="/js/main.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<h2>Booting application</h2>

<p>Once master HTML is loaded, Require.js will execute <code>main.js</code> file. This is were the action should be taken to bootstrap Angular.js application.</p>

<p>Take a look at <code>main.js</code> file from above, here we start application bootstrapping:</p>

<p>```js
require([&lsquo;app&rsquo;], function (app) {</p>

<pre><code>app.init();
</code></pre>

<p>});
```</p>

<p>The <code>init()</code> function of application,</p>

<p>```js
var app = angular.module(&lsquo;likeastore&rsquo;, [&lsquo;services&rsquo;, &lsquo;controllers&rsquo;, &lsquo;directives&rsquo;]);</p>

<p>app.init = function () {</p>

<pre><code>angular.bootstrap(document, ['likeastore']);
</code></pre>

<p>};
```</p>

<p>By doing this, you should be able to start the application and make sure that all modules, controllers and directives are loaded without any issues.</p>

<h2>Build configuration</h2>

<p>Next tricky part is to configure application for production. There is a great <a href="http://tech.pro/blog/1639/using-rjs-to-optimize-your-requirejs-project">blog post</a> of using <code>r.js</code> to optimize the project.</p>

<p>In short, you need to add <a href="https://github.com/gruntjs/grunt-contrib-requirejs">grunt-contrib-requirejs</a> grunt task and configure it.</p>

<p>The problem with Angular.js optimization is that it using dependency injection mechanism, which resolves the services to inject by it&rsquo;s name. If optimizer would change the name of function parameters, when application would not work. Fortunately, there is workaround for that.</p>

<p>```js
requirejs: {</p>

<pre><code>js: {
    options: {
        uglify2: {
            mangle: false
        },
        baseUrl: "public/js",
        mainConfigFile: "public/js/main.js",
        name: 'main',
        out: "public/build/main.js",
        optimize: 'uglify2'
    }
}
</code></pre>

<p>},
```</p>

<p>You have to use <code>uglify2</code> optimizer, that has an option <a href="https://github.com/mishoo/UglifyJS2#mangler-options">mangle</a> that have to set to <code>false</code>. In this case, <code>uglify2</code> will do full optimization and minification of javascript code, without ruing functions parameters names, with is vital for Angular.js.</p>
]]></content>
  </entry>
  
</feed>
