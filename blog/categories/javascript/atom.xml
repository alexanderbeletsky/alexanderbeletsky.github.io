<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-01-13T18:16:49+02:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Authentication for Angular.js App]]></title>
    <link href="http://beletsky.net/2013/11/simple-authentication-in-angular-dot-js-app.html"/>
    <updated>2013-11-22T13:51:00+02:00</updated>
    <id>http://beletsky.net/2013/11/simple-authentication-in-angular-dot-js-app</id>
    <content type="html"><![CDATA[<p>So, you are building pure client side application that works against REST API. The client and server are completely decoupled and typically deployed separately of each other.</p>

<p>API&rsquo;s have one or another way of authenticating it&rsquo;s users. It could be some simple flows, like basic authorization or more complex ones as OAuth/OAuth2. But at the very end you have <code>token</code> that placed either as cookie value or HTTP request header parameter. API is then responsible to check the token for validity and if it&rsquo;s not valid respond with 401.</p>

<!-- More -->


<h2>Configure the Routes</h2>

<p>First we need to have <code>/login</code> router where user is redirected in case of unauthorized access.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>var app = angular.module(&lsquo;dashboardApp&rsquo;, [</p>

<pre><code>'ngCookies',
'ngResource',
'ngSanitize'
</code></pre>

<p>]);</p>

<p>app.config(function ($routeProvider, $locationProvider, $httpProvider) {</p>

<pre><code>$httpProvider.responseInterceptors.push('httpInterceptor');

$routeProvider
    .when('/', { templateUrl: 'views/dashboard.html', controller: 'dashboard' })
    .when('/login', { templateUrl: 'views/auth.html', controller: 'auth' })
    .otherwise({ redirectTo: '/' });

$locationProvider.html5Mode(true);
</code></pre>

<p>});</p>

<p>app.run(function (api) {</p>

<pre><code>api.init();
</code></pre>

<p>});
```</p>

<h2>Authentication Controller and View</h2>

<p>The authentication controller is simple module. It&rsquo;s responsible for sending user credentials to server and handle the response. If server authenticates user, it would return the value of access token in <code>.token</code> attribute. Otherwise, user have to be notified that something went wrong.</p>

<p>Btw, in <a href="https://github.com/likeastore/seismo-dashboard">likeastore/seismo-dashboard</a> I&rsquo;ve tried to use the model based on <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">GitHub personal tokens</a> instead of passwords, that simplifies server a bit allowing it to do not store and sessions, hashed passwords etc. If you interested, take a look at <a href="https://github.com/likeastore/seismo/blob/master/source/server.js#L40">likeastore/seismo/source/server.js</a>.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).controller(&lsquo;auth&rsquo;, function ($scope, $location, $cookieStore, authorization, api) {</p>

<pre><code>$scope.title = 'Likeastore. Analytics';

$scope.login = function () {
    var credentials = {
        username: this.username,
        token: this.token
    };

    var success = function (data) {
        var token = data.token;

        api.init(token);

        $cookieStore.put('token', token);
        $location.path('/');
    };

    var error = function () {
        // TODO: apply user notification here..
    };

    authorization.login(credentials).success(success).error(error);
};
</code></pre>

<p>});
```</p>

<p>As you can see, it just delegates the call to <code>authorizationn</code> service, which is very simple wrap of <code>$http</code>.</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;authorization&rsquo;, function ($http, config) {</p>

<pre><code>var url = config.analytics.url;

return {
    login: function (credentials) {
        return $http.post(url + '/auth', credentials);
    }
};
</code></pre>

<p>});</p>

<p>```</p>

<p>Ones server responds with success, controller will place the token to cookie.</p>

<p>The view is just a <code>form</code> with binded <code>ng-submit</code> event to call <code>auth.login()</code> function of controller.</p>

<p>```html</p>

<div class="login-panel">
    <h1>Welcome to Analytics.</h1>
    <p>We are using GitHub for authorization. Please obtain your personal token and use it to sign in.</p>
    <form class="pure-form" ng-submit="login()">
        <input type="password" class="pure-input-1-3" placeholder="Personal Token..." name="token" ng-model="token" required/>

        <button type="submit" class="pure-button pure-button-primary">Sign in</button>
    </form>
</div>


<p>```</p>

<h2>HTTP Interceptor</h2>

<p>In case of any API call returns <code>401</code> we have to redirect user to login page. Angular&rsquo;s HTTP interceptor is great for that job. As you can see from <code>app.js</code> above, it&rsquo;s been pushed to pipe here:</p>

<p><code>js
$httpProvider.responseInterceptors.push('httpInterceptor');
</code></p>

<p>The interceptor implementation itself,</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;httpInterceptor&rsquo;, function httpInterceptor ($q, $window, $location) {</p>

<pre><code>return function (promise) {
    var success = function (response) {
        return response;
    };

    var error = function (response) {
        if (response.status === 401) {
            $location.url('/login');
        }

        return $q.reject(response);
    };

    return promise.then(success, error);
};
</code></pre>

<p>});
```</p>

<h2>Placing Token to HTTP Headers</h2>

<p>Finally, we need to supply that token as HTTP header parameter to all API calls that client issues. Again, you might notice in <code>app.js</code> there is an API initialization call.</p>

<p>```js
app.run(function (api) {</p>

<pre><code>api.init();
</code></pre>

<p>});
```</p>

<p>API initialization services looks like that,</p>

<p>```js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;dashboardApp&rsquo;).factory(&lsquo;api&rsquo;, function ($http, $cookies) {</p>

<pre><code>return {
    init: function (token) {
        $http.defaults.headers.common['X-Access-Token'] = token || $cookies.token;
    }
};
</code></pre>

<p>});</p>

<p>```</p>

<p>This authentication model is very easy to integrate into any existing apps and just keep in mind while creating new ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Angular.js with Require.js]]></title>
    <link href="http://beletsky.net/2013/11/using-angular-dot-js-with-require-dot-js.html"/>
    <updated>2013-11-01T11:36:00+02:00</updated>
    <id>http://beletsky.net/2013/11/using-angular-dot-js-with-require-dot-js</id>
    <content type="html"><![CDATA[<p>I got used to idea of AMD quite long time ago. That time Require.js was best (and probably only one) good implementation that supports it. It worked great for me while I was involved into Backbone.js development. So, once I jumped in to Angular.js my first wish was reuse the same experience as previously.</p>

<p>There was a few difficulties with that.</p>

<!-- More -->


<h2>Why to use Require.js with Angular.js?</h2>

<p>Some people argue about rationality of using Require and Angular together. Indeed, Angular has it&rsquo;s own module system, dependency resolve system etc. I agree with that, but still my point is: Require.js comes with very handy add-on, called <code>r.js</code> &ndash; it&rsquo;s code minimizer and optimizer.</p>

<p>Having <code>grunt</code> build system (which is de-facto standard for JS applications) you can easily integrate with your deployment scenarios.</p>

<h2>Project organization</h2>

<p>Before deep dive, I want to share you some simple ideas of client side code organization that I think makes sense:</p>

<p>```plain</p>

<pre><code>    /
    + - build
    |
    + - components
    |
    + - js
        |
        + - controllers
        |
        + - directives
        |
        + - services
        |
        + - app.js
            |
            main.js
            |
            config.js
</code></pre>

<p>```</p>

<ul>
<li><strong>build</strong> &ndash; results of build .js and .css is placed here (these files are used in production).</li>
<li><strong>components</strong> &ndash; bower components are configured to be placed in this folder.</li>
<li><strong>js</strong> &ndash; source code of application, divided to <code>contollers</code>, <code>directives</code> and <code>services</code>.</li>
</ul>


<h3>main.js</h3>

<p>Require.js main file, that contains configuration and main entry.</p>

<p>```js
require.config({</p>

<pre><code>paths: {
    'angular' : '../components/angular/angular',
    'ngResource': '../components/angular-resource/angular-resource',
    'ngCookies': '../components/angular-cookies/angular-cookies',
    'ngProgressLite': '../components/ngprogress-lite/ngprogress-lite'
},
shim: {
    ngResource: {
        deps: ['angular'],
        exports: 'angular'
    },
    ngCookies: {
        deps: ['angular'],
        exports: 'angular'
    },
    ngProgress: {
        deps: ['angular'],
        exports: 'angular'
    },
    angular: {
        exports : 'angular'
    }
},
baseUrl: '/js'
</code></pre>

<p>});</p>

<p>require([&lsquo;app&rsquo;], function (app) {</p>

<pre><code>app.init();
</code></pre>

<p>});
```</p>

<h3>app.js</h3>

<p>Instance of application, where all Angular.js bootstraping taking place.</p>

<p>```js
define(function (require) {</p>

<pre><code>'use strict';

var angular = require('angular');
var services = require('./services/services');
var controllers = require('./controllers/controllers');
var directives = require('./directives/directives');

var app = angular.module('likeastore', ['services', 'controllers', 'directives']);

app.init = function () {
    angular.bootstrap(document, ['likeastore']);
};

app.config(['$routeProvider', '$locationProvider', '$httpProvider',
    function ($routeProvider, $locationProvider, $httpProvider) {
        $httpProvider.responseInterceptors.push('httpInterceptor');

        $routeProvider
            .when('/', { templateUrl: 'partials/dashboard', controller: 'dashboardController' })
            .when('/inbox', { templateUrl: 'partials/dashboard', controller: 'dashboardController' })
            .when('/facebook', { templateUrl: 'partials/dashboard', controller: 'facebookController' })
            .when('/github', { templateUrl: 'partials/dashboard', controller: 'githubController' })
            .when('/twitter', { templateUrl: 'partials/dashboard', controller: 'twitterController' })
            .when('/stackoverflow', { templateUrl: 'partials/dashboard', controller: 'stackoverflowController' })
            .when('/search', { templateUrl: 'partials/dashboard', controller: 'searchController' })
            .when('/settings', { templateUrl: 'partials/settings', controller: 'settingsController' })
            .when('/ooops', { templateUrl: 'partials/dashboard', controller: 'errorController' })
            .otherwise({ redirectTo: '/' });

        $locationProvider.html5Mode(true);
    }
]);

app.run(function ($window, auth, user) {
    auth.setAuthorizationHeaders();
    user.initialize();
});

return app;
</code></pre>

<p>});
```</p>

<h3>config.js</h3>

<p>Configuration object that contains application settings, like <code>itemsPerPage</code>, <code>logoutTimeout</code> etc.</p>

<p>```js
define(function (require) {</p>

<pre><code>'use strict';

return {
    dashboard: {
        limit: 30
    }
};
</code></pre>

<p>});
```</p>

<h2>Master HTML</h2>

<p>The first noticable difference is the way master HTML file is organized. You are no longer define application with directive <code>&lt;html lang="en" ng-app&gt;</code>, but instead using manual <em>booting</em> of application.</p>

<p>```html
&lt;!doctype html>
<html>
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div class="main-viewer" ng-view&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://beletsky.net/components/requirejs/require.js" data-main="/js/main.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<h2>Booting application</h2>

<p>Once master HTML is loaded, Require.js will execute <code>main.js</code> file. This is were the action should be taken to bootstrap Angular.js application.</p>

<p>Take a look at <code>main.js</code> file from above, here we start application bootstrapping:</p>

<p>```js
require([&lsquo;app&rsquo;], function (app) {</p>

<pre><code>app.init();
</code></pre>

<p>});
```</p>

<p>The <code>init()</code> function of application,</p>

<p>```js
var app = angular.module(&lsquo;likeastore&rsquo;, [&lsquo;services&rsquo;, &lsquo;controllers&rsquo;, &lsquo;directives&rsquo;]);</p>

<p>app.init = function () {</p>

<pre><code>angular.bootstrap(document, ['likeastore']);
</code></pre>

<p>};
```</p>

<p>By doing this, you should be able to start the application and make sure that all modules, controllers and directives are loaded without any issues.</p>

<h2>Build configuration</h2>

<p>Next tricky part is to configure application for production. There is a great <a href="http://tech.pro/blog/1639/using-rjs-to-optimize-your-requirejs-project">blog post</a> of using <code>r.js</code> to optimize the project.</p>

<p>In short, you need to add <a href="https://github.com/gruntjs/grunt-contrib-requirejs">grunt-contrib-requirejs</a> grunt task and configure it.</p>

<p>The problem with Angular.js optimization is that it using dependency injection mechanism, which resolves the services to inject by it&rsquo;s name. If optimizer would change the name of function parameters, when application would not work. Fortunately, there is workaround for that.</p>

<p>```js
requirejs: {</p>

<pre><code>js: {
    options: {
        uglify2: {
            mangle: false
        },
        baseUrl: "public/js",
        mainConfigFile: "public/js/main.js",
        name: 'main',
        out: "public/build/main.js",
        optimize: 'uglify2'
    }
}
</code></pre>

<p>},
```</p>

<p>You have to use <code>uglify2</code> optimizer, that has an option <a href="https://github.com/mishoo/UglifyJS2#mangler-options">mangle</a> that have to set to <code>false</code>. In this case, <code>uglify2</code> will do full optimization and minification of javascript code, without ruing functions parameters names, with is vital for Angular.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think Ahead, Think Logging]]></title>
    <link href="http://beletsky.net/2013/07/think-ahead-think-logging.html"/>
    <updated>2013-07-04T09:02:00+03:00</updated>
    <id>http://beletsky.net/2013/07/think-ahead-think-logging</id>
    <content type="html"><![CDATA[<p>When we develop application, we have everything to understand applications behavior. Debugger, traces, tests &ndash; all information just in hands. If something goes wrong, it&rsquo;s not so hard to track the problem.</p>

<p>Situation is completely different then app leaves development box and goes to production. In best case, we&rsquo;ll receive email or tweet from user, but typically problem remains on production <em>silently</em>, while customers just <em>silently</em> leave.</p>

<p>Prepare application to production, means prepare good error logging. I&rsquo;m going to show how to extend your Express.js with proper logs.</p>

<!-- More -->


<h2>What it means to have good logs?</h2>

<p>In my perspective good logs are ones satisfying following criterias:</p>

<ul>
<li>All unhandled errors are logged</li>
<li>Log records are comprehensive and clear</li>
<li>Logs are easily accessible</li>
<li>If critical error logged, developers have to be notified</li>
</ul>


<h2>Logger</h2>

<p>Logger is object responsible to take some message or object and log it. The example of one,</p>

<p>```js
var util = require(&lsquo;util&rsquo;);
var colors = require(&lsquo;colors&rsquo;);
var moment = require(&lsquo;moment&rsquo;);</p>

<p>var logger = {</p>

<pre><code>colorsMap: {
    'success': 'green',
    'warning': 'yellow',
    'err': 'red',
    'info': 'grey'
},

success: function (message) {
    this.log('success', message);
},

warning: function (message) {
    this.log('warning', message);
},

error: function (message) {
    this.log('err', message);
},

info: function (message) {
    this.log('info', message);
},

log: function (type, message) {
    var record = this.timestamptMessage(util.format('%s: %s', type.toUpperCase(), this.formatMessage(message)));
    console.log(record[this.colorsMap[type]]);
},

formatMessage: function (message) {
    return typeof message === 'string' ? message : JSON.stringify(message);
},

timestamptMessage: function (message) {
    return util.format('[%s] %s', moment(), message);
}
</code></pre>

<p>};</p>

<p>module.exports = logger;
```</p>

<p><code>Logger</code> could be used everywhere you need to get some info. But our ultimate goal is to be aware of all errors might appear in application.</p>

<h2>Augmenting Express.js application with logs</h2>

<p>We never know then error might appear. But, we can catch all unhandled errors + if some web request failed to complete with success code, we have to log that as well.</p>

<h3>Handling &ldquo;unhandled&rdquo; errors</h3>

<p>We can listen to process &lsquo;uncaughtException&rsquo; event. It just placed in <code>app.js</code> file. The best place is just after require section and before any object is used.</p>

<p>```js
process.on(&lsquo;uncaughtException&rsquo;, function (err) {</p>

<pre><code>logger.error({msg:'Uncaught exception', error:err, stack:err.stack});
</code></pre>

<p>});
```</p>

<p>From official docs,</p>

<blockquote><p>Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) will not occur.</p></blockquote>

<p>So, we just redirecting that error to logger. Also, docs say following:</p>

<blockquote><p>Don&rsquo;t use it, use <a href="http://nodejs.org/api/domain.html">domains</a> instead. If you do use it, restart your application after every unhandled exception!</p></blockquote>

<p>I still not switched to domain version for that, need to consider that advice.</p>

<p>Anyway, this <code>uncaughtException</code> will give us only information typically about <code>undefined</code> variables used, that&rsquo;s pretty simple to caught during development testing. More interesting stuff is what&rsquo;s actually happening on runtime, while application handling HTTP requests.</p>

<h3>Logging failing HTTP requests</h3>

<p>Express.js power feature is <em>middleware</em>. It&rsquo;s possible to do a lot of cool stuff based on middleware functions. We&rsquo;ll utilize that feature to create a few middleware function that would allow to log all failed HTTP requests.</p>

<p>First one,</p>

<p>```js
// have to be injected as last middlware function for all routes
function logErrors () {</p>

<pre><code>return function logErrors(err, req, res, next) {
    req.unhandledError = err;

    next(err);
};
</code></pre>

<p>}
```</p>

<p>Second one,</p>

<p>```js
function logHttpErrors () {</p>

<pre><code>return function logHttpErrors (req, res, next) {
    var end = res.end;
    res.end = function (data, encoding) {
        var status = res.statusCode;
        var message = {
            url: res.req.url,
            headers: res.req.headers,
            status: status,
            body: req.body,
            params: req.params
        };

        if (req.unhandledError) {
            message.error = req.unhandledError;
        }

        if (warning(status)) {
            logger.warning(message);
        }

        if (error(status)) {
            logger.error(message);
        }

        end.call (res, data, encoding);
    };

    next();
};

function warning (status) {
    return status &gt;= 400 &amp;&amp; status &lt; 500;
}

function error (status) {
    return status &gt;= 500;
}
</code></pre>

<p>}
```</p>

<p>Look a bit closer: <code>logError()</code> produces middleware function that expected to be the last in chain, and if previous function retured an error, it stores that error object in in requests. <code>logHttpErrors()</code> produces middleware function that would override response <code>.end()</code> function and logs warning or error, depending on response status code.</p>

<p>Let&rsquo;s integrate to app.</p>

<p><code>logHttpErrors()</code> could be put into <code>app.configure()</code> function,</p>

<p>```js
app.configure(function(){</p>

<pre><code>app.set('port', process.env.VCAP_APP_PORT || 3001);
// ...
app.use(middleware.errors.logHttpErrors());
// ...
</code></pre>

<p>});</p>

<p>```</p>

<p>It&rsquo;s a bit more trickier with <code>logError()</code> function. As I said above, it have to be <strong>last</strong> callback in chain.</p>

<p>So, it&rsquo;s only possible to apply it in <code>app.configure()</code> since the routes are not defined yet. Even it&rsquo;s possible to manually add it to each endpoint manually, I don&rsquo;t think it&rsquo;s good idea, because it&rsquo;s easy to forgot do that.</p>

<p>I came up to following solution,</p>

<p>```js
require(&lsquo;./source/api&rsquo;)(app);
require(&lsquo;./source/router&rsquo;)(app);</p>

<p>// here .logError() will be added to end of chain
applyErrorLogging(app);</p>

<p>http.createServer(app).listen(app.get(&lsquo;port&rsquo;), function() {</p>

<pre><code>var env = process.env.NODE_ENV || 'development';
logger.info('Likeastore app listening on port ' + app.get('port') + ' ' + env + ' mongo: ' + config.connection);
</code></pre>

<p>});
```</p>

<p>And <code>applyErrorLogging()</code> function,</p>

<p>```js
var middleware = require(&lsquo;../middleware&rsquo;);</p>

<p>function applyErrorLogging(app) {</p>

<pre><code>for (var verb in app.routes) {
    var routes = app.routes[verb];
    routes.forEach(patchRoute);
}

function patchRoute (route) {
    route.callbacks.push(middleware.errors.logErrors());
}
</code></pre>

<p>}</p>

<p>module.exports = applyErrorLogging;
```</p>

<p>Now, it&rsquo;s everything in place, so all <code>4xx</code> are logged as warnings, all <code>5xx</code> are logged as errors.</p>

<h2>Move your logs to cloud</h2>

<p>Simply logging information is not enough. While your application writes info to console on production machine, this information worthless to you. You have to put you logs to the place where is easily accessible.</p>

<p>There are few services like that. One of I recently hooked with in <a href="https://logentries.com/">Logentries</a>.</p>

<p>Logentries gives you API to submit information there + Dashboard, there logs can be viewed, search and analyzed.</p>

<p><img src="/images/blog/logentries-screen.png" alt="logentries dashboard" /></p>

<p>Install <code>node-logentries</code> client,</p>

<p><code>bash
$ npm install node-logentries --save
</code></p>

<p>And now, we need to update logger, to not only <code>console.log</code> but send it to Logentries.</p>

<p>Will create Logentries client,</p>

<p>```js
var log = logentries.logger({</p>

<pre><code>token:process.env.LOGENTRIES_TOKEN
</code></pre>

<p>});
log.level(&lsquo;info&rsquo;);</p>

<p>```</p>

<p>Will extend existing logger and override current <code>.log()</code> function:</p>

<p>```js
var logentriesLogger = (function (_super) {</p>

<pre><code>var child = {
    log: function (type, message) {
        _super.log(type, message);
        log.log(type, message);
    }
};

return _.extend(Object.create(_super), child);
</code></pre>

<p>})(logger);</p>

<p>module.exports = logentriesLogger;
```</p>

<p>Checkout this <a href="https://gist.github.com/alexanderbeletsky/5921464">gist</a> where you can see all things put together.</p>

<p>So, now wherever <code>logger</code> is used, logs will both shown to screen (which is cool for development) and submitted to Logentries (which is cool for production).</p>

<h2>Setup notification on critical errors</h2>

<p>If error appeared on production, developers attention should be there. Without good notification system, is too easy to skip the moment then error arises.</p>

<p>Again, it&rsquo;s easy to do with Logentries. Just go to <code>Alerts</code> section and setup patterns of errors you interested and email addresses for notifications.</p>

<p><img src="/images/blog/logentries-alerts.png" alt="logentries alerts setup" /></p>

<p>Email is not only one option, you can setup for SMS or webhook for your app. So, anytime error or warning appeared you will be notified and take action on it.</p>

<h2>Conclusions</h2>

<p>I&rsquo;ve used that for <a href="http://likeastore.com">likeastore</a> app I currently working on and it works just fine. Having such logs gave a lot of information after we went to private-beta phase. When you see how application behaves then real users start to use, it gives you good insights about fixes and improvements to apply.</p>

<p>Taking into account that approach above is very universal and easy to adopt, to it today.</p>
]]></content>
  </entry>
  
</feed>
