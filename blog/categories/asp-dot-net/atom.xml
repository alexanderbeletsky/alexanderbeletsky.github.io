<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/asp-dot-net/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-01-25T14:56:59+02:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC Routes and Namespaces]]></title>
    <link href="http://beletsky.net/2012/07/aspnet-mvc-routes-and-namespaces.html"/>
    <updated>2012-07-25T16:42:00+03:00</updated>
    <id>http://beletsky.net/2012/07/aspnet-mvc-routes-and-namespaces</id>
    <content type="html"><![CDATA[<div class='post'>
<p>    While I was working on <a href="https://nuget.org/packages/Elmah.MVC">ELMAH.MVC v.2.0.0</a> I noticed a something that contradicts the way I understand how the controller resolving mechanism works. Before, I always thought that namespaces matters, but in practice I saw it otherwise.<br />
</p><h2>Controller in separate class assembly</h2><p>    The good way of distribution re-usable software is class assembly. Suppose, I have 2 projects - one ASP.NET MVC web application (<code>MvcApplication2</code>), and another one is class assembly (<code>Awesome.Mvc.Lib</code>). Web application references the class library.<br />
</p><a href="https://lh5.googleusercontent.com/-Y6YKPiPmC5U/UA_1XCcp2jI/AAAAAAAAI-0/lybgi7ALYoc/s620/image-1.png"><br />
    <img src="https://lh5.googleusercontent.com/-Y6YKPiPmC5U/UA_1XCcp2jI/AAAAAAAAI-0/lybgi7ALYoc/s620/image-1.png" /><br />
</a><br />
<p>    I want to have some particular controller to be exposed from <code>Awesome.Mvc.Lib</code>. Namely, I want to have a controller inside the class library, that would be accessible from <code>MvcApplication2</code>. I'll add some <code>ShinnyController.cs</code> inside.<br />
</p><pre class="brush: csharp">namespace Awesome.Mvc.Lib
{
    public class ShinnyController : Controller
    {
        [HttpGet]
        public string Index()
        {
            return "I'm in Shinny controller";
        }
    }
}    
</pre><p>    Originally, my thought was, <code>ShinnyController</code> will always be "invisible" for <code>MvcApplication2</code>, since it placed into another namespace. Meaning, if I don't initialize a route pointing to <code>ShinnyController</code>, the routing mechanisms would never match it. But, if I run the application and go <code>http://localhost:26810/shinny</code> I will see:<br />
</p><a href="https://lh3.googleusercontent.com/-rK7AMYLTMEw/UA_1XPcDdYI/AAAAAAAAI-w/SLICb6ZxIh0/s620/image-2.png"><br />
    <img src="https://lh3.googleusercontent.com/-rK7AMYLTMEw/UA_1XPcDdYI/AAAAAAAAI-w/SLICb6ZxIh0/s620/image-2.png" /><br />
</a><br />
<p>    This is totally unexpected to me! It turns out that default route is matching the controller/action from <code>Awesome.Mvc.Lib</code> class library.<br />
</p><pre class="brush: csharp">routes.MapRoute(
    "Default", // Route name
    "{controller}/{action}/{id}", // URL with parameters
    new { controller = "Home", action = "Index", id = UrlParameter.Optional } // Parameter defaults
);
</pre><p>    What I'm expecting though is that <code>ShinnyController.cs</code> have to be "explicitly" routed, and ideally placed into its own sub-URL, like <code>http://localhost:26810/awesome/shinny</code>.<br />
</p><h2>What about namespaces fallback?</h2><p>    I've asked this question on <a href="http://stackoverflow.com/questions/11077554/controller-in-separate-assembly-and-routing">stackoverflow</a>. Even if I had good answer, it did not make it happy. So, to get the behavior I want, I need to do the following: <br />
</p><ol>    <li>Change the default routing to explicitly mention the namespace and set fallback to false:</li>
<pre class="brush: csharp">public class MvcApplication : System.Web.HttpApplication
{
    public static void RegisterRoutes(RouteCollection routes)
    {
        routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

        var route = routes.MapRoute(
            "Default", // Route name
            "{controller}/{action}/{id}", // URL with parameters
            new { controller = "Home", action = "Index", id = UrlParameter.Optional }, // Parameter defaults
            new[] { "MvcApplication2" }
        );

        route.DataTokens["UseNamespaceFallback"] = false;

    }
</pre>    <li>Create an Area in <code>Awesome.Mvc.Lib</code> and configure routing to it:</li>
<pre class="brush: csharp">public class AwesomeAreaRegistration : AreaRegistration
{
    public override void RegisterArea(AreaRegistrationContext context)
    {
        context.MapRoute("Awesome_default", "Awesome/{controller}/{action}", new { action = "Index" });
    }

    public override string AreaName
    {
        get { return "Awesome"; }
    }
}
</pre></ol><p>After I did so, I can reach the <code>http://localhost:26810/awesome/shinny</code>:<br />
</p><a href="https://lh5.googleusercontent.com/-rnnOpRSIxE4/UA_1XFPhrPI/AAAAAAAAI-s/htheaCJ-EIE/s620/image-3.png"><br />
    <img src="https://lh5.googleusercontent.com/-rnnOpRSIxE4/UA_1XFPhrPI/AAAAAAAAI-s/htheaCJ-EIE/s620/image-3.png" /><br />
</a><br />
<p>And in the same time, <code>http://localhost:26810/shinny</code> is getting to be rejected:<br />
</p><a href="https://lh4.googleusercontent.com/-VP6ZPs8hAS8/UA_1Xye5KYI/AAAAAAAAI-4/rjY9e6_aCfs/s620/image-4.png"><br />
    <img src="https://lh4.googleusercontent.com/-VP6ZPs8hAS8/UA_1Xye5KYI/AAAAAAAAI-4/rjY9e6_aCfs/s620/image-4.png" /><br />
</a><br />
<p>Even though, it looks like desired behavior.. It sucks.<br />
</p><h2>Why it sucks?</h2><p>    By placing the controllers into separate assembly, I'm thinking about it's distribution by simple bin-deployment or by Nuget. Both ways assumes, simple copy of assembly into particular location, adding references and that's it! I don't suppose to change default routing that comes in ASP.NET MVC applications templates.<br />
</p><p>    I want to have the control of routes *inside* the class library, not outside of it (in web application). But, the default behavior of ASP.NET MVC routing is completely different. Moreover, in some cases I want users of library to be able to <a href="https://github.com/alexanderbeletsky/elmah.mvc/issues/14">control</a> the routing. <br />
</p><p>    In my opinion the default behavior with <code>UseNamespaceFallback = true</code> is wrong. I'll give one more example, to proof it.<br />
</p><p>    I removed namespace fallback code from default route, after added new Area, called Api. Inside this Area I place one controller, called <code>SimpleController</code>.<br />
</p><pre class="brush: csharp">namespace MvcApplication2.Areas.Api.Controllers
{
    public class SimpleController : Controller
    {
        public string Index()
        {
            return "I'm simple controller from API area";
        }

    }
}
</pre><p>The controller is reachable, as expected:<br />
</p><a href="https://lh4.googleusercontent.com/-2NcIgQ4VJHM/UA_1YBawaqI/AAAAAAAAI_I/1qbj9KT-4HA/s620/image-5.png"><br />
    <img src="https://lh4.googleusercontent.com/-2NcIgQ4VJHM/UA_1YBawaqI/AAAAAAAAI_I/1qbj9KT-4HA/s620/image-5.png" /><br />
</a><br />
<p>But now, I try to access <code>/simple</code>:<br />
</p><a href="https://lh3.googleusercontent.com/-un47RILi9do/UA_1YYLqlWI/AAAAAAAAI_A/Jv4J5u5uFGg/s630/image-6.png"><br />
    <img src="https://lh3.googleusercontent.com/-un47RILi9do/UA_1YYLqlWI/AAAAAAAAI_A/Jv4J5u5uFGg/s630/image-6.png" /><br />
</a><br />
<p>Hey WTF? The whole idea of Areas is just ruined. What I'm doing wrong?<br />
</p><p>I'm feeling very frustrated about this issue. Even though I <a href="http://www.beletsky.net/2011/12/inside-aspnet-mvc-instantiation-of.html">understand</a> why it happens, it smells like a bug for me? It works exactly the same for ASP.NET MVC 2, 3, 4. I'm asking you guys, to help to clarify the problem. What is your opinion on that? Are you agree on such default behavior?<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH.MVC v.2.0.0 - Release Candidate]]></title>
    <link href="http://beletsky.net/2012/06/elmahmvc-v200-release-candidate.html"/>
    <updated>2012-06-13T18:42:00+03:00</updated>
    <id>http://beletsky.net/2012/06/elmahmvc-v200-release-candidate</id>
    <content type="html"><![CDATA[<div class='post'>
<p>        I've just pushed new <a href="https://nuget.org/packages/Elmah.MVC">Elmah.MVC</a> package. It contains several changes that I described on my <a href="http://www.beletsky.net/2012/06/elmahmvc-v20-is-coming.html">previous</a> post. Current version is v.2.0.0-rc, release candidate that I'm about to spent sometime with testing and collecting feedback before it's availability.<br />
    </p>    <p>        I think ELMAH.MVC is getting it's shape. Hopefully it will be as easy to use as indented.<br />
    </p>    <h2>Changes highlights</h2>    <p>        Quickly recap the major and breaking changes of ELMAH.MVC 2.0.<br />
    </p>    <h3>Deployed as class library</h3>    <p>        First noticeable change is that ELMAH.MVC is no longer deployed as several source files, having new Area and Elmah controller inside. The the sake of compatibility and reach functionality it is now deployed as <code>Elmah.Mvc.dll</code>. It's using David's Ebbo <a href="https://nuget.org/packages/WebActivator">WebActivator</a> project to bootstrap itself, registering routes and global filters.<br />
    </p>    <h3>New URL to access ELMAH dashboard</h3>    <p>        In 2.0 ELMAH is accessed by <code>/elmah</code> route (not <code>/admin/elmah</code> as it was in previous versions). There are several reasons for that. First one is because of new 'Admin' area is not created anymore, second is the really strange behavior is ASP.NET MVC default routing rules. <br />
    </p>    <h3>HandleErrorAttribute inside</h3>    <p>        If you tried to use ELMAH in ASP.NET MVC, you are probably implemented your own HandleErrorAttribute, as it's shown in this <a href="http://stackoverflow.com/questions/766610/how-to-get-elmah-to-work-with-asp-net-mvc-handleerror-attribute">example</a>. You no longer need to apply this custom code with Elmah.MVC. As soon you installed package, so can safely remove your HandleError attribute, since it's already included into package.<br />
    </p>    <h3>No more /elmah.axd</h3>    <p>        In previous Elmah.MVC version, you have to go to <code>web.config</code> file and remove all handlers manually. Elmah.MVC 2.0 is now having <code>elmah.corelibrary</code> as dependency and provides it's own web.config.transform that excludes all legacy stuff. In short, no more <code>/elmah.axd</code> to remove.<br />
    </p>    <h3>Configurable authorization rules</h3>    <p>        Now, you are very flexible with authorization rules of <code>ElmahController</code>. web.config contains several <code>elmah.mvc.*</code> app keys you can tweak it. Disable or apply authentication based on roles, no problem. <br />
    </p>    <h3>Logging with customError="On"</h3>    <p>        Something that <a href="http://www.troyhunt.com/">Troy Hunt</a> noticed and <a href="https://github.com/alexanderbeletsky/elmah.mvc.controller/issues/13">registered</a>. Now, you should not have any problems with logging unhandled exceptions, even if customErrors is enabled.<br />
    </p>    <h2>Trying it out!</h2>    <p>        I would be really happy if you help me to test it. You are welcome to try it out. Please install new package and let me know your opinion or bugs you might find. To install preliminary version, just do.<br />
    </p>    <div class="commandWrapper">        <div class="commandPrompt">            <p class="command">                PM&gt; Install-Package Elmah.MVC -Pre<br />
            </p>        </div>    </div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH.MVC v2.0 is coming]]></title>
    <link href="http://beletsky.net/2012/06/elmahmvc-v20-is-coming.html"/>
    <updated>2012-06-09T17:36:00+03:00</updated>
    <id>http://beletsky.net/2012/06/elmahmvc-v20-is-coming</id>
    <content type="html"><![CDATA[<div class='post'>
<p>        <a href="https://nuget.org/packages/Elmah.MVC">Elmah.MVC</a> is rather popular package in NuGet gallery. Being submitted about year ago it currently has about ~14K downloads. I received a lot of nice feedback and to be honest feel quite happy that people are using it. Being extremely simple it requires almost no effort to support. <br />
    </p>    <p>        Anyways, several month ago I received an email from <a href="https://nuget.org/profiles/james%20driscoll">James Driscoll</a> one of the major contributors to ELMAH project. James says that he is working on similar problem, namely easy to pickup ELMAH error handling within ASP.NET MVC applications. He saw my package, but in the same time he has his own prototype in <a href="http://code.google.com/p/elmah-sandbox/">ELMAH.Sandbox</a> project, hosted on google-code. Instead of creating yet another NuGet package he proposed to join our efforts and release next version of ELMAH.MVC. That was the beginning of ELMAH.MVC v2.0. <br />
    </p>    <h2>What will be changed?</h2>    <p>        <a href="https://nuget.org/packages/Elmah.MVC">Elmah.MVC</a> is really simple one, actually delivered as 2 C# code files. It creates new ASP.NET MVC area and register route to ElmahController, which is just an adapter to ELMAH LogFactory. It worked very smooth, but with more functionality this approach no longer work.<br />
    </p>    <h3>Pack ELMAH.MVC into separate class library</h3>    <p>        The idea is to bother user as less as possible. Ideally he just drops the DLL into Bin folder and it start to work. In real world it's a bit more complex, but anyway. Elmah.MVC will be packed and delivered as class library.<br />
    </p>    <h3>Support in VB.NET projects</h3>    <p>        Since it will be just a class library, VB.NET developers finally could use Elmah.MVC without any manual code conversion. I don't know how many ASP.NET MVC3 applications are developed in VB.NET, but I think it's still nice step towards compatibility. <br />
    </p>    <h3>HandleError attribute</h3>    <p>        A lot of people, including myself are using <code>HandleErrorAttribute</code> on controllers to redirect user for nice looking error page if something goes wrong. This mean you handle the error by yourself, so it won't appear on ELMAH log. That is very big disadvantage of current Elmah.MVC. This will be fixed as new global filter added, that will care that everything will be properly logged.<br />
    </p>    <h3>Several small fixes</h3>    <p>        So far, I've collected some <a href="https://github.com/alexanderbeletsky/elmah.mvc.controller/issues?sort=created&state=open">issues</a> that just was in line and waited to be fixed. It's a good time to get rid of those.<br />
    </p>    <h2>What's the plan?</h2>    <p>        Good for me, James did all heavylifting. I will backport some good code into new project. I've created new <a href="https://github.com/alexanderbeletsky/elmah.mvc.controller/tree/v.2.0.0">branch</a> and already started to work. Unfortunately, I could see some breaking changes there. At the end of this week, I'll have new package ready to test. You can track the progress on github by watching v.2.0 <a href="https://github.com/alexanderbeletsky/elmah.mvc.controller/issues/milestones">milestone</a>.<br />
    </p>    <p>        I will need your help guys to test that thing out. If everything goes fine, I'll update NuGet package as soon as possible.<br />
    </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Model Binding to IDictionary<> is Broken]]></title>
    <link href="http://beletsky.net/2012/04/json-model-binding-to-idictionary-is.html"/>
    <updated>2012-04-26T09:39:00+03:00</updated>
    <id>http://beletsky.net/2012/04/json-model-binding-to-idictionary-is</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Yesterday, I've been creating small web service based on existing ASP.NET MVC infrastructure. The task was really simple. Web service itself should be just a proxy for existing internal API. The API method takes a <code>Dictionary</code> that contains some fields. So, I've created a data model like that.<br />
</p><pre class="brush: csharp">public class Notification
{
 public int Id { get; set; }
 public string Recipient { get; set; }
 public IDictionary&lt;string, string&gt; Fields { get; set; }
}
    </pre><p>and simple HttpPost handler, like<br />
</p><pre class="brush: csharp">[HttpPost]
public ActionResult Send(string token, Notification notification)
{
    // ...
}
    </pre><p>the payload posted to method is:<br />
</p><pre class="brush: plain">{"id":32,"recipient":"a@a.com","fields": { "EMAIL": "a@a.com"} }

    </pre><p>I've tried to test the method, but the <code>Fields</code> property of model was always <code>null</code>. First I thought I got a problem somewhere in JSON payload, but after sometime I saw that everything is correct. <br />
</p><p>Google showed I'm not alone, so the issue been <a href="http://stackoverflow.com/questions/4710729/post-json-dictionary">raised</a> on SO. Darin Dimitrov responded that this is a bug of <code>JsonValueProviderFactory</code>. In the same time, some comments below contained the link for a bug <a href="http://connect.microsoft.com/VisualStudio/feedback/details/636647/make-jsonvalueproviderfactory-work-with-dictionary-types-in-asp-net-mvc">reported</a>, that was already stated as Fixed. <br />
</p><p>I forgot to mention that I did that stuff on ASP.NET MVC 2. I decided to try that on ASP.NET MVC 3, since I got the sources and if it works I can try to backport the fix into our MVC 2 infrastructure. <br />
</p><p>With my great disappointment it fails in exactly same way for ASP.NET MVC 3. That's not funny anymore. I blamed <code>JavaScriptSerializer</code>, JSON serializer that used inside the <code>JsonValueProviderFactory</code> that it simply not able to handle Dictionaries right. I knew that ASP.NET Web API is using Newtonsoft JSON.NET framework, which is really powerful for serialization/deserialization of JSON.<br />
</p><p>So, I run VS 2011 and create test <code>ApiController</code> that receives the model with <code>IDictionary</code> inside. What do you think happen? Ok, the model is no longer <code>null</code>, but it contains Dictionary with count of elements equals to zero. Fail.<br />
</p><pre class="brush: csharp">public void Post(Notification notification)
{
    // ...
}
    </pre><p>I re-raised <a href="http://aspnetwebstack.codeplex.com/workitem/99">issue</a> again, now on ASP.NET Web Stack site on <a href="http://aspnetwebstack.codeplex.com/">Codeplex</a>. I also tried to quickly write the unit test that show the existence of problem, but it's not that easy to do that, so it requires some time. Hope I can do that later.<br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Articles Mobile Application]]></title>
    <link href="http://beletsky.net/2012/04/aspnet-articles-mobile-application.html"/>
    <updated>2012-04-12T16:50:00+03:00</updated>
    <id>http://beletsky.net/2012/04/aspnet-articles-mobile-application</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Do you like <a href="http://asp.net">asp.net</a> web site content? Do you enjoy reading fine selected articles about ASP.NET and related technologies? Me too, but I spent most of the reading from my iPad. And unfortunately <a href="http://asp.net">asp.net</a> is not that mobile friendly yet, moreover articles are just a bunch of links to developers blogs, that might not so be adapted for mobile devices as well. <br />
</p><p>So, I would like to introduce mobile application that I created to close the gap. Please welcome <a href="http://aspnetmobile.apphb.com/">http://aspnetmobile.apphb.com/</a>.<br />
</p><a href="https://lh4.googleusercontent.com/-OG7PCIOHvgg/T4bc0YDkssI/AAAAAAAAIYs/Ml5GW6dmmAg/s720/image-1.png"><br />
    <img src="https://lh4.googleusercontent.com/-OG7PCIOHvgg/T4bc0YDkssI/AAAAAAAAIYs/Ml5GW6dmmAg/s720/image-1.png" style="width: 620px"/><br />
</a><br />
<p><a href="http://aspnetmobile.apphb.com/">aspnet.mobile</a> is rather simple application. Despite of many similar apps that uses RSS channel, it goes for ASP.NET portal simple external API. RSS is bad in the way that you are limited with initial content (typically up to 25 articles on channel). With <a href="http://aspnetmobile.apphb.com/">aspnet.mobile</a> you freely can access any article ever posted on ASP.NET.<br />
</p><p>It's powered by <a href="http://jquerymobile.com/">jQuery Mobile</a> that currently provides more "iOS-look" interface. I'm happy with that currently but I plan to have native look for Android and WP7 as well, so I thinking either to change the framework or to create custom one. But it currently looks and works great on iPad.<br />
</p><a href="https://lh6.googleusercontent.com/-ieAlxaf1ltM/T4bc0oHZBaI/AAAAAAAAIYw/qzKfJmSfi2A/s720/image-2.PNG"><br />
    <img src="https://lh6.googleusercontent.com/-ieAlxaf1ltM/T4bc0oHZBaI/AAAAAAAAIYw/qzKfJmSfi2A/s720/image-2.PNG" style="width: 620px"/><br />
</a><br />
<p>I didn't want to just refer reader to developers blog, for the reason above. Instead, I much inspired by iOS 5.0 Safari feature called 'Reader'. A bit of googling and I found that Safari using technology called <a href="http://www.readability.com/">Readability</a>. There are different ports of that technology for a different platforms: Ruby, PHP, Python, Node.js.. and I was happy to find great implementation of <a href="https://github.com/marek-stoj/NReadability">NReadability</a> by <a href="http://about.me/marekstoj">Marek Stoj</a>. Basically, it allowed me to render nice looking pages, like:<br />
</p><a href="https://lh6.googleusercontent.com/-D5ZD6S532PE/T4bc0XPGX1I/AAAAAAAAIYo/oVBo505PNXI/s720/image-3.PNG"><br />
    <img src="https://lh6.googleusercontent.com/-D5ZD6S532PE/T4bc0XPGX1I/AAAAAAAAIYo/oVBo505PNXI/s720/image-3.PNG" style="width: 620px"/><br />
</a><br />
<p>Besides of that it has a basic support of offline mode. All read articles are stored in Local Storage, so once the application offine it will provide proper behavior and propose some content.<br />
</p><p>I will be happy if you try and let me know your impression. Feel free to check sources at <a href="https://github.com/alexanderbeletsky/aspnet.mobile">github</a>.<br />
</p></div>

]]></content>
  </entry>
  
</feed>
