<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Agile | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2013-10-23T17:26:01+03:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AgileBaseCamp Kiev 2011: Dmitry Mindra: Design by Contract in .NET]]></title>
    <link href="http://beletsky.net/2011/04/agilebasecamp-kiev-2011-dmitry-mindra.html"/>
    <updated>2011-04-20T12:05:00+03:00</updated>
    <id>http://beletsky.net/2011/04/agilebasecamp-kiev-2011-dmitry-mindra</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
<small>
<strong>Disclaimer:</strong> text below is compilation of notes I made on AgileBaseCamp 2011 conference, listening to different speakers. I do it to keep knowledge I got on conference, share it with my colleagues and anyone else who interested. It is only about how I heard, interpret, write down the original speech. It also includes my subjective opinion on some topics. So it could not 100% reflects author opinion and original ideas. 
</small>
</p>
<p>
<a href="http://kiev.agilebasecamp.org/mindra/">Dmitry Mindra</a> prepared very nice speech dedicated to <a href=http://en.wikipedia.org/wiki/Design_by_Contract">Code Contracts</a>. He opens ideas what the Code Contacts are and more important how to "Design by contract". This speech has been especially interested to me, since I never heard/used such type of design.
</p>
<h2>Design by contract in short</h2>
<p>
Desing by contracts has been introduced by <a href="http://en.wikipedia.org/wiki/Bertrand_Meyer">Bertrand Mayer</a>. He is one of original creator of Eiffel language. No surprise that first time contract's have been added in Eiffel. The contract consists on 3 parts: Preconditions/Postconditions/Invariants.
</p>
<ul>
<li><strong>Preconditions</strong> - check that client does everything OK</li>
<li><strong>Postconditions</strong> - check that server does everything OK</li>
<li><strong>Invariant</strong> - check that state of object valid for next call</li>
</ul>
<p>
In Eiffel you have special sections in each method called (require, do, post) there it is possible to put contract definition.
</p>
<p>
By specifying the contract we specify exact constraints for code. Typically methods have some input parameters and return some results to outside world. For instance we have class <code>Account</code> with method <code>Withdraw</code>, we are expecting that argument that <code>Withdraw</code> receives are always positive and return results also is greater than zero. 
</p>
<h2>Wait, I can already specify contract with my beloved exceptions</h2>
<p>
Many of us, get used to write such code..
</p>
<pre class="brush: csharp">
public Amount Withdraw(Amount amountToWithdraw)
{
 if (amountToWithdraw == null)
 {
  throw new ArgumentException("amountToWithdraw");
 }
 
 if (amountToWithdraw.Value <= 0)
 {
  throw new ArgumentException("amountToWithdraw.Value");
 }
 
 var result = //.. calculate operation here.. ;
 
 if (result.Value <= 0)
 {
  throw new AccountOperationException();
 }
 
 return result;
}
</pre>
<p>
It is definitely the way of creation robust application (in case of all those conditions are tested and client code properly handles exceptions). But is has several drawbacks:
</p>
<ul>
<li>It is only run-time mechanism</li>
<li>It is not possible to turn on or turn off the exceptions</li>
<li>This type of contract is "method-wide", but how can you specify "class-wide" contract?</li>
<li>All of if / throw statements are "code-garbage" that make it difficult to read</li>
</ul>
<h2>What we have in .NET?</h2>
<p>
The Common Language Runtime (CLR) team is introducing a library to allow programming with contracts in the Microsoft .NET Framework 4. Adding them as a library allows all .NET languages to take advantage of contracts. This is different from Eiffel or Spec#, a language from Microsoft Research (research.microsoft.com/en-us/projects/specsharp/), where the contracts are baked into the language. Code Contracts System in .NET consists of 4 parts: 
</p>
<ul>
<li><code>System.Diagnostics.Contracts</code> contract library where <code>Contract</code> class is defined.</li>
<li><code>ccrewrite.exe</code> tool that modifies the Microsoft Intermediate Language (MSIL) instructions of an assembly to place the contract checks where they belong.</li>
<li><code>cccheck.exe</code> contract static checker, that examines code without executing it and tries to prove that all of the contracts are satisfied.</li>
<li><code>ccrefgen.exe</code> which will create separate contract reference assemblies that contain only the contracts.
</ul>
<h2>Why is it useful?</h2>
<p>
Let's rewrote the previous example with code contracts:
</p>
<pre class="brush: csharp">
public Amount Withdraw(Amount amountToWithdraw)
{
 // preconditions..
 Contract.Requires&lt;NullReferenceException&gt;(amountToWithdraw);
 Contract.Requires(amountToWithdraw.Value);

 // action
 var result = //.. calculate operation here.. ;
 
 // postconditions 
 Contract.Ensures(result.Value <= 0);
 
 return result;
}
</pre>
<p>
I like the style, because this code a little reminds me TDD AAA (arrange/act/assert) pattern, code side is smaller and we are getting benefits of .NET Code Contracts.
</p>
<p>
What benefits here?
</p>
<ul>
<li>Static code analysis - during the compilation code is checked for contracts, if somewhere I wrote <code>account.Withdraw(null)</code> it would be immediately caught by cccheck.exe</li>
<li>Runtime execution - if error is missed on compilation time, it would be caught on run time and proper exception is thrown</li>
<li>I could configure to include or exclude contracts check at final assembly</li>
</ul>
<h2>Ok, I want to use it</h2>
<p>
To have a full support of Code Contracts you have to have .NET framework 4.0 and Visual Studio Premium or Ultimate. So, Code contracts are pretty expensive stuff. As far as I get from Dmitry speech it is possible to use <code>System.Diagnostics.Contracts</code> but limited capabilities are enabled only.
</p>
<p>
So, contract are great for building Life-critical and High-robust application where the quality / cost ratio makes sense for you.
</p>
<h2>Materials</h2>
<ul style="list-style: none outside none;">
<li><a href="http://www.slideshare.net/dmytromindra/code-contracts-abc-16042011-7656875?from=ss_embed">http://www.slideshare.net/dmytromindra/code-contracts-abc-16042011-7656875?from=ss_embed</a></li>
<li><a href="http://msdn.microsoft.com/en-us/magazine/ee236408.aspx">http://msdn.microsoft.com/en-us/magazine/ee236408.aspx</a></li>
<li><a href="http://msdn.microsoft.com/en-us/devlabs/dd491992">http://msdn.microsoft.com/en-us/devlabs/dd491992</a></li>
</ul></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileBaseCamp Kiev 2011: Vitaly Stakhov: Working safety net]]></title>
    <link href="http://beletsky.net/2011/04/agilebasecamp-kiev-2011-vitaly-stakhov.html"/>
    <updated>2011-04-18T18:23:00+03:00</updated>
    <id>http://beletsky.net/2011/04/agilebasecamp-kiev-2011-vitaly-stakhov</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
<small>
<strong>Disclaimer:</strong> text below is compilation of notes I made on AgileBaseCamp 2011 conference, listening to different speakers. I do it to keep knowledge I got on conference, share it with my colleagues and anyone else who interested. It is only about how I heard, interpret, write down the original speech. It also includes my subjective opinion on some topics. So it could not 100% reflects author opinion and original ideas. 
</small>
</p>
<p>
<a href="http://twitter.com/#!/VitalyStakhov">Vitaly</a> is a .NET developer shared really nice ideas of the creation of "safety net" with unit tests. He works in software delevelopment shop with no testers in it. Having that they manage to keep quality on acceptable level by means of test driven development practices and implemenation of safety net of tests around the product code base.
</p>
<p>
Many of TDD practitioner's have heard this term before, but not a lot of have full understanding of it. In general "Safety Net" does not mean 100% code coverage, it either don't nesserely mean to follow "test first" principles in creation of code. Safety net is a methaphor of net used by acrobats in circus. Acrobats are doing dangerous tricks close to cicrus ceil (that's a bit high).. As more complex trick is more chances to fall down, but as you fall on safety net you would be still alive. So, with safety net you fail, but not die.
</p>
<p>
Another good methor about the actual position of safety net. If it put to low (close to the floor), resiliency of net might not be enought to compensate your kinetic energy during fall.. if it is put to high (close to ceil), it start to loose it sense and only interfere of making tricks.
</p>
<p>
Let's one more time see, why we using TDD and work so hard to create tests:
</p>
<ul>
<li><strong>test driven design</strong> - indeed by having testable code you really much affect <a href="http://www.beletsky.net/2010/10/test-driven-design-and-levels-of.html">code design</a>. Design is key factor through the all life-cycle of project</li>
<li><strong>safety net creation</strong> - in other hand we do testing to follow "cover my ass" principle, having a good test coverage makes us feel really confortable and confident with application</li>
</ul>
<p>
In real life those to factors could contradict itself. When we originally create the code with TDD we are typically put too much details in test cases. We do verify for methods calls, expected exceptions, argument values etc. It works perfectly at the beginning. But as soon as we start to do refactoring it might turn to situation then a lot of cases became red, just because of implementation details changed! It leads to situation then the changes are applied, application still in workable state.. but tests are failed (safety net is put to high). That makes tests to be fragile.. fragile tests are bad, because it make to feel like "tests are not useful".. so such tests are typically deleted, commented out, skipped. All of these is just a putting safety net low, close to floor. As for me this is even more dangerous then putting it too high.
</p>
<p>
What to do? The the of mitigation this is all the time controlling safety net position. It is very useful to distinguish 2 types of tests:
</p>
<ul>
<li>Interaction - tests that we basically create on "design" stage of application (detailed tests)</li>
<li>Component - tests that we basically create to change safety net position (behavior tests)</li>
</ul>
<p>
The point is the interaction tests are "classical" unit tests that we create for particular method/class. It works great of design stage of development, time there we have no model at all, we don't know how internal structure would like etc. But as it said, the problem is that interaction tests are to much detailed. And as soon as small implementation detail is changed, those tests became red (I found a little analogy with blog post I did recently about <a href="http://www.beletsky.net/2011/04/functional-tests-must-not-be-done-first.html">Functional tests</a>).
</p>
<p>
To mitigate that we look on same problem with different view - components. With components tests we move focus from details to behavior. For instance if in case of moving money from one account to another, we are not particularly interested in what methods called, but we interested that amount is really moved. Type of test that actually tests that is called component.
</p>
<p>
As soon as component test is defined we are no longer interested in interaction tests. Interactions tests became overhead and only slows done the process of development by continues fixes of failed tests. So, as we already have component tests is just possible to remove interaction tests at all.
</p>
<p>
Back to our safety net analogy - with a lot of Interaction (detailed) cases, we are putting net to high, we should move it lower by getting rid of too detailed cases. To compensate that, it is important to have behavior test that would verify that application state still in workable state. This should be really careful and continues process.
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileBaseCamp Kiev 2011: Sergey Dmitriev: Setting up priorities with Kano analysis]]></title>
    <link href="http://beletsky.net/2011/04/agilebasecamp-kiev-2011-sergey-dmitriev.html"/>
    <updated>2011-04-18T08:54:00+03:00</updated>
    <id>http://beletsky.net/2011/04/agilebasecamp-kiev-2011-sergey-dmitriev</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
<small>
<strong>Disclaimer:</strong> text below is compilation of notes I made on AgileBaseCamp 2011 conference, listening to different speakers. I do it to keep knowledge I got on conference, share it with my colleagues and anyone else who interested. It is only about how I heard, interpret, write down the original speech. It also includes my subjective opinion on some topics. So it could not 100% reflects author opinion and original ideas. 
</small>
</p>
<p>
<a href="http://twitter.com/#dmitriev">Sergey Dmitriev</a> is a first russian-speaking Certified Scrum Trainer. On AgileBaseCamp he presented scientific based approach for prioritizing the backlog. I liked his speech since it was very new for me and could be done on practice.
</p>
<p>
The approach is based on Kano analysis with weighted factor matrix. It might sound a little bit complex, but whole process is rather simple and splitted up on 2 stages.
</p>
<h2>Kano analysis of backlog items</h2>
<p>In very simplified version it is basically 2 questions, with 5 answers. Questions are:</p>
<ul>
<li>How do you feel that feature is PRESENT in product?</li>
<li>How do you feel that feature is ABSENT in product?</li>
</ul>
<p>
And answers are:
</p>
<ul>
<li>I like that</li>
<li>I expect that</li>
<li>I don't care</li>
<li>I can live with that</li>
<li>I don't like that</li>
</ul>
<p>
Each item in backlog are put through that questions. It is important that real customers to participate that survey. Due to statistics laws, as biggest sample you have as more precise results you got. Sergey has created a web application that helps to perform such surveys, <a href="http://www.kanosurvey.com/">KanoSurvey</a>.
</p>
<h2>Classification of results</h2>
<p>
Based on users answers and using some complex math behind KanoSurvey would split up all user stories up to 5 classes:
</p>
<ul>
<li><strong>Have to be done (mandatory) class</strong> - features that customers sees as very important/expected and have to be done fast</li>
<li><strong>Linear class</strong> - linear features are something that you might accomplish but still do not fully satisfy customers (like battery life of mobile phone - if it works 3 days without re-charge.. it is nice, but I would like to have 4 days. Or, if I have 1Gb of storage on new service.. it is nice, but I would like to have 2Gb etc)</li>
<li><strong>Amazing class</strong> - leadership function, something that makes you unique and produce "wow"-effect</li>
<li><strong>Inversed class</strong> - features that you you might have, but customers are feeling bad about it</li>
<li><strong>Don't care class</strong> - features that customers not interested in</li>
<li><strong>Questionable class</strong> - these are probably mistakes, then users answering "I want, I don't want" in the same time</li>
</ul>
<p>
The value only persist in first 3 classes of features. So, we use that in further analysis, rest of features are just thrown away are useless.
</p>
<p>
It is done. After analysis it is time for weighing.
</p>
<h2>Weighing</h2>
<p>
With Kano analysis we understood that features are important for our auditorium. Now we need to plan the feature thought releases, to do that we have to prioritize them correctly. Weighing of features helps to do right prioritization.
</p>
<p>
To perform a weighing business criteria's have to be defined. It is very up to the product what the business criteria's are. It is recommended to select not more than 5, that makes the process simpler. The example of criteria's could be:
</p>
<ul>
<li>Uniqueness - weight 3</li>
<li>Sales - weight 2</li>
<li>Low costs - weight 1</li>
</ul>
<p>
Each pre-selected backlog item is assigned with weight.
</p>
<h2>Combining the results</h2>
<p>
Sergey has created an Excel spreadsheet (that is available <a href="http://www.agilecoach.ru/st/materials">here</a>). In the Excel spreadsheet we specify backlog items, estimations in points, class of Kano and it's weight. Based on this input spreadsheet would automatically propose desired priority. It is also possible to see value and cost of particular item. This is a priceless information for any Product Owner.
</p>
<p>
The presentation slides are located <a href="http://www.slideshare.net/Blackie6/ss-7654382">here</a>.
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileBaseCamp Kiev 2011: Alexey Krivitsky: The Future is Now]]></title>
    <link href="http://beletsky.net/2011/04/agilebasecamp-kiev-2011-alexey.html"/>
    <updated>2011-04-18T07:51:00+03:00</updated>
    <id>http://beletsky.net/2011/04/agilebasecamp-kiev-2011-alexey</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
<small>
<strong>Disclaimer:</strong> text below is compilation of notes I made on AgileBaseCamp 2011 conference, listening to different speakers. I do it to keep knowledge I got on conference, share it with my colleagues and anyone else who interested. It is only about how I heard, interpret, write down the original speech. It also includes my subjective opinion on some topics. So it could not 100% reflects author opinion and original ideas. 
</small>
</p>
<p>
That was the opening speech of <a href="http://kiev.agilebasecamp.org/">AgileBaseCamp</a> conference that took place in Kiev, 16-Apr-2011. <a href="http://twitter.com/#!/alexeykri">Alexey Krivitsky</a> who is head of ScrumGuides was sharing his vision about Agile through last years.  
</p>
<p>
The dates for this Base camp were dedicated to major event in Agile world, namely it is 10 years from <a href="http://agilemanifesto.org/">Agile Manifesto</a> has been signed. All of us know who the software development changed with this event, but was it in good way, bad way? Who know's and Alexey tries to analyze that.
</p>
<h2>Past</h2>
<p>
Alexey shared his personal story of starting up with Agile. He used to work in big Ukrainian outsourcing company. That time (I think it was somewhere around 2003) this company was adopting CMM3 and customer company was adopting CMM2 itself. Alexey took part on both processes of adoption and did great job there (I know that, because I worked the same company that time and know that efforts were successful :). That was both good experience and key factor to change his mind on software production. He quit the company realizing that his vision very different from one dictated by CMM. 
</p>
<p>
That time Agile was not so well-spread as it is now (I'm pretty sure that time very few people in Ukraine knew something about Agile, Scrum, Kanban etc). So, having <a href="http://alistair.cockburn.us/">Alistair Cockburn</a> book printed out on corporate printer he started his journey in Agile world. Not only improving own knowledge and experience, but sharing the information with community.
</p>
<h2>Present</h2>
<p>
One of the software development institutes does statistics of projects success in 1994 and 2004. Figures are: 
</p>
<ul>
<li>1994 - success rate 15%</li>
<li>2004 - success rate 34%</li>
</ul>
<p>
This is a definitely impact of agile. There was an interesting speech about details of this impact on Agilee 2010 <a href="http://www.beletsky.net/2010/10/agileee-2010-henrik-kniberg-speech.html">Henrik Kniberg speech: The essence of Agile</a>. In a little other words in 10 years we've learned to "suck less".
</p>
<p>
A lot of information about Agile nowadays. Many, many books became available.. a lot of conferences, trainings, blogs. New brands became popular as <a href="http://manifesto.softwarecraftsmanship.org/main">Software Craftsmanship</a>, <a href="http://en.wikipedia.org/wiki/Lean_Startup">Lean Startup</a>, <a href="http://www.management30.com/">Management 3.0</a> and more. From the management factors agile moving to engineering and business factors. Code is still the key in software (even if a lot of people thinks it is not). 
</p>
<h2>Future</h2>
<p>
Even with a great popularity of Agile it is still not mainstream. We still talk about Agile itself a lot and would continue to talk at least 2 years. Originally it was Waterfall as biggest enemy of Agile, but now this enemy is weak and it is no longer interesting to fight it :). Due to <a href="http://www.mountaingoatsoftware.com/company/about-mike-cohn">Mike Cohn</a> we would stop to talk about Agile at all and simply start to do that. To reach that stage we need to have crowd of people who are "on-the-same-page" with understanding of Agile, but it is not the time now. 
</p>
<p>
There is no silver bullet, but there is super glue that unite teams.. Agile is this kind of glue.
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agileee 2010: J. B. Rainsberger: Integrated Tests are A Scam]]></title>
    <link href="http://beletsky.net/2010/10/agileee-2010-j-b-rainsberger-integrated.html"/>
    <updated>2010-10-12T22:33:00+03:00</updated>
    <id>http://beletsky.net/2010/10/agileee-2010-j-b-rainsberger-integrated</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
<small>
<strong>Disclaimer:</strong> text below is compilation of notes I made on Agileee 2010 conference, listening to different speakers. I do it to keep knowledge I got on conference, share it with my colleagues and anyone else who interested. It is only about how I heard, interpret, write down the original speech. It also includes my subjective opinion on some topics. So it could not 100% reflects author opinion and original ideas. 
</small>
</p>
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_stL4bIIuRUs/TLS4D_xKylI/AAAAAAAAG-Y/3LkvrX1aLik/s1600/DSC03708.JPG"><img style="float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 400px; height: 300px;" src="http://4.bp.blogspot.com/_stL4bIIuRUs/TLS4D_xKylI/AAAAAAAAG-Y/3LkvrX1aLik/s400/DSC03708.JPG" border="0" alt=""id="BLOGGER_PHOTO_ID_5527245021487221330" /></a>
<p>
It a very dramatic beginning - "Integrated Tests are a scam". a self-replicating virus that takes over your project and burdens you with long-running, fragile, hard-to-understand test suites - a sentence JBrains started his speech!
</p>
<h2>What is integrated tests?</h2>
<p>
Integrated tests checks whole system, not only collaboration between some components. It means any tests where the failure of the test with unjustifiable failures. It is bad, because it is a distraction and give no value.
</p> 
<h2>Integrated tests are slow</h2>
<p>
Integrated tests involves DB, network that makes tests are slow. 
</p>
<h2>Integrated tests are brittle</h2>
<p> 
If you change one small thing you have to fix a lot of tests. JBrains gives a very nice and common example. "Foreign Keys hell" - you have a foreign keys in DB, so to insert/remove record to one table, you have to insert/remove record to another table.. and so on. Preparation tests data is very expensive operation, complexity goes as exponential form. Eventually it came up that change that took 1.5 hour start to take 1 days.
</p>
<h2>Goal of unit testing</h2>
<p>
Goal of unit testing is to have quick and correct result. Test failure should point to exact problem in object to be tested. In case of integrated tests, it is possible to have multiple failures, with very few actual understanding of what is wrong.
</p>
<h2>What to do?</h2>
<p>
JBrains introduces term of - <em>Collaboration tests</em> (Interaction tests) - using mock objects or tests doubles. Collaboration is observed as Client-Server architecure. The object that is being tested is Client, the object it depends on is Server. We create interfaces, to make it possible to substitute implementation (using test doubles), we simulate behavior for object we testing. Client object is a completely tested, test double simulate behavior of Server. 
</p>
<p>
This is greatly works, tests pass, but we found a problems. The issue is that object doesn't always work as it is expected by tests and having Collaboration tests only is not enough. We need another type of test - <em>Contract tests</em>.
</p>
<p>
Contract tests focuses on Server side, this are ones that actually do SQL to DB, requests by network etc. The goal here is to focus on Contract (or interface) of object and test interface, not exact implementation. Since contract tests are defined, now it is possible to reuse them for any particular implementation. As an example, we could review IList class, that could have different implementations (as array list, linked list etc.), but it have one interface with simple operations like - add, remove, at. We create a number of tests, for all contract operations. Such tests could be put to common class, with abstract operation of object creation (template method pattern), so tests of particular implementation (array list for instance) just inherit common class, override creation function to return array list method and reused all already defined contract tests.  
</p>
<h2>What are benefits?</h2>
<p>
Combining these 2 types of tests give us fast, isolated suites, failure is suite should point to exact issue avoiding creation of complex integration tests. 
</p>
<p>
Later on JBrains gives some mathematical proves of differences between number collaboration/contacts tests and integrated tests, that I just do not want to write here, cause afraid to incorrectly interpret the information. The keynote of the speech is rather simple: forget about complex and heavyweight integration tests, do as much as possible with test doubles running everything in memory, do contract testing for platform depended objects. 
</p>
<p>
You could find more, here: <a href="http://blog.jbrains.ca/integrated_tests_are_a_scam">http://blog.jbrains.ca/integrated_tests_are_a_scam</a>
</p></div>

]]></content>
  </entry>
  
</feed>
