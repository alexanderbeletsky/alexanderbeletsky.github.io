<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-05-15T17:48:05+03:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github for Windows - Yay!]]></title>
    <link href="http://beletsky.net/2012/05/github-for-windows-yay.html"/>
    <updated>2012-05-21T23:44:00+03:00</updated>
    <id>http://beletsky.net/2012/05/github-for-windows-yay</id>
    <content type="html"><![CDATA[<div class='post'>
<p>        For quite long time Windows users of github had a huge envy towards <a href="http://mac.github.com/">Github for Mac</a> - the application that makes work with github based repositories as simple as possible. A lot of people, especially ones who are not familiar with Git, experiencing some issues with github initially. No surprise, extensive command-line, SSH, public/private keys - might sound scary for GUI addicted persons. <br />
    </p>    <p>       December 2011, Phil Haack <a href="http://haacked.com/archive/2011/12/07/hello-github.aspx">joined</a> github.. so, the world hold the breath, to see what actually will be done by Phil and team to improve overall Github experience on Windows. And the day has come! Today <a href="http://windows.github.com/">Github:Windows</a> is officially shipped.<br />
    </p>    <h2>What's the point?</h2>    <p>        As well as Mac users, Windows users are also much got used to UI. For long time, if you want to deal with Git on windows, you have to go and install <a href="http://code.google.com/p/msysgit/">msysgit</a>. It's a great product and works great actually, but you have to spend some time of learning of Git to do very basics operations. Moreover, if you hadn't had any experience with distributed version control systems - you'll be to much confused by new words like: pull, push, clone, fork, cherry-pick and so on. <a href="http://windows.github.com/">Github for Windows</a> is about to fix that.<br />
    </p>    <h2>Go ahead and install it</h2>    <p>        Installation is very easy. Just click the <a href="http://github-windows.s3.amazonaws.com/setup.exe">download</a> link, to get web setup file. Two things are gonna installed on you machine: Github client itself and Git shell - the powershell command line for git.<br />
    </p>    <h2>        Github for Windows client<br />
    </h2>    <p>        At the first run it will do some configuration stuff. It will ask you for github credentials.<br />
    </p>    <img src="https://lh6.googleusercontent.com/-b82cqlo96-4/T7qZuUkKYeI/AAAAAAAAIuA/JeqiYMu_sNM/s1024/page-1.png" style="width: 620px" /><br />
    <p>        As you logged on, it will show you some basic account information.<br />
    </p>    <img src="https://lh3.googleusercontent.com/-cF3gaHlxPYE/T7qZuqR6clI/AAAAAAAAIuI/gE6-xxhKd58/s1024/page-2.png" style="width: 620px" /><br />
    <p>        It will also add new public SSH key your account. That was a little unexpected as I received email notification for github about that. The information that it's gonna do that, probably should be mentioned during setup. <br />
    </p>    <p>        Then it tries to locate all repositories. It scans the home folder, but I don't keeping repositories there (just some temp copies), so I unselected everything.<br />
    </p>    <img src="https://lh6.googleusercontent.com/-E-6YmkuP9M8/T7qZufRug-I/AAAAAAAAIuE/ifq-o89_Eio/s1024/page-3.png" style="width: 620px" /><br />
    <p>        As I tried to go straight and create new repository the application crashed. Oppps.. It reproduced several times, but after gone. Anyway, I contacted <a href="mailto:support@github.com">support@github.com</a> with detailed steps and info.    <br />
    </p>    <img src="https://lh3.googleusercontent.com/-v4EcFQZzPeo/T7qZvPSQdmI/AAAAAAAAIuQ/FYaM5NvP8_c/s1024/page-4.png" style="width: 620px" /><br />
    <p>        Finally, after I changed the default folder and wait till it's completed scanned (that took about 3 mins on my machine), I got client working.<br />
    </p>    <img src="https://lh3.googleusercontent.com/-VWSpIa020_g/T7qZvVqLnTI/AAAAAAAAIuc/xSuOGL0NWJs/s1024/page-6.png" style="width: 620px" /><br />
    <p>        Even if I'm not huge fan of METRO style - I was really pleased with UI. It looks very nice, application works fast and responsive. It takes almost no effort to overview application features.. everything is very intuitive.<br />
    </p>    <p>        It's of course not the perfect. I tried to do some commits, that seems to be fine.. but sync of the repo failed. It also fails to switch the branches in 95% cases.<br />
    </p>    <h2>Git Shell for command line</h2>    <p>        Next good addition is Git Shell, powered by PowerShell (nice!). It utilizes famous <a href="https://github.com/dahlbyk/posh-git">posh-git</a> project. The most useful features for me now: 'Tab' support that provides suggestion for the command and 'Stats' that are shown at command prompt, showing current repository state. There are probably a lot of other cool things there, that I haven't discovered yet.<br />
    </p>    <img src="https://lh4.googleusercontent.com/-HOCSvGnNXnQ/T7qhpOr91rI/AAAAAAAAIu0/xwFjs8dvw_Q/s678/page-7.png" style="width: 620px" /><br />
    <p>        If you are fan of Bash, or pure Cmd.. or custom stuff (as <a href="http://sourceforge.net/projects/console/">Console 2</a>) it very easy to change that, right in application configuration.<br />
    </p>    <h2>Conclusions</h2>    <p>        Even if it's just first release, it's very solid and a lot of features already there. Issues exist, but I hope it will be cleared out soon.<br />
    </p>    <p>        What make me a little wonder, that the project is not open sourced? I hope it's just the question of time, I'm pretty sure that a lot of people are waiting to see what's inside and submit some pull requests.<br />
    </p>    <p>        Will I personally use that product? Probably, not. I've spent too many time in Command-line of my favorite <a href="http://www.farmanager.com/download.php?l=en">Far Manager</a>, that UI is more noise that help. What I will use is Git Shell, thought. I've heard a lot about posh-git, now it's  time to try.<br />
    </p>    <p>    But for all people, who are just starting using Github on Window - <a href="http://windows.github.com/">Github:Windows</a> would be my first recommendation.<br />
    </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A year with Git]]></title>
    <link href="http://beletsky.net/2012/05/year-with-git.html"/>
    <updated>2012-05-20T13:43:00+03:00</updated>
    <id>http://beletsky.net/2012/05/year-with-git</id>
    <content type="html"><![CDATA[<div class='post'>
<p>    It's almost a year ago, I've posted the article <a href="http://www.beletsky.net/2011/06/how-to-start-using-git-in-svn-based.html">How to start using Git in SVN-based organization</a>. It has been viewed more than 3,000 times on my blog and more than 9,000 times on <a href="http://java.dzone.com/articles/how-start-using-git-svn-based">re-post</a> by DZONE.<br />
</p><p>    Time has passed and some of you might be interesting, what happed next? A lot, actually.<br />
</p><p>    I think we followed "Baby steps to.." strategy of Git adoption. Our baby steps to Git, were small, accurate and quite long. But at the end of the day, I'm happy to say - we are pure Git organization now. Moreover, some of our projects are hosted as public and private repositories under the <a href="https://github.com/organizations/e-conomic">e-conomic</a> organization github account.<br />
</p><h2>Retrospective</h2><p>    So, let's make a kind of retrospective seeing what things were happening.<br />
</p><ol>    <li><strong>Git-SVN mode</strong>. As described in original article, the best way to try Git inside the organization is go to Git-SVN mode. It will allow to use SVN as primary repo, but allow Git features like local branching, cool merging, stashes and other stuff described <a href="http://www.beletsky.net/2011/07/git-with-svn-what-benefits-are.html">here</a>.<br />
    </li>
    <li><strong>People awareness</strong>. Started by just few developers the information about the Git had spread along mates in our department. Some were very enthusiastic about that, some not. But anyway, it got attention of our many people including our CTO. The greatest thing is that initiative has not been cancelled, instead we start to think of some kind of plan that might bring us into pure Git world. <br />
    </li>
    <li><strong>Planning</strong>. Our plan including different evaluations, choosing between Git or HG, local or cloud hosting, Centralized or De-centralized mode etc. During this planning sessions we also identified some infrastructure dependencies that blocked switch to Git. We have so called "Language System" the application helping our copyrighters and translators to change the content of app. It's been creating assuming that SVN used, doing checkouts and commits where. Another thing is that our deployment procedure happened to be SVN dependent. Obviously, it have to be changed to work with Git. But the most priority had "Education" task. Everybody should be able to work with Git. <br />
    </li>
    <li><strong>Execution</strong>. Planning is easy, execution is hard. We did initial education as a series of meetings were the basics are described. Fortunately, almost as teams contained the git-aware person who were initial knowledge keeper. Some important details being moved to company's Wiki. The problems we start to have local infrastructure setup. Being Windows organization we tried to setup primary repository and server on Windows box. Keeping that short, I just say - don't do that. It's not trivial at all, to configure Git server there, setup the accounts and permissions and make it work with TeamCity. We tried different scenarios of Git hosting on IIS, including <a href="https://github.com/jakubgarfield/Bonobo-Git-Server">Bonobo-Git-Server</a> or <a href="https://github.com/JeremySkinner/git-dot-aspx">Git-Dot</a> but all had it's own limitations, blocking us of full-feature Git usage.<br />
    </li>
    <li><strong>Trying github</strong>. In parallel, one team that was starting out new project and was quite independent tried to host sources in cloud. Github is obvious choice here. I think, that was a great experience and this project is still hosted on github. We tried, so called <a href="https://github.com/blog/674-introducing-organizations">"organization"</a> mode. It ideally fits small software development shops. Easy start, easy go.<br />
    </li>
    <li><strong>Linux local server</strong>. Failed to run it properly on Windows we had to switch to Linux box. It's being deployed as virtual box, that is more than enough for Git server. That solved a lot of infrastructural issues, including authentications & permissions as well as CI problems. As I can see the effort to setup it was not so big (if compare to effort spend to make the same on Windows, it would be closer to 0). Setup once, it just start to work.  <br />
    </li>
    <li><strong>Mirroring repositories</strong>. The setup of local central server was the first great milestone. Even if all the developers might start to use it instead of SVN, the infrastructural problems that I mentioned in #3 were not yet solved. So, we did a partial decision. The developers are switching to Git repository, but the deployments and language works are still done on SVN repository. So it's not so frequent operations, it's possible to synchronize the Git and SVN between each other. It means, all new code started to appear in Git, but once a week (or often) all changes set are being pushed to SVN. This is of course an overhead and required some manual work.. But it was only one way for us.<br />
    </li>
    <li><strong>Fixing the dependencies</strong>. It took some time while everybody got comfortable with Git. Our Wiki has extended with some policies of working with Git. We mainly follow <a href="http://nvie.com/posts/a-successful-git-branching-model/">"A successful Git branching model"</a> keeping the feature in local branches, having remote branches for code review etc. After our deployment dependency has been fixed, we were able to push the code to production very fast. I think it's almost a year passed to now clearly understand benefit of Git not just theoretically, but practically. And that was amazing experience, as so for me.<br />
    </li>
    <li><strong>Pure git world</strong>. After the last dependency has been fixed, we happily entered the "Pure Git Environment" world. The SVN server has been stopped. All developers, DevOps and copyrighters are Git users now.<br />
    </li>
</ol><h2>It took a while...</h2><p>Yeah, it took awhile but we never had this migration as top priority item in our backlog. The process were long and smooth, allowing us to do our primary job of bringing value to product, but the same time improving the internal infrastructure.  <br />
</p><p>Not being hurry is also good option, sometimes. The whole transition took a lot of efforts of different person along the way. I say thank you, guys - for making this happening.<br />
</p><h2>What's next?</h2><p>The things are stabilized now. We are on one solid solution, working very nice. As I said, we have both local and github environments. If I pretend to be a medium and see the future, I would say we go to "pure Github" environment from here. Sure, now this transaction having it's own dependencies. But let's see what's happen during next year. <br />
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Branching Workflow in Git-SVN Mode]]></title>
    <link href="http://beletsky.net/2011/09/branching-workflow-in-git-svn-mode.html"/>
    <updated>2011-09-06T17:42:00+03:00</updated>
    <id>http://beletsky.net/2011/09/branching-workflow-in-git-svn-mode</id>
    <content type="html"><![CDATA[<div class='post'>
<p>As you might already know branches are primary power of Git. You should create branch for every task you working on. Even if it is something small you easily starting to get a good habit of creating branches, since they keep you much in isolation. So, how to deal with branches in Git-SVN mode? It is really easy and conforms to common git practices. </p><p>So, as you cloned the SVN repo you have master branch (or several masters, if you did more <a href="http://www.beletsky.net/2011/08/analog-of-svn-branch-switch-for-git.html">switches</a>). Suppose you need to start to work on ticket ND-177. </p><ol><li>Create new branch for ND-177 (I call new branch like, original_branch-branch_name)</li>
<pre>git checkout -b master-nd-177   
</pre><li>Do your work here, performing as many commits as you need</li>
<pre>get commit -a -m "some intermediate commit.."
</pre><li>Now, as you are ready to be merged you to SVN, you checkout and rebase master (to get latest SVN changes from it)</li>
<pre>git checkout master
    git svn rebase
</pre><li>You can simply merge 2 branches, but with simple merge you will get all commits history that you probably don't need in SVN at all. You squash to compress number of commits into one nice looking commit object</li>
<pre>git merge --squash master-nd-177
</pre><li>It would merge up all changes from master-nd-177 into master. All you need to do is commit</li>
<pre>git commit -m "ND-177 completed"
</pre><li>And dcommit changes to SVN server</li>
<pre>git svn dcommit
</pre></ol><p>That's six basic steps makes really straightforward workflow for everyday usage. </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analog of SVN branch switch for Git]]></title>
    <link href="http://beletsky.net/2011/08/analog-of-svn-branch-switch-for-git.html"/>
    <updated>2011-08-01T11:16:00+03:00</updated>
    <id>http://beletsky.net/2011/08/analog-of-svn-branch-switch-for-git</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
Working with Git in SVN based organization is <a href="http://www.beletsky.net/2011/06/how-to-start-using-git-in-svn-based.html">possible</a> and make a lot of benefits. Sources checked out once are now at you local repository, so all you do is commits, rebases and dcommits back to SVN. But sometimes you need to be able to switch to another SVN branch. You need something equivalent to "SVN switch" command inside Git environment.
</p>
<p>
I’m been trying to switch to new branch, but I found no related information about that. I ended up this solution, I would like to share.
</p>
<ol>
<li>Manually add new configuration into <code>~/.gitconfig</code>, for new SVN location</li>
<pre>
    [svn-remote "svn25"]
        url = https://svn.server/branches/branch25
        fetch = :refs/remotes/git-svn-25
</pre>
<li>Fetch changes from svn25</li>
<pre>
    git svn fetch svn25
</pre>
<li>Checkout that branch</li>
<pre>
    git checkout git-svn-25
</pre>
<li>Create new “master” branch</li>
<pre>
    git checkout -b master-25
</pre>
<li>
Now, master-25 is your “master” for <code>branch25</code> SVN branch.
</li>
</ol>
<p>
You can merge you previous changes.. and continue to work with <code>master-25</code> as you worked with usual master.
</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git with SVN, what the benefits are?]]></title>
    <link href="http://beletsky.net/2011/07/git-with-svn-what-benefits-are.html"/>
    <updated>2011-07-13T08:50:00+03:00</updated>
    <id>http://beletsky.net/2011/07/git-with-svn-what-benefits-are</id>
    <content type="html"><![CDATA[<div class='post'>
<p>
My previous <a href="http://www.beletsky.net/2011/06/how-to-start-using-git-in-svn-based.html">post</a> about starting up of using Git inside on SVN organization appeared to be really attractive, I received many questions through <a href="http://twitter.com/#!/alexbeletsky">twitter</a> and <a href="http://java.dzone.com/articles/how-start-using-git-svn-based">dzone</a>. All of them are really interesting and I going to do a separate posting on that, but primary question is "Why, oh why?".  
</p>
<p>
So, what actual benefits I see by using approach of git-svn?
</p>
<p>
First, let's see the root, what kind of VCS Git is? It is distributed one. The distribution basically means that each developer host the repository on it's own machine. Not a working copy as in SVN case, but real repository with all corresponding functionality - commits, reverts, branches, merges etc. You are not longer depend on server, even if sever is not available you still able to continue your job. 
</p>
<p>
Since you have your local repository, you can do whatever you want without interfering the rest of the world. In SVN all operations like commit or branch creation or tag - they are global one. As soon as you created branch for instance, everybody will notice that; if you committed something, everybody will notice that. In many organizations SVN has policies, like you have access only for some branches.. you can't create branches, only by request to admin etc. But, what I basically do on my job - I want to try out something (new idea or apply some refactoring) without disturbing a lot of people, I want that quickly. It perfectly works with Git, I create the branch just by one command, work inside (means do what ever number of commits I want) and if I think I'm ready, merge it back to master and push changes to SVN.
</p>
<p>
Remember you last merge operation with SVN? If you haven't seen 'Tree conflict' type of conflict, you are not SVN user. I've seen them a lot and many people suffer much of it! This type of conflict happens because SVN keeping and tracking information about folder in which file is placed. Git does not do that, it is basically content tracking system - Git cares about content of the file, not file it self. Since the information about content (blob) and filesystem information (tree) is separated each of other, you will never get a 'Tree conflict' in Git.
</p>
<p>
By the fact that branches and merges are very easy in Git you are getting one really cool bonus. Have you ever been in situation then in a middle of your flow, then tens files are already changed, but you still struggling with task, your boss is contacting you saying - 'Hey, we have critical bug, required to be fixed now'? Such things make you a little uncomfortable, you already got some changes, but they are not 'commitable'.. you could not throw it away, because some value is already there, but you need to get SVN update and start to fix bug. With git, you can switch from one task to another with out any problems. You just commit your results (even if they are not compliable or tests are red, who cares - it's yours repository) create another branch for bugfix and start to work.  
</p>
<p>
To summarize that a little I would say that my personal benefits of starting using Git are: 
</p>
<ul>
<li><strong>Isolation</strong> - do whatever I want, whenever I want</li>
<li><strong>Merges</strong> - forget about 'Tree conflicts'</li>
<li><strong>Task switching</strong> - no more, "please wait till I commit this, so I can start to work on that"</li>
<li><strong>Fun</strong> - it is interesting to me to learn new system and to change a mind how VCS can work</li>
</ul></div>

]]></content>
  </entry>
  
</feed>
