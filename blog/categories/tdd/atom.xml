<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Alexander Beletsky's development blog]]></title>
  <link href="http://beletsky.net/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://beletsky.net/"/>
  <updated>2014-07-03T16:51:41+03:00</updated>
  <id>http://beletsky.net/</id>
  <author>
    <name><![CDATA[Alexander Beletsky]]></name>
    <email><![CDATA[alexander.beletsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration or Unit Tests Trade-Off]]></title>
    <link href="http://beletsky.net/2014/04/integration-tests-for-express-dot-js-middleware.html"/>
    <updated>2014-04-23T11:19:00+03:00</updated>
    <id>http://beletsky.net/2014/04/integration-tests-for-express-dot-js-middleware</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve released small Express.js extension for easy switching application to <code>maintenance</code> mode. Sometimes, you just want to run patch against database or change the infrastructure of product, but instead of showing blank <code>nginx</code> 503 error page, you want to have nice looking HTML, saying will be back soon.</p>

<p>The <code>maintenance</code> package is now available on <a href="https://www.npmjs.org/package/maintenance">npm</a> and you welcome to use it. But I would like to share the way I developed and test it.</p>

<!-- More -->


<p>So, <code>maintenance</code> is a function that takes <code>app</code> instance and <code>options</code> as a parameters. Then it augments <code>app</code> with additional endpoint (if there is such preference) and injects middleware function that would render maintenance page in case of mode is set to <code>true</code>.</p>

<p>It&rsquo;s really small piece functionality, but still I wanted to make sure, it&rsquo;s gonna work in my application without annoying restarts of servers and debugging the stuff. And TDD is right approach to solve the pain.</p>

<p>TDD is quite commonly trade-off of <code>unit tests</code> and <code>integration tests</code>. And it&rsquo;s always up to developer which direction go in particular case. Let&rsquo;s take a look on my case:</p>

<p>If you go <code>unit test</code> way, it would be something like that:</p>

<ul>
<li>call <code>maintenance</code> function, pass mock of <code>express</code> instance

<ul>
<li>verify that new <code>route</code> is added after function completes</li>
<li>verify that all <code>route.callbacks</code> now have callback to check the mode</li>
<li>verify that <code>route.callbacks[0]</code> contains mode check function</li>
</ul>
</li>
<li>call <code>route.callbacks[0]</code>, mock <code>req</code> and <code>res</code> object

<ul>
<li>verify that <code>res.render</code> called with <code>maintanance.html</code> argument</li>
<li>etc..</li>
</ul>
</li>
</ul>


<p>Is all of that kind of <strong>suck</strong>? It is, since it would take too much effort for mocking the stuff.. But more important, all of that is nothing more as just testing of <strong>implementation details</strong> of Express.js, but not <strong>behavior details</strong> of application.</p>

<p>Now, let&rsquo;s consider <code>integration tests</code> way for same stuff:</p>

<ul>
<li>run application in normal mode

<ul>
<li>send HTTP GET and make sure that response is fine</li>
</ul>
</li>
<li>run application is maintenance mode

<ul>
<li>send HTTP GET and make sure that response contains maintenance page</li>
</ul>
</li>
<li>run application in normal mode

<ul>
<li>send HTTP GET and make sure that response is fine</li>
<li>sent HTTP POST to maintenance endpoint</li>
<li>send HTTP GET and make sure that response contains maintenance page</li>
</ul>
</li>
</ul>


<p>Does it look like real <strong>behavior</strong> testing? Indeed, test acts as <code>user</code> and checks that application actually behaves right, doesn&rsquo;t matter of implementation details.</p>

<p>With spending more time with Express.js and Node.js I see much <a href="http://beletsky.net/2014/03/testable-apis-with-node-dot-js.html">more value</a> in integration way of testing. It&rsquo;s very easy to spin-up a server and send HTTP requests and check responses.</p>

<p>If you are interested, check out <a href="https://github.com/likeastore/maintenance/blob/master/test/spec/maintenence.spec.js">specification</a> and <a href="https://github.com/likeastore/maintenance/blob/master/test/app/app.js">test application</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testable API's with Node.js]]></title>
    <link href="http://beletsky.net/2014/03/testable-apis-with-node-dot-js.html"/>
    <updated>2014-03-04T15:36:00+02:00</updated>
    <id>http://beletsky.net/2014/03/testable-apis-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>API is heart of modern web application. It&rsquo;s all about to make it easy to consume, scale and make sure it works as expected. Currently I follow &ldquo;all open API methods must have tests&rdquo; (AOAMMHT) principle. I used to work with .NET technologies, where testing of API&rsquo;s was about calling methods of corresponding controller object, which typically was unit testing &ndash; mocking up all controller dependencies, setting up expects of returned values.</p>

<p>I&rsquo;ve changed my mind on testing with Node.js/Express.js development. For API&rsquo;s I prefer &ldquo;end-to-end&rdquo; testing: setting up user account, authentication, HTTP calls to server, real calls to DB and serving JSON payload back. API&rsquo;s have to be tested from consumer point of few to be able to give some meaningful results.</p>

<!-- MORE -->


<h2>Tools and Frameworks</h2>

<p>Pretty standard setup: <a href="http://visionmedia.github.io/mocha/">mocha</a>, <a href="http://chaijs.com/">chai</a>, <a href="https://github.com/mikeal/request">request</a>.</p>

<p>Mocha is time proven tool for testing Node.js applications, Chai is good enough expectation framework and Request as one best HTTP clients I even worked with.</p>

<h2>Prepare application for testing</h2>

<p>Dependencies above is installed via <code>npm install</code> and should be saved to <code>package.json</code> file (with <code>--save</code> option). Your project structure should have <code>test</code> folder inside, which mocha is using as default to look tests inside. Few files should be added there, current structure I have that works.</p>

<p>```plain
/test</p>

<pre><code>/specs
    auth.spec.js
    ...
common.js
mocha.opts
utils.js
runMocha.js
</code></pre>

<p>```</p>

<p><code>/api</code> folder is the one that would contain specifications for you API, <code>mocha.opts</code> &ndash; contains global mocha configuration, <code>common.js</code> is common require file, that all tests are using, <code>utils.js</code> &ndash; test helper that would contain everything you need during testing, <code>runMocha.js</code> utility that would be tests entry point.</p>

<h3>mocha.opts</h3>

<p><code>plain
--require ./test/common.js
--reporter spec
--ui bdd
--recursive
--colors
--timeout 60000
--slow 300
</code></p>

<p>Mocha options allow to require some additional javascript file, as well as setting up global Mocha settings as what reporter to use, timeouts etc.</p>

<h3>common.js</h3>

<p><code>js
global.chai = require('chai');
global.expect = global.chai.expect;
</code></p>

<p>To do not require <code>chai</code> in each spec files, it&rsquo;s possible to require it once and place to global scope.</p>

<h3>runMocha.js</h3>

<p>```js
process.env.NODE_ENV = process.env.NODE_ENV || &lsquo;test&rsquo;;
process.env.TEST_ENV = process.env.TEST_ENV || &lsquo;test&rsquo;;</p>

<p>var exit = process.exit;
process.exit = function (code) {</p>

<pre><code>setTimeout(function () {
    exit();
}, 200);
</code></pre>

<p>};</p>

<p>require(&lsquo;../source/server&rsquo;);
require(&lsquo;../node_modules/mocha/bin/_mocha&rsquo;);
```</p>

<p>The secret sauce is last 2 lines. Since <code>require</code> is synchronous we first &ldquo;call&rdquo; API server to get up and after that &ldquo;call&rdquo; mocha engine to start testing. So, inside each tests we can do real HTTP calls to real HTTP servers. No mocks.</p>

<h3>package.json</h3>

<p>```js
// &hellip;
&ldquo;scripts&rdquo;: {</p>

<pre><code>"test": "node test/runMocha",
</code></pre>

<p>  },
// &hellip;
```</p>

<p>Package file should contain script to call API tests with simple <code>npm test</code> command.</p>

<h2>Test driven API</h2>

<p>Mocha is using BDD (behaviour driven development) approach to testing. Comparing to classical TDD, BDD encourage to write specifications in plain English, which works good especially when you just starting with particular feature.</p>

<p>What I typically do is just writing down specification of API, without any thinking of how to implement it. Give you example of something that I worked with recently.</p>

<p>```js
var request = require(&lsquo;request&rsquo;);
var testUtils = require(&lsquo;../utils&rsquo;);</p>

<p>describe(&lsquo;collections.spec.js&rsquo;, function () {</p>

<pre><code>describe('when non authorized', function () {
    it ('should not be authorized', function () {
    });
});

describe('when authorized', function () {
    describe('when new collection created', function () {
        describe('public', function () {
            it('should respond with 201 (created)', function () {
            });

            it('should create new collection', function () {
            });

            it('should have user', function () {
            });

            it('should collection be public', function () {
            });

            describe('and title is missing', function () {
                it('should respond with 412 (bad request)', function () {
                });
            });

            describe('with description', function () {
                it('should respond with 201 (created)', function () {
                });

                it('should create new collection', function () {
                });
            });
        });
    });

    // etc..
});
</code></pre>

<p>});
```</p>

<p>This is kind of skeleton I to have before start anything else.</p>

<h3>Unauthorized access</h3>

<p>If your API or part of it requires authorization, I prefer to test it.</p>

<p>```js</p>

<pre><code>var token, user, url, headers, response, results;

beforeEach(function () {
    url = testUtils.getRootUrl() + '/api/collections';
});

describe('when non authorized', function () {
    beforeEach(function (done) {
        request.get({url: url, json: true}, function (err, resp, body) {
            response = resp;
            done(err);
        });
    });

    it ('should not be authorized', function () {
        expect(response.statusCode).to.equal(401);
    });
});
</code></pre>

<p>```</p>

<p><code>testUtils.getRootUrl()</code> returns qualified URL for API, depending on test environment. During development, it&rsquo;s just <code>http://localhost:3000</code> where your <code>server.js</code> started.</p>

<h3>Authorized access</h3>

<p>Authorized access typically requires some kind of <code>access_token</code> sent either by headers or query string. Doesn&rsquo;t matter how, but <code>utils.js</code> must have method that would create new user and obtain access token from API. The actual implementation of such method would depend on your API auth mechanism.</p>

<p>All tests that required authorization access, should have such <code>beforeEach()</code>,</p>

<p>```js
beforeEach(function (done) {</p>

<pre><code>testUtils.createTestUserAndLoginToApi(function (err, createdUser, accessToken) {
    token = accessToken;
    user = createdUser;
    headers = {'X-Access-Token': accessToken};
    done(err);
});
</code></pre>

<p>});
```</p>

<p>After <code>access_token</code> is acquired, it can be used as part of any authorized calls.</p>

<h3>Behavior tests</h3>

<p>Now, everything is ready to test the behavior of API. Nothing fancy here, just act as clients do. Send HTTP requests, receive responses and check HTTP statuses. I&rsquo;ll just post some code, so it would give you direction.</p>

<p>```js
describe(&lsquo;when new collection created&rsquo;, function () {</p>

<pre><code>describe('public', function () {
    beforeEach(function () {
        collection = {title: 'This is test collection', public: true};
    });

    beforeEach(function (done) {
        request.post({url: url, headers: headers, body: collection, json: true}, function (err, resp, body) {
            response = resp;
            results = body;
            done(err);
        });
    });

    it('should respond with 201 (created)', function () {
        expect(response.statusCode).to.equal(201);
    });

    it('should create new collection', function () {
        expect(results.title).to.be.ok;
        expect(results._id).to.be.ok;
    });

    it('should have user', function () {
        expect(results.user).to.equal(user.email);
    });

    it('should collection be public', function () {
        expect(results.public).to.equal(true);
    });

    describe('and title is missing', function () {
        beforeEach(function (done) {
            request.post({url: url, headers: headers, body: {}, json: true}, function (err, resp, body) {
                response = resp;
                results = body;
                done(err);
            });
        });

        it('should respond with 412 (bad request)', function () {
            expect(response.statusCode).to.equal(412);
        });
    });

    describe('with description', function () {
        beforeEach(function () {
            collection = {title: 'This is test collection', description: 'description'};
        });

        beforeEach(function (done) {
            request.post({url: url, headers: headers, body: collection, json: true}, function (err, resp, body) {
                response = resp;
                results = body;
                done(err);
            });
        });

        it('should respond with 201 (created)', function () {
            expect(response.statusCode).to.equal(201);
        });

        it('should create new collection', function () {
            expect(results.description).to.equal('description');
        });
    });
});
</code></pre>

<p>});
```</p>

<h2>Conclusions</h2>

<p>I think dynamic languages as JavaScript is great for testing API&rsquo;s. Having no types eliminates &ldquo;model-per-response&rdquo; classes, <code>request.js</code> is great for making HTTP calls and <code>mocha</code> makes specifications output looks nice. So, nevertheless of back-end technology you can try to use the approach and see how it works for you.</p>

<p>The setup of tests and starting up of API services are so lightweight in Node.js that makes test-first API development nice and pleasant thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logs Driven Development]]></title>
    <link href="http://beletsky.net/2014/01/logs-driven-development.html"/>
    <updated>2014-01-25T13:12:00+02:00</updated>
    <id>http://beletsky.net/2014/01/logs-driven-development</id>
    <content type="html"><![CDATA[<p>One of the components I currently work on called <code>collector</code> and it has no tests. Collector is all about of building queue of tasks, executing them and store data to database after. Tasks are HTTP clients that requests API and process transform responses into generic forms.</p>

<p>I&rsquo;ve started it with tests using <a href="https://github.com/pgte/nock">nock</a> component to mock HTTP requests, but quickly I found those tests both hard to write and no real benefit cause real responses that could broke it differs from ones I mock inside the tests.</p>

<p>In the same time, I regularly change that component and after changes and deployments I pretty quickly see the regressions and non-expected behavior, cause all information I need is inside of application logs. I call that &ldquo;Logs Driven Development&rdquo;.</p>

<!-- More -->


<p>The key point of Logs Driven Development is then you know your logs so good, so you easily detect patterns and performance indicators, so if anything goes wrong, it became obvious. When reading logs of your application became a habit it works really well.</p>

<p>It probably have some similarities with <a href="http://en.wikipedia.org/wiki/Characterization_test">Characterization test</a>, where the behavior of application is clearly projected into logs. There are tools like <a href="http://approvaltests.sourceforge.net/">Approval Tests</a> that utilize that kind of testing and automate them.</p>

<p>That&rsquo;s of cause could not be taken seriously as recommended practice since it doesn&rsquo;t scale well.</p>
]]></content>
  </entry>
  
</feed>
